<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <title>Documents</title>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.7.1/jquery.contextMenu.min.css">
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
	<link rel="stylesheet" type="text/css" href="https://unpkg.com/js-year-calendar@latest/dist/js-year-calendar.min.css" />			<!-- css libraries -->
    <link rel="stylesheet" href="./css/style.css" />
    <link rel="stylesheet" href="index.css">

    <style>
      .node {}.link {} 
      .container {  
        display: grid !important;
        grid-template-columns: 1fr 1fr 1fr !important;							<! -- specifying style attributes-->
        max-width: 0 !important;
        margin: 0 !important;
        grid-gap: 5px !important;
        border: none !important;
        text-align: center !important;
        padding: 10px !important;
      }

      .heading {
        border-bottom: 2px solid !important;
        font-weight: bold !important;
        border-top: 2px solid !important;
        padding: 0 !important;
      }
    </style>
  </head>
  <body>
  
    <div class="left" id="leftplace">										<! -- creating left place and dropdown to select documents-->
      <select id='fileSelect' name="" placeholder="Select Doc" style='width:100%'>
        <% const keys = Object.keys(files) for (const key of keys) { %>
        <option value="<%=key %>"><%=key.split(".").slice(0, -1).join(".") %></option>
        <% } %>
	  </select>
      
      <div class="button-wrapper">
		<input type="button" value=" Graph View " class="graph-button" id="graphbut" hidden>						<! -- Buttons to pull up views-->
        <input type="button" value=" Map View " class="bubble-map-button" id="mapbut" disabled hidden>
		<input type="button" value=" List View " class="organize-button" id="listbut" hidden>
		<input type="button" value=" Time-line View " class="dates-button" id="timebut" hidden>		
        <input type="button" value=" Matrix View " class="matrix-button" id="matrixbut" hidden>
		<input type="button" value=" Relationship-View " class="cluster-button" id="relationbut">
		<input type="button" value=" DevTools " class="dev-button" id="devbut" hidden>
		<input type="button" value=" UserTools " class="user-button" id="userbut"hidden>
		
		<select name="DragDesign" id="lineguider">													<! -- Dropdown to selecting the design of lineguider-->
            <option value="design">Base Design</option>
            <option value="design0">Design</option>
            <option value="design1" id="LGdesign1">Design 1</option>
            <option value="design2" id="LGdesign2">Design 2</option>
            <option value="design3" id="LGdesign3">Design 3</option>
            <option value="design4" id="LGdesign4">Design 4</option>
        </select>
        <select name="dataset" id="dataselect">
            <option value="0" id="data0">Dataset 0</option>
            <option value="1" id="data1">Dataset 1</option>
            <option value="2" id="data2">Dataset 2</option>
            <option value="3" id="data3">Dataset 3</option>										<! -- Selecting different datasets-->
            <option value="4" id="data4">Dataset 4</option>
            <option value="5" id="data5">Dataset 5</option>
            <option value="6" id="data6">Dataset 6</option>
            <option value="7" id="data7">Dataset 7</option>
            <option value="8" id="data8">Dataset 8</option>
        </select>
        <select name="NoData" id="nodata">
            <option value="10" id="smallnodata">10 connections</option>
            <option value="20" id="mednodata">20 connections</option>								<! -- Selecting 10 or 20 connections -->
        </select>

		<input type="button" value=" Submit " class="submit-button" id="submitbut">
		<p id="tasktext" style="font-size:140%"></p>
		<p id="submitelements" style="font-size:140%"></p>
		<div>
			<input type="button" style="height:50px;width:50px" value=" A " class="Aswitch" id="Aswitchbut">		
			<input type="button" style="height:50px;width:50px" value=" B " class="Bswitch" id="Bswitchbut">		
			<input type="button" style="height:50px;width:50px" value=" C " class="Cswitch" id="Cswitchbut">		
		</div>
		<div>
			<input type="button" style="height:50px;width:190px" value=" Reset " class="Zswitch" id="Zswitchbut">		
		</div>
	  </div>
    </div>
	
    <svg id="line-canvas" width="100%" >
      <g></g>
    </svg>
	
    <div class="right" id="board" style = "background-color: #FFFFFF;">					<! -- right space to navigate through views-->
	
      <div class="all-data-box note the-node custom-data" id = "graphboxout" style ="height:760px;right:10px;top:0px;" data-dialog="graph">
        <div class='close_note'>X</div>													<! -- close the view ( similar for all views)-->									
        <h3>Person View&nbsp;
			<label class="switch">
				<input type="checkbox" id="movefixgraph" checked="true">										<! -- div element for graph view-->
				<span class="slider round"></span>
			</label>																		<! -- slider to fix the position (same for all views)-->
			<label class="check">
				<input type="checkbox" id="checkgraph" checked>
			</label>
		</h3>
		<label class="dropdown">
			<select name="Person" id="persondrop">
			  <option selected="selected" value="person">Person</option>
			  <option value="organization">Organization</option>
			  <option value="location">Location</option>
			  <option value="date">Date</option>
			  <option value="phone">Phone number</option>
			  <option value="misc">Misc</option>
			</select>
		</label>				
        <div class="all-data-wrapper" id="graphbox"style ="height:783px;width:800px">
          <p class="all-data"></p>
        </div>
      </div>
	  
      <div class="matrix-data-box note the-node custom-data" ">
        <div class='close_note'>X</div>
        <h3>Matrix&nbsp;
			<label class="switch">
				<input type="checkbox" id="movefixmatrix" checked="true">									<! -- div element for matrix view-->
				<span class="slider round"></span>
			</label>
		</h3>
        <p class="matrix-data"></p>
      </div>

      <div class="bubblemap-box note the-node custom-data" id="bubblemapbox" data-dialog="bubble-map" style = "left:10px; top:10px;width:1020px; height:600px;">
        <div class='close_note'>X</div>
        <h3>Location View&nbsp;
			<label class="switch">
				<input type="checkbox" id="movefixmap" checked="true" hidden>
				<span class="slider round"></span>
			</label>
			<label class="check">
				<input type="checkbox" id="checkmap" checked hidden> 									<! -- div element for map view-->
			</label>
		</h3>
        <div class="bubblemap-wrapper" id="mapbox">
          <p class="bubblemap">
            <span class="loading-text">Please wait while data is being fetched...</span>
            <svg id="bubbleMap" width="630" height="350"></svg>
          </p>
        </div>
      </div>
	  
	  <div class="clusterGO-data-box note the-node custom-data" id="clusterGO" style = "width:300px; display:none; height:300px;left:1550px; bottom:-10px;background-color: #FFFFFF;">
        <div class='close_note'>X</div>
        <h3>Person - Organization &nbsp;
			<label class="switch">
				<input type="checkbox" id="movefixGO" style="float:right;" checked="true">				<! -- div element for cluster between graph and org view-->
				<span class="slider round"></span>
			</label>
		</h3>
      </div>
	  
	  
	  <div class="clusterGM-data-box note the-node custom-data" id="clusterGM" style = "display:none; width:300px; height:300px;left:970px; top:60px; background-color: #FFFFFF;">
        <div class='close_note'>X</div>
        <h3>Person - Location &nbsp;
			<label class="switch">
				<input type="checkbox" id="movefixGM" checked="true">
				<span class="slider round"></span>												 		<! -- div element for cluster between graph and map view-->
			</label>	
		</h3>
      </div>
	  
	  	  
	  <div class="clusterOM-data-box note the-node custom-data" id="clusterOM" style = "display:none; top:20px; left:350px; background-color: #FFFFFF;">
        <div class='close_note'>X</div>
        <h3>Location - Organization &nbsp;
			<label class="switch">																		<! -- div element for cluster between org and map view-->
				<input type="checkbox" id="movefixOM" style="float:right;" checked="true">
				<span class="slider round"></span>
			</label>
		</h3>
      </div>
	  
	  
	  <div class="organize-data-box note the-node custom-data" id="orgbox" style = "left:1110px; bottom:5px; width:600px; height:620px; display:none; background-color: #FFFFFF;">
        <div class='close_note'>X</div>
        <h3>Organization View&nbsp;
			<label class="switch">
				<input type="checkbox" id="movefixorg" checked="true">									<! -- div element for organization bar view-->
				<span class="slider round"></span>
			</label>
			<label class="check">
				<input type="checkbox" id="checkorg" checked hidden>
			</label>
		</h3>
		<label><input type="checkbox" id="sort" hidden> <! -- Sort by Frequency --> </label>
		<label class="dropdown" hidden><select name="Org" id="orgdrop">
			<option value="person">Person</option>
			<option selected="selected" value="organization">Organization</option>
			<option value="location">Location</option>
			<option value="date">Date</option>
			<option value="phone">Phone number</option>
			<option value="misc">Misc</option>
		</select></label>
      </div>
	  
	  <div class="dates-data-box note the-node custom-data" style = "width:500px; height:450px; display:none; background-color: #FFFFFF;">
        <div class='close_note'>X</div>
        <h3>Dates</h3>														<! -- div element for dates view-->
		//<iframe src='https://cdn.knightlab.com/libs/timeline3/latest/embed/index.html?source=1flz6jptgGvmZaC-HzyWyOyEatFBj4uXXS6HDil3RVLI&font=Default&lang=en&initial_zoom=2&height=500'
		width='100%' height='400' webkitallowfullscreen mozallowfullscreen allowfullscreen frameborder='0'></iframe>
      </div>
	  
	  <div class="clusterchain-data-box note the-node custom-data" id = "clusterChain" style = " display:none; right:620px; width:600px; background-color: #FFFFFF;">
		<div class='close_note'>X</div>
        <h3>Person - Location - Organization&nbsp;
			<label class="switch">
				<input type="checkbox" id="movefixCBI">									<! -- div element for tri cluster view-->
				<span class="slider round"></span>
			</label>
		</h3>
		<div class="row align-items-center">
			<div class="col-sm"><div id="slider-simple"></div></div>
		</div>
	  </div>
	  
	  
	  <div class="btn-group" id="togglee" style="visibility:hidden;position:absolute;right:0px;float:left;" >
		  <button class="biclusterbut">Pairwise Relationship-Views</button>							<! -- div element for selecting between bi cluster and tri cluster view-->
		  <button class="triclusterbut">Single Relationship-View</button>
		  <button class="allclusterbut">All Relationship-Views</button>  
	  </div>

	  <div class="btn-group" id="Biclusters" style="visibility:hidden;position:absolute;right:0px;float:left;" >
		  <button class="mgclusterbut">Map-Graph</button>							<! -- div element for selecting between bi cluster and tri cluster view-->
		  <button class="mlclusterbut">Map-List</button>
		  <button class="glclusterbut">List-Graph</button>  
	  </div>

	  <div class="btn-group" id="tricluster" style="visibility:hidden;position:absolute;right:0px;float:left;" >
		<button class="triclusterbut">Map-Graph-List</button>							<! -- div element for selecting between bi cluster and tri cluster view-->
      </div>
	  
    </div>
	
    <ul class="custom-menu">
//      <li class="menu-item">Highlight Text</li>
//      <li class="menu-item">Unhighlight Text</li>
    </ul>

    <ul class="svg-custom-menu"></ul>

    <!-- <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script> -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.7.1/jquery.contextMenu.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.7.1/jquery.ui.position.js"></script>
    <script src="https://d3js.org/d3.v4.min.js" type="text/javascript"></script>
    <script src="https://d3js.org/d3-selection-multi.v1.js"></script>
    <script src="./dom-to-image.js"></script>
    <script src="./panzoom.min.js"></script>
    <script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
	<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>						<! -- loading libraries-->
	<script src="calendar-heatmap.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
	<script src="d3-timelines.js"></script>
	<script src="./calendar.js"></script>
    <script src="./consts.js"></script>
	<script src="https://code.highcharts.com/highcharts.js"></script>
	<script src="https://code.highcharts.com/highcharts-3d.js"></script>
	<script src="https://code.highcharts.com/modules/exporting.js"></script>
	<script src="https://code.highcharts.com/modules/export-data.js"></script>
	<script src="https://code.highcharts.com/modules/accessibility.js"></script>
	<script src="https://unpkg.com/d3-simple-slider"></script>	
    <script src="./fisheye.js" charset="utf-8"></script>
	<script src="./anythingzoomer.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/underscore@1.13.2/underscore-umd-min.js"></script>

	<script>
  
	document.getElementById("orgbox").style.left = window.innerWidth / 3 + "px";

	var lineCanvas = document.getElementById("line-canvas");
	var globalG = lineCanvas.childNodes[1];

	var fisheye = d3.fisheye.circular().radius(400).distortion(5);
	
	var foreign = document.createElementNS(
	  "http://www.w3.org/2000/svg",
	  "foreignObject",
	);
	foreign.setAttribute("width", "85%"); //creating svg element
	foreign.setAttribute("height", "100vh");
	foreign.setAttribute("id", "boardG");
	foreign.appendChild(document.getElementById("board"));
	globalG.appendChild(foreign);

	var tooltip = d3.select("#mapbox").append("div").attr("class", "toolTip"); //hover tooltip

	var board = d3.select("#board");

	var bubbleMapSVG = d3.select("#bubbleMap");
	
	var dataselid = localStorage.getItem("selectedat");
	var connsel = localStorage.getItem("selectednodata");

	var tooltip3 = d3
	  .select("body")
	  .append("div")
	  .style("position", "absolute")
	  .style("z-index", "10")
	  .style("visibility", "hidden")
	  .style("background", "#FFFFFF");

	d3.csv(
	  "./allconn/allconn" + connsel + "_" + dataselid + ".csv",
	  function (data) {
		mapcondata = data;
	  },
	);

	d3.csv("tasks.csv", function (data) {
	  taskdata = data;
	  if (dataselid != 0) {
		d3.select("#tasktext").text(taskdata[dataselid - 1][connsel]);
	  }
	});

	displaybubblemap();
	displaygraph();
	displayorg();
	displaycluster();

	var e = document.getElementById("dataselect");
	var value = e.value;

	randnames = document.querySelectorAll(".node");
	var checkcount = 0;
	
	var projection,
	  personsCollection = [];

	let pObj,
	  connections = [],
	  connections2 = [],
	  documentData,
	  connections3 = [],
	  connections4 = [],
	  connections5 = [];

	var nopoints = 50,
	  clusterview = 0,
	  connperc = 2;

	var tracker = [],
	  startimem,
	  startimeg,
	  startimeo,
	  startimecgm,
	  startimecgo,
	  startimecom,
	  startimechain,
	  submitted = [];


	//	check();


	function displayorg(){
		  document.querySelector('.right .organize-data-box').style.display = 'block';								//adding button click event for left side of software
          $('.note').css('z-index', 9);
          document.querySelector('.right .organize-data-box').style.zIndex = 99;
	 }
	 
	function displaygraph(){
		  document.querySelector('.right .all-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .all-data-box').style.zIndex = 99;

//		var nopoints = document.getElementById('nodata').value;			

		  
			var element = document.querySelector('.all-data');
			var instance2 = panzoom(element);
			if(nopoints=="50"){
			instance2.zoomAbs(
				150, // initial x position
				440, // initial y position
				2 // initial zoom 
			  );	
			  instance2.pause();
			  
			}
				if(nopoints=="100"){
			instance2.zoomAbs(
				10, // initial x position
				500, // initial y position
				1.5 // initial zoom 
			  );
				instance2.pause();
			}	
			if(nopoints=="150"){
			instance2.zoomAbs(
				0, // initial x position
				0, // initial y position
				1.3 // initial zoom 
			  );
				instance2.pause();
			}			

		$('#checkgraph').change(function(){	
		if (document.getElementById('checkgraph').checked)
		{
			instance2.pause();    //  Pauses event handling
		}			
		else
		{
			instance2.resume();
		}});		
		
		instance2.on('pan', function(e) {
			reDrawLines();
		});
		
		instance2.on('zoom', function(e) {
			reDrawLines();
		});
	 }
	 
	function displaybubblemap(){
	 
	 document.querySelector('.right .bubblemap-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .bubblemap-box').style.zIndex = 99;
          drawBubbleMap();
		
		var element = document.querySelector('.bubblemap')
		var instance = panzoom(element)
			instance.zoomAbs(
				10, // initial x position
				10, // initial y position
				1.6 // initial zoom 
			  );
		instance.pause();

	 }

	function displaycluster(){
		 if(clusterview == 1){
		 		document.querySelector('.right .clusterchain-data-box').style.display = 'block';
		document.querySelector('.right .clusterOM-data-box').style.display = 'block';
			document.querySelector('.right .clusterGO-data-box').style.display = 'block';
		  document.querySelector('.right .clusterGM-data-box').style.display = 'block';
		 } 
	 }

	board.on("mouseup",function(){																	//mouseclick event on right board
		  if(window.getSelection) {
			  
			let selection = window.getSelection();
			let id = event.target.getAttribute('id');
			let bo = document.querySelector("#board");
			let $event = event;
            let ele = event.target; 
			if(ele == bo){
			if(event.button==2){

				const rightCustomMenu = document.querySelector('.svg-custom-menu');

			rightCustomMenu.innerHTML = `<li class="svg-menu-item-${id} svg-menu-item">Rearrange Views</li>`						//Event to rearrange views
			rightCustomMenu.style.display = 'block';
			rightCustomMenu.style.left = event.clientX + 'px';
			rightCustomMenu.style.top = event.clientY + 'px';
			
			document.querySelector(`.svg-menu-item-${id}`).addEventListener('click', function(e) {
			document.querySelector('.svg-custom-menu').style.display = 'none';
			
			if(document.querySelector('.right .bubblemap-box').style.display == 'block' && document.querySelector('.right .all-data-box').style.display == 'block' && document.querySelector('.right .clusterGM-data-box').style.display == 'block' )
			{
			let element = document.getElementById('mapbox');
			let position = element.getBoundingClientRect();
			let x = position.left;
			let y = position.top;
			
			let element2 = document.getElementById('graphbox');
			let position2 = element2.getBoundingClientRect();
			let x2 = position2.left;
			let y2 = position2.top;
																												//calculating positions for each view 
			let d = document.getElementById('clusterGM');
			let width = d.offsetWidth;
			
			let mx1 = ((x+x2)/2)-parseFloat(width)/2;
			let mx2 = (y+y2)/2;
			
			d.style.position = "absolute";
			d.style.left = mx1+'px';
			d.style.top = mx2+'px';			
			}
			if(document.querySelector('.right .bubblemap-box').style.display == 'block' && document.querySelector('.right .organize-data-box').style.display == 'block' && document.querySelector('.right .clusterOM-data-box').style.display == 'block' )
			{
			let element = document.getElementById('mapbox');
			let position = element.getBoundingClientRect();
			let x = position.left;
			let y = position.top;
			
			let element2 = document.getElementById('orgbox');
			let position2 = element2.getBoundingClientRect();
			let x2 = position2.left;
			let y2 = position2.top;

			let d = document.getElementById('clusterOM');
			let width = d.offsetWidth;
			
			let mx1 = ((x+x2)/2)-parseFloat(width)/2;
			let mx2 = (y+y2)/2;
			
			d.style.position = "absolute";
			d.style.left = mx1+'px';
			d.style.top = mx2+'px';			
			}
			if(document.querySelector('.right .all-data-box').style.display == 'block' && document.querySelector('.right .organize-data-box').style.display == 'block' && document.querySelector('.right .clusterGO-data-box').style.display == 'block' )
			{
			let element = document.getElementById('graphbox');
			let position = element.getBoundingClientRect();
			let x = position.left;
			let y = position.top;
			
			let element2 = document.getElementById('orgbox');
			let position2 = element2.getBoundingClientRect();
			let x2 = position2.left;
			let y2 = position2.top;

			let d = document.getElementById('clusterGO');
			let width = d.offsetWidth;
			
			let mx1 = ((x+x2)/2)-parseFloat(width)/2;
			let mx2 = (y+y2)/2;
			
			d.style.position = "absolute";
			d.style.left = mx1+'px';
			d.style.top = mx2+'px';			
			}
			if(document.querySelector('.right .all-data-box').style.display == 'block' && document.querySelector('.right .organize-data-box').style.display == 'block' && document.querySelector('.right .bubblemap-box').style.display == 'block'  && document.querySelector('.right .clusterchain-data-box').style.display == 'block' )
			{
			let element = document.getElementById('graphbox');
			let position = element.getBoundingClientRect();
			let x = position.left;
			let y = position.top;
			
			let element2 = document.getElementById('orgbox');
			let position2 = element2.getBoundingClientRect();
			let x2 = position2.left;
			let y2 = position2.top;
			
			let element3 = document.getElementById('mapbox');
			let position3 = element3.getBoundingClientRect();
			let x3 = position3.left;
			let y3 = position3.top;			

			let d = document.getElementById('clusterChain');
			let width = d.offsetWidth;
			
			let mx1 = ((x+x2+x3)/3)-parseFloat(width)/2;
			let mx2 = (y+y2+y3)/3;
			
			d.style.position = "absolute";
			d.style.left = mx1+'px';																	//calculate the position of views and order them
			d.style.top = mx2+'px';			
			}			
			});
			}
		  }}
	  });


    let positions = {																					//initial positions of all views
        'graph' : {
            x : 0,
            y : 0
        },
        'bubble-map':{
            x : 0,
            y : 0
        },
        'highlight-text':{
            x : 0,
            y : 0
        },
		'organize':{
            x : 0,
            y : 0
        },
		'clusterGM':{
            x : 0,
            y : 0
        },
		'clusterGO':{
            x : 0,
            y : 0
        },
		'clusterOM':{
            x : 0,
            y : 0
        },
		'clusterchain':{
            x : 0,
            y : 0
        },
		'manual':{
            x : 0,
            y : 0
        }
      }

    const accessor = {																				//accessor to access x y position of elements in views
        x1 : function (d) {
          return positions[d.source.id].x + d.source.xOffset
        },
        y1 : function (d) {
            return positions[d.source.id].y + d.source.yOffset
        },
        x2 : function (d) {
            return positions[d.target.id].x + d.target.xOffset
        },
        y2 : function (d) {
            return positions[d.target.id].y + d.target.yOffset
        }
      }

    function getDocumentData() {																		//function to get all documents in the dataset and store them
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 201) {
            documentData = JSON.parse(this.responseText).documentData;
          }
        };
        xhttp.open("GET", "http://localhost:3000/getDocumentData", true);
        xhttp.send();
      }

    function lineFunc(d){																				//function to draw lines between elements
		  //console.log(d)
        let data = [[accessor.x1(d), accessor.y1(d)],
            [accessor.x2(d), accessor.y2(d)]];
						
 			  return "M" + data[0][0] + "," + data[0][1]
      + "C" + (data[0][0] + data[1][0]) / 2 + "," + data[0][1]
      + " " + (data[0][0] + data[1][0]) / 2 + "," + data[1][1]
      + " " + data[1][0] + "," + data[1][1];

	 return d3.line().curve(d3.curveNatural)(data);
      }

    function lineFunc2(d){																				//function to draw lines between elements
		  //console.log(d)
        let data = [[accessor.x1(d), accessor.y1(d)],
            [accessor.x2(d), accessor.y2(d)]];
						
		return d3.line().curve(d3.curveNatural)(data);

      }
	  
	  
    function drawBubbleMap() {																		//function to draw bubble map and project the map
        width = +bubbleMapSVG.attr("width"),
        height = +bubbleMapSVG.attr("height");

        // Map and projection
        projection = d3.geoMercator()
            .center([0,20])
            .scale(99)
            .translate([ width/2, height/2 ])
	
	//let mapdatasel = document.getElementById("mapdata").value);
	//let mapdataselid = mapdatasel.charAt(mapdatasel.length-1);			//get last char of select
	//var mapdataselid = Math.floor(Math.random() * 5) + 1;
	

        d3.queue()
          .defer(d3.json, "https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson")  // World shape
          .defer(d3.csv, "./map-data/map-data"+dataselid+".csv")
          .await(ready);
      }

	var timeout = setTimeout(function(d){tooltip.style("display", "none");},1000);	

    function ready(error, dataGeo, data) {															//Portray the locations from the file through lat and long
		 		
//		var nopoints = document.getElementById('nodata').value;	
//		var nopoints = nodata;
		//const shuffled = data.sort(() => 0.5 - Math.random());

		// Get sub-array of first n elements after shuffled
		let selected = data.slice(0, nopoints);
		
		data = selected;
		
		
        var allContinent = d3.map(data, function(d){return(d.continent)}).keys()
        var color = d3.scaleOrdinal()
          .domain(allContinent)
          .range(d3.schemePaired);

        var valueExtent = d3.extent(data, function(d) { return +d.n; })
        var size = d3.scaleSqrt()
          .domain(valueExtent)
          .range([ 1, 50])

          bubbleMapSVG.append("g")
            .selectAll("path")
            .data(dataGeo.features)
            .enter()
            .append("path")																			//drawing the continents and projecting the whole map
              .attr("fill", "#b8b8b8")
              .attr("d", d3.geoPath()
                  .projection(projection)
              )
            .style("stroke", "none")
            .style("opacity", .3)
	
		
          bubbleMapSVG
            .selectAll("myCircles")																		// defining the circles and their attriutles
            .data(data.sort(function(a,b) { return +b.n - +a.n }).filter(function(d,i){ return i<1000 }))
            .enter()
            .append("circle")
              .attr("cx", function(d){ return projection([+d.lng, +d.lat])[0] })
              .attr("cy", function(d){ return projection([+d.lng, +d.lat])[1] })
              .attr("r", function(d){ return 6 }) //size(+d.n)
              .style("fill", function(d){ return '#6495ed' })
              .attr("stroke", function(d){ if(d.n>2000){return "black"}else{return "none"}  })
              .attr("stroke-width", 1)
              .attr("fill-opacity", .8)
              .attr("data-name", function (d) {
                return d.name;
              })
              .attr("data-location", function (d) {
                return d.location;
              })
			  .attr("label",function(d){return d.label;})
			  .attr('map-id', function(d,i){ return 'map' + (i); })
			  .attr('id', function(d,i){ return 'map' + (i); })			  
			  .attr('clickhist', 0)
			  .attr('selecthist',0)
			  .attr('clicked',false)
				.attr('cloned',false)			  
			  .attr("class", function(d) {return "circle1";})
			  .on("mouseover", maphover)
			  .on("mouseout",mapout)																		//click events on map elements
			  .on("mouseup",mapClick)
			  //.on("click",mapClick);

				var selectedmap;
				var draggableOptionsmap = {
					start: function(event, ui) {
						//get all selected...
						if (ui.helper.hasClass('selectedmap')) selectedmap = $('div.selectedmap');
						else {
							selectedmap = $(ui.helper);
							$('div.selectedmap').removeClass('selectedmap')									//draggable options for map view
						}
					},
					drag: function(event, ui) {
						var currentLoc = $(this).position();
						var prevLoc = $(this).data('prevLoc');
						if (!prevLoc) {
							prevLoc = ui.originalPosition;
						}

						var offsetLeft = currentLoc.left-prevLoc.left;
						var offsetTop = currentLoc.top-prevLoc.top;

						moveSelectedmap(offsetLeft, offsetTop);
						$(this).data('prevLoc', currentLoc);
					}
				};

				function moveSelectedmap(ol, ot){
					//console.log("moving to: " + ol + ":" + ot);
					selectedmap.each(function(){
						$this =$(this);
						var p = $this.position();
						var l = p.left;
						var t = p.top;
						//console.log({id: $this.attr('id'), l: l, t: t});
						$this.css('left', l+ol);
						$this.css('top', t+ot);
					})}
			  
			  $('.bubblemap-box').draggable(draggableOptionsmap);
			  $('.bubblemap-box').addClass('selectedmap');
			  $('.bubblemap-box').on('drag', reDrawLines);

        document.querySelector('.loading-text').style.display = 'none';  

		if(document.getElementById("movefixmap").checked){
			document.getElementById('bubblemapbox').ondragstart = function() { return false; };
			$('.bubblemap-box').removeClass('selectedgraph')
			$('.bubblemap-box').removeClass('selectedorg')											//move check functions
			$('.bubblemap-box').removeClass('selectedGM')
			$('.bubblemap-box').removeClass('selectedOM')
			$('.bubblemap-box').removeClass('selectedchain')
		}
		else{
			document.getElementById('bubblemapbox').ondragstart = function() { return true; };
				if(GraphToMapCollection.length>0)
					$('.bubblemap-box').addClass('selectedgraph')
				if(OrgToMapCollection.length==0)						
					$('.bubblemap-box').addClass('selectedorg')
				if(ClusterGMToMap.length==0)
					$('.bubblemap-box').addClass('selectedGM')
				if(ClusterOMToMap.length==0)					
					$('.bubblemap-box').addClass('selectedOM')
				if(ClusterChainToMap.length==0)					
					$('.bubblemap-box').addClass('selectedchain')				
		};
      	


      }
	  
																											
    function reDrawLines() {																			//function to help redraw the lines when dragging or resizing for all views
		
		bubbleToTextCollection = [];																	//lines redraw for map to text similarly for all other views connected with map
        connections1bt.forEach(conn => {	
          const ele = conn.source;

			let sid = conn.target[0].id;			
            //let x1Loc = parseFloat($('.' + conn.boxElement).css('left').split('px')[0]) + ele.getBBox().x + ele.getBBox().width+5;
            //let y1Loc = parseFloat($('.' + conn.boxElement).css('top').split('px')[0]) + ele.getBBox().y + (ele.getBBox().height/2) + 40;
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;
			
            let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
            let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top+40;

            bubbleToTextCollection.push({
              source : {
                id: "bubble-map",
				ele:ele.getAttribute('map-id').slice(3),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "highlight-text",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		bubbleToGraphCollection = [];
        connections1bg.forEach(conn => {
          const ele = conn.source;

			let sid = conn.target.getAttribute('personsid');			
          //  let x1Loc = parseFloat($('.' + conn.boxElement).css('left').split('px')[0]) + ele.getBBox().x + ele.getBBox().width+5;
           // let y1Loc = parseFloat($('.' + conn.boxElement).css('top').split('px')[0]) + ele.getBBox().y + (ele.getBBox().height/2) + 40;
		
		
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;
		
			domRect = conn.target.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect.y+5;
			
			bubbleToGraphCollection.push({
                    source : {
                      id: "bubble-map",
					  ele: ele.getAttribute('map-id').slice(3),
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "graph",
					  ele: sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
        });
		
		bubbleToOrgCollection = [];
        connections1bo.forEach(conn => {
          const ele = conn.source;

			let sid = conn.target.getAttribute('barid');			
  //          let x1Loc = parseFloat($('.' + conn.boxElement).css('left').split('px')[0]) + ele.getBBox().x + ele.getBBox().width+5;
  //          let y1Loc = parseFloat($('.' + conn.boxElement).css('top').split('px')[0]) + ele.getBBox().y + (ele.getBBox().height/2) + 40;

			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;	
	
				domRect = conn.target.getBoundingClientRect();
				let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect.y+4;
				
				
				bubbleToOrgCollection.push({
                    source : {
                      id: "bubble-map",
					  ele: ele.getAttribute('map-id').slice(3),
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
					  ele: sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
        });
		
		bubbleToManCollection = [];
        connections1bman.forEach(conn => {
          const ele = conn.source;

			let sid = conn.target.getAttribute('id');		
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            bubbleToManCollection.push({
              source : {
                id: "bubble-map",
				ele:ele.getAttribute('map-id').slice(3),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "manual",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
	
		bubbleToGMCollection= [];
        connections1bgm.forEach(conn => {
          const ele = conn.source;

			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

           // let x1Loc = parseFloat($('.' + conn.boxElement).css('left').split('px')[0]) + ele.getBBox().x + ele.getBBox().width+5;
           // let y1Loc = parseFloat($('.' + conn.boxElement).css('top').split('px')[0]) + ele.getBBox().y + (ele.getBBox().height/2) + 40;
									
					var circele = conn.target;
					let nameid = circele.getAttribute('clustergmid')
					var detail = circele.getAttribute('detailed');	
					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgmmid"+nameid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);

					}
				
				
				bubbleToGMCollection.push({
                    source : {
                      id: "bubble-map",
					  ele: ele.getAttribute('map-id').slice(3),
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "clusterGM",
					  ele: nameid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
        });
		
		bubbleToOMCollection = [];
        connections1bom.forEach(conn => {
          const ele = conn.source;
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

				var circele = conn.target;
				var nameid = circele.getAttribute('clusteromid')
				var detail = circele.getAttribute('detailed');	
					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("commid"+nameid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);

					}

            bubbleToOMCollection.push({
              source : {
                id: "bubble-map",
				ele:ele.getAttribute('map-id').slice(3),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "clusterOM",
				ele:nameid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		bubbleToChainCollection = [];
        connections1bchain.forEach(conn => {
          const ele = conn.source;
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

				
				var circele = conn.target;
				let nameid = circele.getAttribute('clusterchainid')
				var detail = circele.getAttribute('detailed');
				
				if(detail=="false")
				{
					let domRect = circele.getBoundingClientRect();
					let radius = parseInt(circele.getAttribute('r'));
					var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
					var y2Loc = domRect.y+parseInt(radius/3);
				}
				else
				{	
					let eleme2 = document.getElementById("cchainmid"+nameid);
					let domRect2 = eleme2.getBoundingClientRect();
					let height2 = eleme2.getAttribute('height');
					let width2 = eleme2.getAttribute('width');
					var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
					var y2Locm = domRect2.y+parseInt(height2/7);
					
					var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
					var y2Loc = domRect2.y+parseInt(height2/7);
				}

            bubbleToChainCollection.push({
              source : {
                id: "bubble-map",
				ele:ele.getAttribute('map-id').slice(3),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "clusterchain",
				ele:nameid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		GraphToTextCollection = [];																				//redraw lines for views connected with graph view
        connections2gt.forEach(conn => {
          const ele = conn.source;

			let sid = conn.target[0].id;	
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

            let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
            let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top+40;

            GraphToTextCollection.push({
              source : {
                id: "graph",
				ele:ele.getAttribute('personsid'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "highlight-text",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });

		GraphToMapCollection = [];
        connections2gm.forEach(conn => {
          const ele = conn.source;

			let sid = conn.target.getAttribute('map-id');	;	

			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

            //let x2Loc = parseFloat($('.bubblemap-box').css('left').split('px')[0]) + conn.target.getBBox().x + conn.target.getBBox().width+5;
            //let y2Loc = parseFloat($('.bubblemap-box').css('top').split('px')[0]) + conn.target.getBBox().y + (conn.target.getBBox().height/2) + 40;


			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            GraphToMapCollection.push({
              source : {
                id: "graph",
				ele:ele.getAttribute('personsid'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "bubble-map",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });

		GraphToOrgCollection = [];
        connections2go.forEach(conn => {
          const ele = conn.source;

			let sid = conn.target.getAttribute('barid');		
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

				domRect2 = conn.target.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;

            GraphToOrgCollection.push({
              source : {
                id: "graph",
				ele:ele.getAttribute('personsid'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "organize",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		GraphToManCollection = [];
        connections2gman.forEach(conn => {
          const ele = conn.source;

			let sid = conn.target.getAttribute('id');		
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

				domRect2 = conn.target.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;

            GraphToManCollection.push({
              source : {
                id: "graph",
				ele:ele.getAttribute('personsid'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "manual",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });

		GraphToGMCollection= [];
        connections2ggm.forEach(conn => {
          const ele = conn.source;

			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;
									
					var circele = conn.target;
					let nameid = circele.getAttribute('clustergmid')
					var detail = circele.getAttribute('detailed');	
					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgmgid"+nameid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);

					}
				
				
				GraphToGMCollection.push({
                    source : {
                      id: "graph",
					  ele: ele.getAttribute('personsid'),
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "clusterGM",
					  ele: nameid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
        });
		
		GraphToGOCollection = [];
        connections2ggo.forEach(conn => {
          const ele = conn.source;
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

				var circele = conn.target;
				var nameid = circele.getAttribute('clustergoid')
				var detail = circele.getAttribute('detailed');	
					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgooid"+nameid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);

					}
			
			GraphToGOCollection.push({
              source : {
                id: "graph",
				ele:ele.getAttribute('personsid'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "clusterGO",
				ele:nameid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		GraphToChainCollection = [];
        connections2gchain.forEach(conn => {
          const ele = conn.source;
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

				
				var circele = conn.target;
				let nameid = circele.getAttribute('clusterchainid')
				var detail = circele.getAttribute('detailed');
				
				if(detail=="false")
				{
					let domRect = circele.getBoundingClientRect();
					let radius = parseInt(circele.getAttribute('r'));
					var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
					var y2Loc = domRect.y+parseInt(radius/3);
				}
				else
				{	
					let eleme2 = document.getElementById("cchaingid"+nameid);
					let domRect2 = eleme2.getBoundingClientRect();
					let height2 = eleme2.getAttribute('height');
					let width2 = eleme2.getAttribute('width');
					var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
					var y2Locm = domRect2.y+parseInt(height2/7);
					
					var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
					var y2Loc = domRect2.y+parseInt(height2/7);
				}

            GraphToChainCollection.push({
              source : {
                id: "graph",
				ele:ele.getAttribute('personsid'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "clusterchain",
				ele:nameid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		OrgToTextCollection = [];
        connections3ot.forEach(conn => {
			
			let sid = conn.target[0].id;	
            const ele = conn.source;
					
				domRect = ele.getBoundingClientRect();
				let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
				let y1Loc = domRect.y+5;

                      let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
                      let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

                      OrgToTextCollection.push({
                        source : {
                          id: "organize",
						  ele:ele.getAttribute('barid'),
                          xOffset : x1Loc,
                          yOffset : y1Loc
                        },
                        target : {
                          id: "highlight-text",
						  ele: sid,
                          xOffset : x2Loc,
                          yOffset : y2Loc
                        }
                      });
               })

		OrgToMapCollection = [];
        connections3om.forEach(conn => {
          const ele = conn.source;

			let sid = conn.target.getAttribute('map-id');	;	
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            OrgToMapCollection.push({
              source : {
                id: "organize",
				ele:ele.getAttribute('barid'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "bubble-map",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });

		OrgToGraphCollection = [];
        connections3og.forEach(conn => {
          const ele = conn.source;

			let sid = conn.target.getAttribute('personsid');		
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;
			
			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            OrgToGraphCollection.push({
              source : {
                id: "organize",
				ele:ele.getAttribute('barid'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "graph",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		OrgToManCollection = [];
        connections3oman.forEach(conn => {
          const ele = conn.source;

			let sid = conn.target.getAttribute('id');		
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            OrgToManCollection.push({
              source : {
                id: "organize",
				ele:ele.getAttribute('barid'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "manual",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		OrgToGOCollection= [];
        connections3ogo.forEach(conn => {
          const ele = conn.source;

			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;
									
					var circele = conn.target;
					let nameid = circele.getAttribute('clustergoid')
					var detail = circele.getAttribute('detailed');	
					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgooid"+nameid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);
					}
				
				
				OrgToGOCollection.push({
                    source : {
                      id: "organize",
					  ele: ele.getAttribute('orgid'),
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "clusterGO",
					  ele: nameid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
        });
		
		OrgToOMCollection = [];
        connections3oom.forEach(conn => {
          const ele = conn.source;
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

				var circele = conn.target;
				var nameid = circele.getAttribute('clusteromid')
				var detail = circele.getAttribute('detailed');	
					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("comoid"+nameid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);

					}
			
			OrgToOMCollection.push({
              source : {
                id: "organize",
				ele:ele.getAttribute('orgid'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "clusterOM",
				ele:nameid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		OrgToChainCollection = [];
        connections3ochain.forEach(conn => {
          const ele = conn.source;
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

				
				var circele = conn.target;
				let nameid = circele.getAttribute('clusterchainid')
				var detail = circele.getAttribute('detailed');
				
				if(detail=="false")
				{
					let domRect = circele.getBoundingClientRect();
					let radius = parseInt(circele.getAttribute('r'));
					var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
					var y2Loc = domRect.y+parseInt(radius/3);
				}
				else
				{	
					let eleme2 = document.getElementById("cchainoid"+nameid);
					let domRect2 = eleme2.getBoundingClientRect();
					let height2 = eleme2.getAttribute('height');
					let width2 = eleme2.getAttribute('width');
					var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
					var y2Locm = domRect2.y+parseInt(height2/7);
					
					var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
					var y2Loc = domRect2.y+parseInt(height2/7);
				}

            OrgToChainCollection.push({
              source : {
                id: "organize",
				ele:ele.getAttribute('orgid'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "clusterchain",
				ele:nameid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		
		ClusterGMToTextCollection = [];
        connections4ct.forEach(conn => {
			
            const ele = conn.source;
			let nameid = ele.getAttribute('clustergmid');
			let sid = conn.target[0].id;
			var circele = document.getElementById("cgmcircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cgmmid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth;
				var y1Loc = domRect.y+parseInt(height/6);
			}

            let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
            let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

            ClusterGMToTextCollection.push({
				source : {
                id: "clusterGM",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
                },
                target : {
                id: "highlight-text",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
                }
                });
               })

		ClusterGMToGraph = [];
        connections4cg.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clustergmid')
			
			var circele = document.getElementById("cgmcircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cgmgid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Locg = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Loc = domRect.y+parseInt(height/6);

			}

			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;
			
			if(detail=="false")
			{
            ClusterGMToGraph.push({
				  source : {
					id: "clusterGM",
					ele:nameid,
					xOffset : x1Loc,
					yOffset : y1Loc
				  },
				  target : {
					id: "graph",
					xOffset : x2Loc,
					yOffset : y2Loc
				  }
				});
			}
			else
			{
			ClusterGMToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Locg,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
        });


		ClusterGMCloneToGraph = [];
        connections4cgclone.forEach(conn => {

			const ele = conn.source;			
			let	nameid = ele.getAttribute('id').slice(5);
		
			let x1Loc = parseFloat(ele.getAttribute("cx"));
			let y1Loc = parseFloat(ele.getAttribute("cy"));

			let domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;
			
            ClusterGMCloneToGraph.push({
				  source : {
					id: "clusterGM",
					ele:nameid,
					xOffset : x1Loc,
					yOffset : y1Loc
				  },
				  target : {
					id: "graph",
					xOffset : x2Loc,
					yOffset : y2Loc
				  }
				});
        });


		ClusterGMToMap = [];
        connections4cm.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clustergmid')
			
			var circele = document.getElementById("cgmcircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("cgmmid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Loc = domRect2.y+parseInt(height/6);
			}
			
			
			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;
			
			if(detail=="false")
			{
            ClusterGMToMap.push({
				  source : {
					id: "clusterGM",
					ele:nameid,
					xOffset : x1Loc,
					yOffset : y1Loc
				  },
				  target : {
					id: "bubble-map",
					xOffset : x2Loc,
					yOffset : y2Loc
				  }
				});
			}
			else
			{
			ClusterGMToMap.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Locm,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "bubble-map",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
        });
	
		ClusterGMToManCollection = [];
        connections4cman.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clustergmid')
			
			var circele = document.getElementById("cgmcircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("cgmmid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Loc = domRect2.y+parseInt(height/6);
			}
			
			let sid = conn.target.getAttribute('id');		

			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            ClusterGMToManCollection.push({
              source : {
                id: "clusterGM",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "manual",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
	
		ClusterGOToTextCollection = [];
        connections5ct.forEach(conn => {
			
            const ele = conn.source;
			let nameid = ele.getAttribute('clustergoid')
			let sid = conn.target[0].id;	
			var circele = document.getElementById("cgocircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cgooid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth;
				var y1Loc = domRect.y+parseInt(height/6);
			}
			
            let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
            let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

            ClusterGOToTextCollection.push({
				source : {
                id: "clusterGO",
				ele:sid,
                xOffset : x1Loc,
                yOffset : y1Loc
                },
                target : {
                id: "highlight-text",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
                }
                });
               })

		ClusterGOToGraph = [];
        connections5cg.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clustergoid');
			
			var circele = document.getElementById("cgocircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cgogid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Locg = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Loc = domRect.y+parseInt(height/6);
			}

			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

			if(detail=="false")
			{
            ClusterGOToGraph.push({
				  source : {
					id: "clusterGO",
					ele:nameid,
					xOffset : x1Loc,
					yOffset : y1Loc
				  },
				  target : {
					id: "graph",
					xOffset : x2Loc,
					yOffset : y2Loc
				  }
				});
			}
			else
			{
			ClusterGOToGraph.push({
                    source : {
                      id: "clusterGO",
					  ele:nameid,
                      xOffset : x1Locg,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}

        });

		ClusterGOToOrg = [];
        connections5co.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clustergoid')
			
			var circele = document.getElementById("cgocircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("cgooid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Loco = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Loc = domRect2.y+parseInt(height/6);
			}
			
			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

			if(detail=="false")
			{
            ClusterGOToOrg.push({
				  source : {
					id: "clusterGO",
					ele:nameid,
					xOffset : x1Loc,
					yOffset : y1Loc
				  },
				  target : {
					id: "organize",
					xOffset : x2Loc,
					yOffset : y2Loc
				  }
				});
			}
			else
			{
			ClusterGOToOrg.push({
                    source : {
                      id: "clusterGO",
					  ele:nameid,
                      xOffset : x1Loco,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
        });


		ClusterGOToManCollection = [];
        connections5cman.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clustergoid')
			
			var circele = document.getElementById("cgocircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("cgooid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Loco = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Loc = domRect2.y+parseInt(height/6);
			}
			
			let sid = conn.target.getAttribute('id');		

			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            ClusterGOToManCollection.push({
              source : {
                id: "clusterGO",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "manual",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		ClusterOMToTextCollection = [];
        connections6ct.forEach(conn => {
			
            const ele = conn.source;
			let nameid = ele.getAttribute('clusteromid')
			
			let sid = conn.target[0].id;	
			var circele = document.getElementById("comcircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("comoid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth;
				var y1Loc = domRect.y+parseInt(height/6);
			}
			
            let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
            let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

            ClusterOMToTextCollection.push({
				source : {
                id: "clusterOM",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
                },
                target : {
                id: "highlight-text",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
                }
                });
               })

		ClusterOMToOrg = [];
        connections6co.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clusteromid');
			
			var circele = document.getElementById("comcircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("comoid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Loco = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Loc = domRect.y+parseInt(height/6);
			}

			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

			if(detail=="false")
			{
            ClusterOMToOrg.push({
				  source : {
					id: "clusterOM",
					ele:nameid,
					xOffset : x1Loc,
					yOffset : y1Loc
				  },
				  target : {
					id: "organize",
					xOffset : x2Loc,
					yOffset : y2Loc
				  }
				});
			}
			else
			{
			ClusterOMToOrg.push({
                    source : {
                      id: "clusterOM",
					  ele:nameid,
                      xOffset : x1Loco,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
        });

		ClusterOMToMap = [];
        connections6cm.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clusteromid')

			var circele = document.getElementById("comcircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("commid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Loco = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Loc = domRect2.y+parseInt(height/6);
			}
			
			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

			if(detail=="false")
			{
            ClusterOMToMap.push({
				  source : {
					id: "clusterOM",
					ele:nameid,
					xOffset : x1Loc,
					yOffset : y1Loc
				  },
				  target : {
					id: "bubble-map",
					xOffset : x2Loc,
					yOffset : y2Loc
				  }
				});
			}
			else
			{
			ClusterOMToMap.push({
                    source : {
                      id: "clusterOM",
					  ele:nameid,
                      xOffset : x1Loco,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "bubble-map",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
        });


		ClusterOMToManCollection = [];
        connections6cman.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clusteromid')

			var circele = document.getElementById("comcircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("commid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Loco = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Loc = domRect2.y+parseInt(height/6);
			}
			
			let sid = conn.target.getAttribute('id');		

			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            ClusterOMToManCollection.push({
              source : {
                id: "clusterOM",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "manual",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		
		ClusterChainToTextCollection = [];																	//redraw lines for clusted chain connected views
        connections7ct.forEach(conn => {
			
            const ele = conn.source;
			let nameid = ele.getAttribute('clusterchainid')
			
			let sid = conn.target[0].id;	
			var circele = document.getElementById("cchaincircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cchainmid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth;
				var y1Loc = domRect.y+parseInt(height/7);
			}
			
            let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
            let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

            ClusterChainToTextCollection.push({
				source : {
                id: "clusterchain",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
                },
                target : {
                id: "highlight-text",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
                }
                });
               })

		ClusterChainToOrg = [];
        connections7co.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clusterchainid')

			var circele = document.getElementById("cchaincircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cchainoid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Loc = domRect.y+parseInt(height/7);
			}

				domRect2 = conn.target.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;

            ClusterChainToOrg.push({
              source : {
                id: "clusterchain",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "organize",
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });

		ClusterChainToMap = [];
        connections7cm.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clusterchainid')
			var circele = document.getElementById("cchaincircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("cchainmid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Loc = domRect2.y+parseInt(height/7);
			}
			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            ClusterChainToMap.push({
              source : {
                id: "clusterchain",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "bubble-map",
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		ClusterChainToGraph = [];
        connections7cg.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clusterchainid')
			var circele = document.getElementById("cchaincircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("cchaingid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Loc = domRect2.y+parseInt(height/7);
			}
			
			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            ClusterChainToGraph.push({
              source : {
                id: "clusterchain",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "graph",
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });

		ClusterChainToGM = [];
        connections7cgm.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clusterchainid')
			var circele = document.getElementById("cchaincircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("cchaingid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Loc = domRect2.y+parseInt(height/7);
			}
				domRect2 = conn.target.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;

            ClusterChainToGM.push({
              source : {
                id: "clusterchain",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "clusterGM",
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });

		ClusterChainToGO = [];
        connections7cgo.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clusterchainid')
			var circele = document.getElementById("cchaincircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("cchainoid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Loc = domRect2.y+parseInt(height/7);
			}
			
			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;
            
			ClusterChainToGO.push({
              source : {
                id: "clusterchain",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "clusterGO",
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		ClusterChainToOM = [];
        connections7com.forEach(conn => {
			const ele = conn.source;
			let nameid = ele.getAttribute('clusterchainid')
			var circele = document.getElementById("cchaincircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("cchainmid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Loc = domRect2.y+parseInt(height/7);
			}
			let domRect3 = conn.target.getBoundingClientRect();
			let x2Loc = domRect3.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect3.y+5;

            ClusterChainToOM.push({
              source : {
                id: "clusterchain",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "clusterOM",
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });


		ClusterChainToManCollection = [];
        connections7cman.forEach(conn => {
			
			const ele = conn.source;
			let nameid = ele.getAttribute('clusterchainid')
			var circele = document.getElementById("cchaincircid"+nameid);
			var detail = circele.getAttribute('detailed');
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{	
				let eleme2 = document.getElementById("cchainmid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height = eleme2.getAttribute('height');
				let width = eleme2.getAttribute('width');
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Loc = domRect2.y+parseInt(height/7);
			}
			
			let sid = conn.target.getAttribute('id');		

			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            ClusterChainToManCollection.push({
              source : {
                id: "clusterchain",
				ele:nameid,
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "manual",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		TextDocToManCollection=[];
		connections8tman.forEach(conn => {
			const ele = conn.source;

			let sid = conn.target.getAttribute('id');		
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

			domRect2 = conn.target.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;

            TextDocToManCollection.push({
              source : {
                id: "manual",
				ele:ele.getAttribute('id'),
                xOffset : x1Loc,
                yOffset : y1Loc
              },
              target : {
                id: "manual",
				ele:sid,
                xOffset : x2Loc,
                yOffset : y2Loc
              }
            });
        });
		
		if(bubbleToTextCollection.length > 0) {
          drawPolyLineMap(bubbleToTextCollection);										//If any of the arrays having lines data then draw the lines after redraw
        }
		
		if(bubbleToGraphCollection.length > 0) {
          drawPolyLineMap(bubbleToGraphCollection);
        }
		
		if(bubbleToOrgCollection.length > 0) {
          drawPolyLineMap(bubbleToOrgCollection);
        }
		
		if(bubbleToManCollection.length > 0) {
          drawPolyLineMap(bubbleToManCollection);
        }
		
		if(bubbleToGMCollection.length > 0) {
          drawPolyLineMap(bubbleToGMCollection);
        }
		
		if(bubbleToOMCollection.length > 0) {
          drawPolyLineMap(bubbleToOMCollection);
        }

		if(bubbleToChainCollection.length > 0) {
          drawPolyLineMap(bubbleToChainCollection);
        }
		
        if(GraphToTextCollection.length > 0) {
          drawPolyLineGraph(GraphToTextCollection);
        }
		
		if(GraphToMapCollection.length > 0) {
          drawPolyLineGraph(GraphToMapCollection);
        }
		
		if(GraphToOrgCollection.length > 0) {
          drawPolyLineGraph(GraphToOrgCollection);
        }
		
		if(GraphToManCollection.length > 0) {
          drawPolyLineGraph(GraphToManCollection);
        }
		
		if(GraphToGMCollection.length > 0) {
          drawPolyLineGraph(GraphToGMCollection);
        }
		
		if(GraphToGOCollection.length > 0) {
          drawPolyLineGraph(GraphToGOCollection);
        }
		
		if(GraphToChainCollection.length > 0) {
          drawPolyLineGraph(GraphToChainCollection);
        }		
		
		if(OrgToTextCollection.length > 0) {
          drawPolyLineOrg(OrgToTextCollection);
        }
		
		if(OrgToMapCollection.length > 0) {
          drawPolyLineOrg(OrgToMapCollection);
        }
		
		if(OrgToGraphCollection.length > 0) {
          drawPolyLineOrg(OrgToGraphCollection);
        }
		
		if(OrgToManCollection.length > 0) {
          drawPolyLineOrg(OrgToManCollection);
        }
		
		if(OrgToChainCollection.length > 0) {
          drawPolyLineOrg(OrgToChainCollection);
        }
		
		if(OrgToGOCollection.length > 0) {
          drawPolyLineOrg(OrgToGOCollection);
        }
		
		if(OrgToOMCollection.length > 0) {
          drawPolyLineOrg(OrgToOMCollection);
        }		
		
		 if(ClusterGMToGraph.length > 0) {
          drawPolyLineClusterGM(ClusterGMToGraph);
        }
		
		if(ClusterGMToMap.length > 0) {
          drawPolyLineClusterGM(ClusterGMToMap);
        }
		
		if(ClusterGMToTextCollection.length > 0) {
          drawPolyLineClusterGM(ClusterGMToTextCollection);
        }

		if(ClusterGMToManCollection.length > 0) {
          drawPolyLineClusterGM(ClusterGMToManCollection);
        }		
		
		if(ClusterGOToGraph.length > 0) {
          drawPolyLineClusterGO(ClusterGOToGraph);
        }
		
		if(ClusterGOToOrg.length > 0) {
          drawPolyLineClusterGO(ClusterGOToOrg);
        }
		
		if(ClusterGOToTextCollection.length > 0) {
          drawPolyLineClusterGO(ClusterGOToTextCollection);
        }
		
		if(ClusterGOToManCollection.length > 0) {
          drawPolyLineClusterGO(ClusterGOToManCollection);
        }		
		
		if(ClusterOMToOrg.length > 0) {
          drawPolyLineClusterOM(ClusterOMToOrg);
        }
		
		if(ClusterOMToMap.length > 0) {
          drawPolyLineClusterOM(ClusterOMToMap);
        }
		
		if(ClusterOMToTextCollection.length > 0) {
          drawPolyLineClusterOM(ClusterOMToTextCollection);
        }

		if(ClusterOMToManCollection.length > 0) {
          drawPolyLineClusterOM(ClusterOMToManCollection);
        }		
		
		if(ClusterChainToTextCollection.length > 0) {
          drawPolyLineClusterChain(ClusterChainToTextCollection);
        }
		
		if(ClusterChainToOrg.length > 0) {
          drawPolyLineClusterChain(ClusterChainToOrg);
        }
		
		if(ClusterChainToGraph.length > 0) {
          drawPolyLineClusterChain(ClusterChainToGraph);
        }
		
		if(ClusterChainToMap.length > 0) {
          drawPolyLineClusterChain(ClusterChainToMap);
        }
	
		if(ClusterChainToGM.length > 0) {
          drawPolyLineClusterChain(ClusterChainToGM);
        }
		
		if(ClusterChainToGO.length > 0) {
          drawPolyLineClusterChain(ClusterChainToGO);
        }
		
		if(ClusterChainToOM.length > 0) {
          drawPolyLineClusterChain(ClusterChainToOM);
        }
		
		if(ClusterChainToManCollection.length > 0) {
          drawPolyLineClusterChain(ClusterChainToManCollection);
        }		
		
		if(TextDocToManCollection.length > 0) {
          drawPolyLineTextDoc(TextDocToManCollection);
        }	

		if(ClusterGMCloneToGraph.length > 0){
			drawPolyLineClusterGM(ClusterGMCloneToGraph);
		}
      }

	var manualink = false, manualinksource=[],manualinkdest=[];

      let bubbleToTextCollection = [],bubbleToGraphCollection = [],bubbleToOrgCollection=[],bubbleToManCollection=[],bubbleToGMCollection=[],bubbleToOMCollection=[],
	  bubbleToChainCollection=[],connections1bchain=[],connections1bo=[],connections1bt=[],connections1bg=[],connections1bman=[], bubbleCollectiontemp = [],connections1bgm=[],connections1bom=[];
	  
	  indexlist = [18, 9, 24, 22, 12, 6, 14, 15, 27, 36, 46, 21, 11, 31, 3, 4, 45, 2, 35, 47, 17, 44, 1, 30, 16, 37, 8, 42, 29, 34, 19, 48, 33, 41, 43, 0, 38, 28, 7, 5, 23, 26, 40, 10, 13, 20, 32, 49, 39, 25,
				99, 97, 67, 89, 76, 55, 59, 79, 69, 90, 85, 54, 63, 75, 53, 96, 81, 86, 52, 80, 58, 60, 98, 95, 56, 72, 73, 91, 64, 51, 94, 57, 88, 92, 70, 71, 65, 66, 83, 68, 77, 62, 78, 50, 74, 82, 87, 61, 84, 93,
				131, 107, 128, 124, 143, 114, 140, 139, 130, 127, 126, 106, 148, 133, 121, 109, 120, 125, 138, 123, 132, 108, 146, 141, 112, 144, 102, 147, 115, 105, 100, 137, 110, 149, 111, 103, 117, 122, 145, 116, 129, 118, 136, 113, 101, 134, 142, 104, 135, 119]

	
	function increase_brightness(hex, percent){
		// strip the leading # if it's there
		hex = hex.replace(/^\s*#|\s*$/g, '');

		// convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`
		if(hex.length == 3){
			hex = hex.replace(/(.)/g, '$1$1');
		}

		var r = parseInt(hex.substr(0, 2), 16),
			g = parseInt(hex.substr(2, 2), 16),
			b = parseInt(hex.substr(4, 2), 16);

		return '#' +
		   ((0|(1<<8) + r + (256 - r) * percent / 100).toString(16)).substr(1) +
		   ((0|(1<<8) + g + (256 - g) * percent / 100).toString(16)).substr(1) +
		   ((0|(1<<8) + b + (256 ) * percent / 100).toString(16)).substr(1);
	}

	function onlyUnique(a) {
  return [...new Set(a)];
}
	  
	function mapClick() {																			// handle mouse click events of map view elements
        if(window.getSelection) {
			let selection = window.getSelection();

			let $event = event;
            let ele = $event.target;      
			let loc = event.target.getAttribute('data-location');
			let label = event.target.getAttribute('label');
			let locid = event.target.getAttribute('map-id');
			let onlyid = locid.substring(3);
			let clicked = event.target.getAttribute('clicked');
			var cloned = event.target.getAttribute('cloned');
			var nameid = locid.slice(3);
			
			
			let track = ["MapView",label,1,new Date(),"click"];
			tracker.push(track);

			let selectedesign = document.getElementById("dataselect").value;
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

	//		let x1Loc = parseFloat($('.bubblemap-box').css('left').split('px')[0]) + ele.getBBox().x + ele.getBBox().width+5;
    //        let y1Loc = parseFloat($('.bubblemap-box').css('top').split('px')[0]) + ele.getBBox().y + (ele.getBBox().height/2) + 40;
			
			let ids = []


			for(var val in documentData){
				if(documentData[val].location.includes(loc))
				{
					ids.push(documentData[val]);
				}
			}

          if(event.button === 2) {																	// right click event view to show related documents
			if(clicked=="true"){

            const rightCustomMenu = document.querySelector('.svg-custom-menu');
			if(manualink==false)
			{rightCustomMenu.innerHTML = `<li class="svg-menu-item-${locid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${locid} svg-menu-item">Submit as Answer</li><li class="svg-menu-item2-${locid} svg-menu-item">LineGuider</li><li class="svg-menu-item3-${locid} svg-menu-item3">Create/Delete V2</li>`}
			
			else
			{rightCustomMenu.innerHTML = `<li class="svg-menu-item-${locid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${locid} svg-menu-item">Link To This</li><li class="svg-menu-item2-${locid} svg-menu-item">LineGuider</li><li class="svg-menu-item3-${locid} svg-menu-item3">Create/Delete Clone V2</li>`}
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
			
			document.querySelector('.svg-menu-item3').style.display = 'none';
			document.querySelector('.svg-menu-item').style.display = 'none';
			
			
			document.querySelector(`.svg-menu-item-${locid}`).addEventListener('click', function(e) {
            document.querySelector('.svg-custom-menu').style.display = 'none';
			  
			  for(var i=0; i<ids.length;i++)
			  {

				scontent = ids[i].docText;
				sid = ids[i].docId;
				
				scontent = scontent.replace(loc, `<span class=highlighted-text>${loc}</span>`);

				if(loc=="Virginia")
				{
					let loc = "VA";
					scontent = scontent.replace(loc, `<span class=highlighted-text>${loc}</span>`);

				}																						//create the selected document view
              var note = `
              <div class="reldoc note the-node" id='`+ sid +`' style="z-index: 999;">
                <div class='close_note'>X</div>
                <h3>`+ sid +' '+loc +`&nbsp;
				<label class="switch">
				  <input type="checkbox" id="movefixm`+sid+`">
				  <span class="slider round"></span>																	
				</label></h3>
                <p style="cursor:text;">
                  `+ scontent +`
                </p>
              </div>
              `;
              $("#board").append(note);
              $(".note#" + sid).css('z-index',99).draggable({
                containment: "#board",
                grid: [5, 5],
                cancel: "p"
              });
			  
			$("#movefixm"+sid).on("change", function(e){
			if(document.getElementById("movefixm"+sid).checked){										//movefix for the selected view
				document.getElementById(sid).ondragstart = function() { return false; };
			}
			else{
				document.getElementById(sid).ondragstart = function() { return true; };
			};
		  })


              let x2Loc = parseFloat($('#' + sid).css('left').split('px')[0]) + $('#' + sid).find('.highlighted-text').position().left+5;
              let y2Loc = parseFloat($('#' + sid).css('top').split('px')[0]) + $('#' + sid).find('.highlighted-text').position().top + 40;

              bubbleToTextCollection.push({
                source : {																			//map to text view
                  id: "bubble-map",
				  ele:locid,
                  xOffset : x1Loc,
                  yOffset : y1Loc
                },
                target : {
                  id: "highlight-text",
				  ele:sid,
                  xOffset : x2Loc,
                  yOffset : y2Loc
                }
              });

              connections1bt.push({ source: ele, sourceid:locid, target: $('#' + sid), targetid:sid, boxElement: 'bubblemap-box' });
			  $('#' + sid).addClass('selectedmap');

              drawPolyLineMap(bubbleToTextCollection);

			  $('#' + sid).on('drag', function() {
                bubbleToTextCollection = [];
                connections1bt.forEach(conn => {
                 const ele = conn.source;
				 
				 let sid = conn.target[0].id;
				
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;
				
            //      let x1Loc = parseFloat($('.bubblemap-box').css('left').split('px')[0]) + ele.getBBox().x + ele.getBBox().width+5;
            //      let y1Loc = parseFloat($('.bubblemap-box').css('top').split('px')[0]) + ele.getBBox().y + (ele.getBBox().height/2) + 40;
                  let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
                  let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

                  bubbleToTextCollection.push({
                    source : {
                      id: "bubble-map",
					  ele:ele.getAttribute('map-id'),
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "highlight-text",
					  ele: sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
                })
				
                drawPolyLineMap(bubbleToTextCollection);
			  })}
			})
			
			
			document.querySelector(`.svg-menu-item1-${locid}`).addEventListener('click', function(e) {
            document.querySelector('.svg-custom-menu').style.display = 'none';
				
			let track = ["MapView",label,1,new Date(),"submit"];
			tracker.push(track);
			submitted.push(label);
			d3.select("#submitelements").text(onlyUnique(submitted));
			var study = 1;
			if(study == 0){
			if(manualink==false)
			{
				manualinksource.push(ele);
				manualink=true;
			}
			else
			{
				ele2 = manualinksource[0];

				if(ele==ele2)
				{
					console.log('Error')																	//bubble to manual view 
					
				}
				else
				{
				var domRect2 = ele2.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;			
				let sid = ele2.getAttribute('id');
				
				bubbleToManCollection.push({
                    source : {
                      id: "bubble-map",
					  ele: ele,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "manual",
					  ele: sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				connections1bman.push({source:ele,target:ele2,tarid:sid,boxElement:'bubblemap-box'});
				drawPolyLineMap(bubbleToManCollection);				
				
				manualink=false; manualinksource=[];
				}
			}
			
			}
			})
			

			document.querySelector(`.svg-menu-item2-${locid}`).addEventListener('click', function(e) {
           
		   document.querySelector('.svg-custom-menu').style.display = 'none';
			

			let boardg = d3.select('#line-canvas');
			cloned = ele.getAttribute('cloned');

			if (cloned == 'false'){
			
			
			boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
								.attr("class",'clones')
                                .style("fill", "white")
                                .style("stroke", "green")
                                .style("stroke-width", "2px")
								.style("position","fixed")
								.attr('trail',false)
								.attr('clicked',false)
								.on("mouseup",cloneclick)
								.on("click",clonelclick)
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));
			
			let selectedesign = document.getElementById("lineguider").value;
			//console.log(selectedesign);
			if(selectedesign == "design1"){

			boardg.append("circle")
                                .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'progcloneci'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "green")
                                .style("stroke-width", "1px")
								.attr('trail',false)
								.on("mouseup",cloneclick())
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));								

			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextci'+nameid;})
				.style("fill", "black")
				.text('0%');
			}
			else if(selectedesign == "design2"){
			boardg.append("rect")
                                .attr("width", 50)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclonere'+nameid;})
                                .style("fill", "grey")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
			boardg.append("rect")
                                .attr("width", 0)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclone2'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
								
			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc-38)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextre'+nameid;})
				.style("fill", "white")
				.text('0%');
			}
			
			ele.setAttribute('cloned','true');	
			}
			else
			{
				let el = document.getElementById('clone'+nameid);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
	//		while(trailel[0]) 
	//			trailel[0].remove();

			ele.setAttribute('cloned','false');	
			}
		  
		  var mpid,mgpid,scale=1;

		function dragged(d) {	

			var m = d3.mouse(this)
			var x = document.getElementsByClassName("link-newbg "+nameid);
			var z = document.getElementsByClassName("link-newbo "+nameid);
			var y = document.getElementsByClassName("link-newbom "+nameid);
			var w = document.getElementsByClassName("link-newbgm "+nameid);				
			var xx = document.getElementsByClassName("link-newbmog "+nameid);					


			highlightline(x);
			highlightline(z);
			highlightline(y);
			highlightline(w);
			highlightline(xx);
					
			try{var clp = closestPoint(x[0],m);	mgpid='m'; mpid=x[0].getAttribute('id').slice(3);}
			catch{var clp = closestPoint(z[0],m);	mgpid='g';mpid=z[0].getAttribute('id').slice(3)}
			
			for(var i=0;i<x.length;i++)
			{
			let clp2 = closestPoint(x[i],m);			
			let pid = x[i].getAttribute('id').slice(3);		
			
			tar = x[i].getAttribute('tar');
			
			var elelabel = document.getElementById('map'+nameid).getAttribute('label');
			console.log(elelabel);
			var tarlabel = document.getElementById(tar).getAttribute('data-name');

			if(!(document.getElementById("trail"+nameid+'m'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'m'+pid;})
								//.style('visibility',"hidden")
								.attr("class","trail"+nameid)
                                .style("fill", "purple")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
								.attr("label", elelabel+"---"+tarlabel)
								.on("mouseover", function(d){tooltip3.text(event.target.getAttribute('label'));return tooltip3.style("visibility", "visible");})
								.on("mousemove", function(){return tooltip3.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");})
								.on("mouseout", function(){return tooltip3.style("visibility", "hidden");})																		
			}
			else
			{
				let dist = parseInt(x[i].getTotalLength()*scale)
				//console.log(dist)
				let chp = x[i].getPointAtLength(dist);
				//console.log(chp);
				let el = document.getElementById('trail'+nameid+'m'+pid);
				el.style.opacity ="0.4";
				el.setAttribute('cx',chp['x']+6);
				el.setAttribute('cy',chp['y']+4);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid='m'
				}
			}

			for(var i=0;i<z.length;i++)
			{
			let clp2 = closestPoint(z[i],m);			
			let pid = z[i].getAttribute('id').slice(3);

			tar = z[i].getAttribute('tar');

			var elelabel = document.getElementById('map'+nameid).getAttribute('label');
			var tarlabel = document.getElementById(tar).getAttribute('orgname');			
			
			if(!(document.getElementById("trail"+nameid+'g'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'g'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "#0ca4ff")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
								.attr("label", elelabel+"---"+tarlabel)
								.on("mouseover", function(d){tooltip3.text(event.target.getAttribute('label'));return tooltip3.style("visibility", "visible");})
								.on("mousemove", function(){return tooltip3.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");})
								.on("mouseout", function(){return tooltip3.style("visibility", "hidden");})																
			}
			else
			{
				let dist = parseInt(z[i].getTotalLength()*scale)
				let chp = z[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'g'+pid);
				el.style.opacity ="0.4";

				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'g'
				}
			}
			
			for(var i=0;i<y.length;i++)
			{
			let clp2 = closestPoint(y[i],m);			
			let pid = y[i].getAttribute('id').slice(4);		
			
			var elelabel = document.getElementById('map'+nameid).getAttribute('label');
			var tarlabel = document.getElementById(tar).getAttribute('orgname');	
			
			if(!(document.getElementById("trail"+nameid+'n'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'n'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "green")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
								.attr("label", elelabel+"---"+tarlabel)
								.on("mouseover", function(d){tooltip3.text(event.target.getAttribute('label'));return tooltip3.style("visibility", "visible");})
								.on("mousemove", function(){return tooltip3.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");})
								.on("mouseout", function(){return tooltip3.style("visibility", "hidden");})																	
			}
			else
			{
				let dist = parseInt(y[i].getTotalLength()*scale)
				let chp = y[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'n'+pid);
								el.style.opacity ="0.4";

				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid='n'
				}
			}

			for(var i=0;i<w.length;i++)
			{
			let clp2 = closestPoint(w[i],m);			
			let pid = w[i].getAttribute('id').slice(4);
			
			
			if(!(document.getElementById("trail"+nameid+'l'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'l'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "black")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
								.attr("label", elelabel+"---"+tarlabel)
								.on("mouseover",trailclonehover)
								.on("mouseout",trailcloneout)																		
			}
			else
			{
				let dist = parseInt(w[i].getTotalLength()*scale)
				let chp = w[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'l'+pid);
				el.style.opacity ="0.4";
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'l'
				}
			}

			for(var i=0;i<xx.length;i++)
			{
			let clp2 = closestPoint(xx[i],m);			
			let pid = xx[i].getAttribute('id').slice(5);
			
			if(!(document.getElementById("trail"+nameid+'c'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'c'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "yellow")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
								.attr("label", elelabel+"---"+tarlabel)
								.on("mouseover",trailclonehover)
								.on("mouseout",trailcloneout)																		
			}
			else
			{
				let dist = parseInt(xx[i].getTotalLength()*scale)
				let chp = xx[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'c'+pid);
				el.style.opacity ="0.4";
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'c'
				}
			}
						
			d3.select("#clone"+nameid).attr("cx", clp[0]).attr("cy",clp[1]);
			try{document.getElementById("trail"+nameid+mgpid+mpid).style.opacity ="0.1";}//.outerHTML = "";}
			catch(e){console.log('k');}
			
		//	document.getElementById('clone'+nameid).setAttribute('cx',clp[0]);
		//	document.getElementById('clone'+nameid).setAttribute('cy',clp[1]);	
			let selectedesign = document.getElementById("lineguider").value;
		
			if(selectedesign == "design1"){
			//	document.getElementById('progcloneci'+nameid).addEventListener("mouseup",cloneclick())
			
			document.getElementById('progcloneci'+nameid).setAttribute('cx',clp[0]);
			document.getElementById('progcloneci'+nameid).setAttribute('cy',clp[1]);
			document.getElementById('progtextci'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextci'+nameid).setAttribute('y',clp[1]);				
			document.getElementById('progcloneci'+nameid).setAttribute('r',scale*25);
			document.getElementById('progtextci'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}
			else if(selectedesign == "design2")
			{
			document.getElementById('progclone2'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclone2'+nameid).setAttribute('y',clp[1]-45);				
			document.getElementById('progclonere'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclonere'+nameid).setAttribute('y',clp[1]-45);			
			document.getElementById('progtextre'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextre'+nameid).setAttribute('y',clp[1]-38);				
			document.getElementById('progclone2'+nameid).setAttribute('width',scale*50);
			document.getElementById('progtextre'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}

			
			if(mgpid=='m'){
				let path = document.getElementsByClassName("link-newbg "+nameid+' '+mpid)[0];
				try{let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
				var length = path.getTotalLength();			

			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);

				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}
			document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
			}
			catch(e){console.log('');}		
			}
			else{
			if(mgpid=='g'){
				let path = document.getElementsByClassName("link-newbo "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
			var length = path.getTotalLength();			
				
			if(selectedesign=="design3"){
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] > path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}			
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';

			}
			else{
			if(mgpid=='n'){
				let path = document.getElementsByClassName("link-newbom "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				var length = path.getTotalLength();			
				
			if(selectedesign=="design3"){
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}			
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';				
			}
			else{
			if(mgpid=='l'){
				let path = document.getElementsByClassName("link-newbgm "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
	var length = path.getTotalLength();			
				
			if(selectedesign=="design3"){
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}			
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';				
			}
			else{
			if(mgpid=='c'){
				let path = document.getElementsByClassName("link-newbmog "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
			var length = path.getTotalLength();			
				
			if(selectedesign=="design3"){
			$("[id^='progress"+nameid+"']").remove();
			
			for(var jk = 0;jk<dist;jk+=10)
			{
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}			
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';			}
			
		}}}}}
			
		//reDrawLines();	

		var duprecords = [];
		function createdup(path){
			
				if(duprecords.includes(path.getAttribute('id')))
					return;
				
				duprecords.push(path.getAttribute('id'));
				
				for(var ii=0;ii<path.getTotalLength();ii++)
				{
					
				boardg.append("circle")
                              .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", path.getPointAtLength(ii).x)
                                .attr("cy", path.getPointAtLength(ii).y)
								.attr("id",function(d,i){return 'dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2);})
								.attr("class","dupcirc")
                                .style("fill", "none")
                                .style("stroke", "none")
				
				}
				return 0;
			
		}
	
		function getDistance(x1, y1, x2, y2){
			let y = x2 - x1;
			let x = y2 - y1;
			
			return Math.sqrt(x * x + y * y);
		}
		
		function closestPoint(pathNode, point) {
			  var pathLength = pathNode.getTotalLength(),
				  precision = 8,
				  best,
				  bestLength,
				  bestDistance = Infinity;

			  // linear scan for coarse approximation
			  for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {
				if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {
				  best = scan, bestLength = scanLength, bestDistance = scanDistance;
				}
			  }

			  // binary search for precise estimate
			  precision /= 2;
			  while (precision > 0.5) {
				var before,
					after,
					beforeLength,
					afterLength,
					beforeDistance,
					afterDistance;
				if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {
				  best = before, bestLength = beforeLength, bestDistance = beforeDistance;
				} else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {
				  best = after, bestLength = afterLength, bestDistance = afterDistance;
				} else {
				  precision /= 2;
				}
			  }

			  best = [best.x, best.y];
			  best.distance = Math.sqrt(bestDistance);
			  return best;

			  function distance2(p) {
				var dx = p.x - point[0],
					dy = p.y - point[1];
				return dx * dx + dy * dy;
			  }}
	
		function dragended(d){
				
			var x = document.getElementsByClassName("link-newbg "+nameid);
			var z = document.getElementsByClassName("link-newbo "+nameid);
			var y = document.getElementsByClassName("link-newbgm "+nameid);
			var w = document.getElementsByClassName("link-newbom "+nameid);
			var xx = document.getElementsByClassName("link-newbmog "+nameid);
			
			unhighlightline(x);
			unhighlightline(z);
			unhighlightline(y);
			unhighlightline(w);			
			unhighlightline(xx);			
			
			let trailcirc = document.getElementsByClassName("trail"+nameid)
			for(var j=0;j<trailcirc.length;j++){
				//trailcirc[j].style.display='none';
			}
			
			
			
		}
	
		function dragstart(d){
		

		
		if(document.getElementsByClassName("trail"+nameid))
			{
				let trailcirc = document.getElementsByClassName("trail"+nameid)
				for(var j=0;j<trailcirc.length;j++){
					//trailcirc[j].style.display='block';
				}		
			}
		}
	
		function highlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'red';
				
			}			
		}
	
		function highlightone(x){
				let xid = String(x.getAttribute('id'));
				document.getElementById(xid).style.stroke = 'red';
		}
				
		function unhighlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'rgb(149, 199, 244)';
				
			}			
		}	
	
		function cloneclick(){
			
					if(event.button==2){
				
				const rightCustomMenu = document.querySelector('.svg-custom-menu');
		
				rightCustomMenu.innerHTML = `<li class="svg-menu-item-${nameid} svg-menu-item">Delete Clone</li>`
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
		
		document.querySelector(`.svg-menu-item-${nameid}`).addEventListener('click', function(e) {
			
	   document.querySelector('.svg-custom-menu').style.display = 'none';
	
				let el = document.getElementById('clone'+nameid);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
			let selectedesign = document.getElementById("lineguider").value;
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

			ele.setAttribute('cloned','false');	
		})
				
			}
				
		  
		}
		
		function clonelclick(){
			var dates = $('[id^="trail'+nameid+'"]');
			if(this.getAttribute('clicked')=="false"){	
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "hidden";
			this.setAttribute('clicked',"true");
			}}
			else{
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "visible";
			this.setAttribute('clicked',"false");}
			}
		}
	
		function trailclonehover(){
					
			let $event = event;
            let ele = $event.target;      
			let label = event.target.getAttribute('label');
			
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;
					
			clearTimeout(timeout);
			tooltip
			.style("left", x1Loc + "px")
            .style("top", y1Loc + "px")
            .style("display", "inline-block")
            .html(label);
			
		}
	
		function trailcloneout(){
					timeout = setTimeout(function(d){tooltip.style("display", "none");},1000)
		}
		
	})
	
	
			document.querySelector(`.svg-menu-item3-${locid}`).addEventListener('click', function(e) {
			
			document.querySelector('.svg-custom-menu').style.display = 'none';

			let boardg = d3.select('#line-canvas');

			if (cloned == 'false'){
			let targetCircle = boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "blue")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.call(d3.drag()
								.on("drag", draggedv));

								
			circele.setAttribute('cloned','true');	
			
			 
			let tcirc = document.getElementById('clone'+nameid);
			let x1Loct = parseFloat(tcirc.getAttribute("cx"));
			let y1Loct = parseFloat(tcirc.getAttribute("cy"));
			
			if(document.querySelector('.right .all-data-box').style.display == 'block')												///connect to graph
			{			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			domRect = tar.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect.y+5;
			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}


			if(document.querySelector('.right .bubblemap-box').style.display == 'block')											//connect to map
			{			
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			let tar = document.querySelector('[map-id="map' + loc + '"]');

			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;	

			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}			

				drawPolyLineClusterGM(ClusterGMCloneToGraph);


			
			function draggedv(d){				
				d3.select(this).attr("cx", d3.event.x).attr("cy", d3.event.y);
				reDrawLines();
			}
				
			}
			else
			{
				let el = document.getElementById('clone'+nameid);
				el.remove(); 
				ClusterGMCloneToGraph=[],connections4cgclone=[]
			document.querySelectorAll('.link-newcgmclone').forEach(ele => {
				  ele.remove();
			  });
			
				circele.setAttribute('cloned','false');	
			}
			
			})


		}
		else{
			const rightCustomMenu = document.querySelector('.svg-custom-menu');
			rightCustomMenu.innerHTML = `<li class="svg-menu-item-${locid} svg-menu-item">Submit as Answer</li>`
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
			
			document.querySelector(`.svg-menu-item-${locid}`).addEventListener('click', function(e) {
				
			let track = ["MapView",label,1,new Date(),"submit"];
			tracker.push(track);
			submitted.push(label);
			d3.select("#submitelements").text(onlyUnique(submitted));
			})
			
		}
		}
          else {																					// upon left clicking the nodes
			for (var i = bubbleToGraphCollection.length - 1; i >= 0; --i) {
			  if (bubbleToGraphCollection[i].source.ele == locid.slice(3)) {
				bubbleToGraphCollection.splice(i, 1); 
			  }}
			  
			for (var i = bubbleToOrgCollection.length - 1; i >= 0; --i) {
			  if (bubbleToOrgCollection[i].source.ele == locid.slice(3)) {
				bubbleToOrgCollection.splice(i, 1); 
			  }} 
			  
			for (var i = connections1bg.length - 1; i >= 0; --i) {
			  if (connections1bg[i].source == ele) {
				connections1bg.splice(i, 1); 
			  }}
			  
			for (var i = connections1bo.length - 1; i >= 0; --i) {
			  if (connections1bo[i].source == ele) {
				connections1bo.splice(i, 1); 
			  }}

			for (var i = bubbleToGMCollection.length - 1; i >= 0; --i) {
			  if (bubbleToGMCollection[i].source.ele == locid.slice(3)) {
				bubbleToGMCollection.splice(i, 1); 
			  }} 
			  
			for (var i = connections1bgm.length - 1; i >= 0; --i) {
			  if (connections1bgm[i].source == ele) {
				connections1bgm.splice(i, 1); 
			  }}

			for (var i = bubbleToOMCollection.length - 1; i >= 0; --i) {
			  if (bubbleToOMCollection[i].source.ele == locid.slice(3)) {
				bubbleToOMCollection.splice(i, 1); 
			  }} 
			  
			for (var i = connections1bom.length - 1; i >= 0; --i) {
			  if (connections1bom[i].source == ele) {
				connections1bom.splice(i, 1); 
			  }}		
			
			for (var i = bubbleToChainCollection.length - 1; i >= 0; --i) {
			  if (bubbleToChainCollection[i].source.ele == locid.slice(3)) {
				bubbleToChainCollection.splice(i, 1); 
			  }} 
			  
			for (var i = connections1bchain.length - 1; i >= 0; --i) {
			  if (connections1bchain[i].source == ele) {
				connections1bchain.splice(i, 1); 
			  }}				  
			  
			document.querySelectorAll('.link-newbg').forEach(ele => {
              if(ele.getAttribute('ele') == locid.slice(3)){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newbo').forEach(ele => {
              if(ele.getAttribute('ele') == locid.slice(3)){
				  ele.remove();
			  }});

			document.querySelectorAll('.link-newbgm').forEach(ele => {
              if(ele.getAttribute('ele') == locid.slice(3)){
				  ele.remove();
			  }});
			
			document.querySelectorAll('.link-newbom').forEach(ele => {
              if(ele.getAttribute('ele') == locid.slice(3)){
				  ele.remove();
			  }});
			
			document.querySelectorAll('.link-newbmog').forEach(ele => {
              if(ele.getAttribute('ele') == locid.slice(3)){
				  ele.remove();
			  }});
			  
			if(event.target.getAttribute('clickhist') > 0)
			   {
			d3.select(this).style("fill", "#006400");
			//d3.select(this).attr("r", function(d){ return 8; });	
			   }
			
			//console.log(document.querySelectorAll('.node'));
			
			if(clicked == "false"){
					
			if(document.querySelector('.right .all-data-box').style.display == 'block'){
				var gids  = mapcondata[onlyid]['mg'].split(',');
					
				for(var j=0;j<gids.length;j++)
				{
				let tar = document.querySelector('[personsid="' + gids[j] + '"]');
				if(selectedesign == "design"){
					//tar.setAttribute('style', "fill: #ff7f50")
					//tar.setAttribute('r', "15")
				}
					tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))+1);
				
				if(tar.getAttribute('clicked')=="false"){
					
					let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
					//console.log(bright);
					
					tar.setAttribute('style', "fill: "+bright);
					document.getElementById('pername'+gids[j]).setAttribute('fill','red');	
				}
							
				domRect = tar.getBoundingClientRect();
				let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect.y+5;

				bubbleToGraphCollection.push({
                    source : {
                      id: "bubble-map",
					  ele: locid.slice(3),
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "graph",
					  ele: tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				 
				connections1bg.push({source:ele,target:tar,boxElement:'bubblemap-box'});
				}
				
				if(!(document.getElementById("movefixgraph").checked))				
					$('.all-data-box').addClass('selectedmap');
				if(selectedesign != "design"){				  				
				drawPolyLineMap(bubbleToGraphCollection);}
			
			d3.select(this).style("fill", "#006400");
			//d3.select(this).style("stroke","black");
			hist = parseInt(event.target.getAttribute('clickhist'))+1
				event.target.setAttribute('clickhist', hist)
				event.target.setAttribute('clicked', true)
			}
					
			if(document.querySelector('.right .organize-data-box').style.display == 'block'){
				var gids  = mapcondata[onlyid]['mo'].split(',');

				for(var j=0;j<gids.length;j++)
				{
				try{
				let tar = document.querySelector('[barid="' + gids[j] + '"]');
				if(selectedesign == "design"){
				//tar.setAttribute('r', "15")
				}		
				tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))+1);					

				if(tar.getAttribute('clicked')=="false"){
					let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);
				document.getElementById('text'+gids[j]).setAttribute('fill','red');}
				
				domRect = tar.getBoundingClientRect();
				let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+125;
				let y2Loc = domRect.y+5;

				bubbleToOrgCollection.push({
                    source : {
                      id: "bubble-map",
					  ele: locid.slice(3),
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
					  ele: tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				  connections1bo.push({source:ele,target:tar,boxElement:'bubblemap-box'});

				d3.select(this).style("fill", "#006400");
				//d3.select(this).attr("r", function(d){ return 10 })
				}
				catch(error)
				{console.log('org miss');}
				}				
				hist = parseInt(event.target.getAttribute('clickhist'))+1
				event.target.setAttribute('clickhist', hist)
				event.target.setAttribute('clicked', true)
				if(!(document.getElementById("movefixorg").checked))								
					$('.organize-data-box').addClass('selectedmap');
				if(selectedesign != "design"){				  								
				drawPolyLineMap(bubbleToOrgCollection);}
			}
			
			if(document.querySelector('.right .clusterGM-data-box').style.display == 'block'){				//connecting the cluster views
				
				var gm = document.getElementsByClassName("dotgm");
				for(var i=0;i<gm.length;i++)
				{
					if(gm[i].getAttribute('map').split(',').includes(locid.slice(3)))
					{
					
					var nameid = gm[i].getAttribute('clustergmid');
					var circele = document.getElementById("cgmcircid"+nameid);
					let detail = circele.getAttribute('detailed');					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgmmid"+nameid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);

					}

					bubbleToGMCollection.push({
						source : {
						  id: "bubble-map",
						  ele: locid.slice(3),
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterGM",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					connections1bgm.push({source:ele,target:circele,boxElement:'bubblemap-box'});

					d3.select(this).style("fill", "#006400");
					//d3.select(this).attr("r", function(d){ return 10 })
					hist = parseInt(event.target.getAttribute('clickhist'))+1
					event.target.setAttribute('clickhist', hist)
					event.target.setAttribute('clicked', true)
					if(!(document.getElementById("movefixGM").checked))									
						$('.clusterGM-data-box').addClass('selectedmap');
				if(selectedesign != "design"){				  									
				drawPolyLineMap(bubbleToGMCollection);					}
				  }
				}
			}
			
			if(document.querySelector('.right .clusterOM-data-box').style.display == 'block'){			
				var om = document.getElementsByClassName("dotom");
				for(var i=0;i<om.length;i++)
				{
					if(om[i].getAttribute('map').split(',').includes(locid.slice(3)))
					{
					
					var nameid = om[i].getAttribute('clusteromid');
					var circele = document.getElementById("comcircid"+nameid);
					let detail = circele.getAttribute('detailed');					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("commid"+nameid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);

					}

					bubbleToOMCollection.push({
						source : {
						  id: "bubble-map",
						  ele: locid.slice(3),
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterOM",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					connections1bom.push({source:ele,target:circele,boxElement:'bubblemap-box'});

					d3.select(this).style("fill", "#006400");
					//d3.select(this).attr("r", function(d){ return 8 })
					hist = parseInt(event.target.getAttribute('clickhist'))+1
					event.target.setAttribute('clickhist', hist)
					event.target.setAttribute('clicked', true)
					if(!(document.getElementById("movefixOM").checked))									
						$('.clusterOM-data-box').addClass('selectedmap');		
									if(selectedesign != "design"){				  				
									drawPolyLineMap(bubbleToOMCollection);					}
				  }
				}
			}
			
			if(document.querySelector('.right .clusterchain-data-box').style.display == 'block'){			//cluster chain connection
				var chain = document.getElementsByClassName("dotchain");
				for(var i=0;i<chain.length;i++)
				{
				if(chain[i].getAttribute('map').split(',').includes(locid.slice(3)))
				{
				var nameid = chain[i].getAttribute('clusterchainid');	
				var circele = document.getElementById("cchaincircid"+nameid);
				var detail = circele.getAttribute('detailed');
				
				if(detail=="false")
				{
					let domRect = circele.getBoundingClientRect();
					let radius = parseInt(circele.getAttribute('r'));
					var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
					var y2Loc = domRect.y+parseInt(radius/3);
				}
				else
				{	
					let eleme2 = document.getElementById("cchainmid"+nameid);
					let domRect2 = eleme2.getBoundingClientRect();
					let height2 = eleme2.getAttribute('height');
					let width2 = eleme2.getAttribute('width');
					var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
					var y2Locm = domRect2.y+parseInt(height2/7);
					
					var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
					var y2Loc = domRect2.y+parseInt(height2/7);
				}

					bubbleToChainCollection.push({
						source : {
						  id: "bubble-map",
						  ele: locid.slice(3),
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterchain",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					connections1bchain.push({source:ele,target:circele,boxElement:'bubblemap-box'});

					d3.select(this).style("fill", "#006400");
					//d3.select(this).attr("r", function(d){ return 8 })
					hist = parseInt(event.target.getAttribute('clickhist'))+1
					event.target.setAttribute('clickhist', hist)
					event.target.setAttribute('clicked', true)
					if(!(document.getElementById("movefixCBI").checked))									
						$('.clusterchain-data-box').addClass('selectedmap');	
				if(selectedesign != "design"){				  									
				drawPolyLineMap(bubbleToChainCollection);				}		  
				  }
				}
			}				
					
			}
			else{
				
				
				var gids  = mapcondata[onlyid]['mg'].split(',');
					
				for(var j=0;j<gids.length;j++)
				{
				let tar = document.querySelector('[personsid="' + gids[j] + '"]');
				tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))-1);
				}
				
				var gids  = mapcondata[onlyid]['mo'].split(',');
					
				for(var j=0;j<gids.length;j++)
				{
				let tar = document.querySelector('[barid="' + gids[j] + '"]');
					tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))-1);
				}
				
				d3.select(this).style("stroke","none");
				if(bubbleToGraphCollection.length==0)
					$('.organize-data-box').removeClass('selectedmap')
				if(bubbleToOrgCollection.length==0)					
					$('.all-data-box').removeClass('selectedmap')
				if(bubbleToGMCollection.length==0)
					$('.clusterGM-data-box').removeClass('selectedmap')								
				if(bubbleToOMCollection.length==0)															//adding selected views if any links are present
					$('.clusterOM-data-box').removeClass('selectedmap')
				if(bubbleToChainCollection.length==0)					
					$('.clusterchain-data-box').removeClass('selectedmap')	
					
				if(cloned=="true"){
				let el = document.getElementById('clone'+nameid);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
			let selectedesign = document.getElementById("lineguider").value;
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

			ele.setAttribute('cloned','false');		
				}
				let found = 0;
					if(GraphToMapCollection.length != 0){
						for(var jk = 0 ;jk<GraphToMapCollection.length;jk++){
						if(onlyid == GraphToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToMapCollection.length != 0){
						for(var jk = 0 ;jk<OrgToMapCollection.length;jk++){
						if(onlyid == OrgToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToMap.length != 0){
						for(var jk = 0 ;jk<ClusterChainToMap.length;jk++){
						if(onlyid == ClusterChainToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterGMToMap.length;jk++){
						if(onlyid == ClusterGMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterOMToMap.length;jk++){
						if(onlyid == ClusterOMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}							
					if(found==1){
						d3.select(this).style("fill", "#ff7f50");
					}					
				event.target.setAttribute('clicked', false)
			}}
          }
		 
				
				var abc1 = $('[id^="dupcirc"]');
		for(let iii = 0;iii<abc1.length;iii++){
				abc1[iii].parentNode.appendChild(abc1[iii]);
		}

				var abc2 = $('[id^="clone"]');
		for(let iii = 0;iii<abc2.length;iii++){
				abc2[iii].parentNode.appendChild(abc2[iii]);
		}

				var abc4 = $('[id^="progcloneci"]');
		for(let iii = 0;iii<abc4.length;iii++){
				abc4[iii].parentNode.appendChild(abc4[iii]);
		}		
				var abc3 = $('[id^="progtextci"]');
		for(let iii = 0;iii<abc3.length;iii++){
				abc3[iii].parentNode.appendChild(abc3[iii]);
		}
				var abc5 = $('[id^="progress"]');
		for(let iii = 0;iii<abc5.length;iii++){
				abc5[iii].parentNode.appendChild(abc5[iii]);
		}	

}

	function maphover(){																			//handle mouse hover events of map view elements
			let $event = event;
            let ele = $event.target;      
 			let locid = event.target.getAttribute('map-id');
			let onlyid = locid.substring(3);
			let loc = event.target.getAttribute('data-location');
			let label = event.target.getAttribute('label');
			let clicked = event.target.getAttribute('clicked');
			let selectedesign = document.getElementById("lineguider").value;
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;
			
			startimem = new Date();
			
			//let x1Loc = parseFloat($('.bubblemap-box').css('left').split('px')[0]) + ele.getBBox().x + ele.getBBox().width+5;
            //let y1Loc = parseFloat($('.bubblemap-box').css('top').split('px')[0]) + ele.getBBox().y + (ele.getBBox().height/2) + 40;
			
			clearTimeout(timeout);
			tooltip
			.style("left", x1Loc + "px")
            .style("top", y1Loc + "px")
            .style("display", "inline-block")
            .html(label);
			
			let ids = [];
																	
			//if(clicked != "true"){
				
			for(var val in documentData){
				if(documentData[val].location.includes(loc))
				{
					ids.push(documentData[val]);
				}
			}
			
			if(clicked != "true"){
				if(d3.select(this).style("fill") != "rgb(255, 60, 0)"){
			d3.select(this).style("fill", "#485D5E");
			}}			
			
			if(document.querySelector('.right .all-data-box').style.display == 'block'){				//hover event for elements related to graph 
				var gids  = mapcondata[onlyid]['mg'].split(',');
				for(var j=0;j<gids.length;j++)
				{
				let tar = document.querySelector('[personsid="' + gids[j] + '"]');
				if(selectedesign == "design"){
				//tar.setAttribute('r', "15")
				}
				if(tar.getAttribute('clicked')=="false"){
				let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);
				document.getElementById('pername'+gids[j]).setAttribute('fill','red');}

				domRect = tar.getBoundingClientRect();
				let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect.y+5;

				bubbleCollectiontemp.push({
                    source : {
                      id: "bubble-map",
					  ele: locid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "graph",
					  ele: tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				 
				  //d3.select(this).attr("r", function(d){ return 8 })
				  
				if(selectedesign != "design"){				  
				drawPolyLineMapTemp(bubbleCollectiontemp);}
				}
				}
			
			if(document.querySelector('.right .organize-data-box').style.display == 'block'){
				var gids  = mapcondata[onlyid]['mo'].split(',');
				for(var j=0;j<gids.length;j++)
				{
				try{
				let tar = document.querySelector('[barid="' + gids[j] + '"]');
				if(selectedesign == "design"){
			//	tar.setAttribute('style', "fill: #ff7f50")
				}			
				if(tar.getAttribute('clicked')=="false"){
				let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);
				document.getElementById('text'+gids[j]).setAttribute('fill','red');	}			
				

				domRect = tar.getBoundingClientRect();
				let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+125;
				let y2Loc = domRect.y+5;

				bubbleCollectiontemp.push({
                    source : {
                      id: "bubble-map",
					  ele: locid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
					  ele: tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });

				  if(d3.select(this).style("fill")=="rgb(173, 158, 227)"){}
				if(selectedesign != "design"){
				drawPolyLineMapTemp(bubbleCollectiontemp);}
				}
				catch(error)
				{console.log('org miss');}
				}
			}
			
			if(document.querySelector('.right .clusterGM-data-box').style.display == 'block'){			//hover event for elements related to cluster gm
				var gm = document.getElementsByClassName("dotgm");
				for(var i=0;i<gm.length;i++)
				{
					if(gm[i].getAttribute('map').split(',').includes(locid.slice(3)))
					{
					
					var nameid = gm[i].getAttribute('clustergmid');
					var circele = document.getElementById("cgmcircid"+nameid);
					let detail = circele.getAttribute('detailed');				
					
				if(selectedesign == "design"){
					circele.setAttribute('style', "fill: #ff7f50")
				}		
				if(circele.getAttribute('clicked')=="false"){
				circele.setAttribute('style', "fill: #ff7f50")}				
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgmmid"+nameid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);

					}

					bubbleCollectiontemp.push({
						source : {
						  id: "bubble-map",
						  ele: locid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterGM",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					  if(selectedesign != "design"){
					  drawPolyLineMapTemp(bubbleCollectiontemp);	}				
				  }
				}
			}
			
			if(document.querySelector('.right .clusterOM-data-box').style.display == 'block'){			
				var om = document.getElementsByClassName("dotom");
				for(var i=0;i<om.length;i++)
				{
					if(om[i].getAttribute('map').split(',').includes(locid.slice(3)))
					{
					
					var nameid = om[i].getAttribute('clusteromid');
					var circele = document.getElementById("comcircid"+nameid);
					let detail = circele.getAttribute('detailed');			
				if(selectedesign == "design"){
				circele.setAttribute('style', "fill: #ff7f50")
				}					
				if(circele.getAttribute('clicked')=="false"){
				circele.setAttribute('style', "fill: #ff7f50")}
				
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("commid"+nameid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);

					}

					bubbleCollectiontemp.push({
						source : {
						  id: "bubble-map",
						  ele: locid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterOM",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
				if(selectedesign != "design"){					  
				drawPolyLineMapTemp(bubbleCollectiontemp);		}			
				  }
				}
			}
	
			if(document.querySelector('.right .clusterchain-data-box').style.display == 'block'){			//hover event for elements related to cluster chain
				var chain = document.getElementsByClassName("dotchain");
				for(var i=0;i<chain.length;i++)
				{
				if(chain[i].getAttribute('map').split(',').includes(locid.slice(3)))
				{
				var nameid = chain[i].getAttribute('clusterchainid');	
				var circele = document.getElementById("cchaincircid"+nameid);
				var detail = circele.getAttribute('detailed');

				if(selectedesign == "design"){
				circele.setAttribute('style', "fill: #ff7f50")
				}		
				if(circele.getAttribute('clicked')=="false"){
				circele.setAttribute('style', "fill: #ff7f50")}
				
				if(detail=="false")
				{
					let domRect = circele.getBoundingClientRect();
					let radius = parseInt(circele.getAttribute('r'));
					var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
					var y2Loc = domRect.y+parseInt(radius/3);
				}
				else
				{	
					let eleme2 = document.getElementById("cchainmid"+nameid);
					let domRect2 = eleme2.getBoundingClientRect();
					let height2 = eleme2.getAttribute('height');
					let width2 = eleme2.getAttribute('width');
					var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
					var y2Locm = domRect2.y+parseInt(height2/7);
					
					var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
					var y2Loc = domRect2.y+parseInt(height2/7);
				}

					bubbleCollectiontemp.push({
						source : {
						  id: "bubble-map",
						  ele: locid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterchain",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });

				if(selectedesign != "design"){					  
				drawPolyLineMapTemp(bubbleCollectiontemp);}
				  }
				}
			}			
			//}
	}
	
	function maphoverout(event){
			
		let $event = event;
        let ele = $event.target;      
 		let locid = event.target.getAttribute('map-id');
		let onlyid = locid.substring(3);
		let clicked = event.target.getAttribute('clicked');
		let loc = event.target.getAttribute('data-location');
		let label = event.target.getAttribute('label');
		
		let track = ["MapView",label,startimem,new Date(),"hover"];
		tracker.push(track);

			randorg = document.querySelectorAll('.bar');
			selectorg = [];
				
			if(clicked == "false"){
			if(document.querySelector('.right .all-data-box').style.display == 'block')					//hover event for elements related to graph 
			{	
				var gids  = mapcondata[onlyid]['mg'].split(',');
				for(var j=0;j<gids.length;j++){			
					let found = 0;
					if(bubbleToGraphCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToGraphCollection.length;jk++){
						if(gids[j] == bubbleToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToGraphCollection.length != 0){
						for(var jk = 0 ;jk<OrgToGraphCollection.length;jk++){
						if(gids[j] == OrgToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGraph.length;jk++){
						if(gids[j] == ClusterChainToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGMToGraph.length;jk++){
						if(gids[j] == ClusterGMToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGOToGraph.length;jk++){
						if(gids[j] == ClusterGOToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
							
					if(found==0){
					let tar = document.querySelector('[personsid="' + gids[j] + '"]');
					if(tar.getAttribute('clicked')=="true"){
						tar.setAttribute('style', "fill: #006400")
						document.getElementById('pername'+gids[j]).setAttribute('fill','green');}
					else{					
					tar.setAttribute('style', "fill: #6495ed")

					document.getElementById('pername'+gids[j]).setAttribute('fill','black');
					}}}}

			if(document.querySelector('.right .organize-data-box').style.display == 'block')
			{
				var gids  = mapcondata[onlyid]['mo'].split(',');
				for(var j=0;j<gids.length;j++)
				{
					let found = 0;
					if(bubbleToOrgCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToOrgCollection.length;jk++){
						if(gids[j] == bubbleToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(GraphToOrgCollection.length != 0){
						for(var jk = 0 ;jk<GraphToOrgCollection.length;jk++){
						if(gids[j] == GraphToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterChainToOrg.length;jk++){
						if(gids[j] == ClusterChainToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterGOToOrg.length;jk++){
						if(gids[j] == ClusterGOToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterOMToOrg.length;jk++){
						if(gids[j] == ClusterOMToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(found==0){
				let tar = document.querySelector('[barid="' + gids[j] + '"]');
					if(tar.getAttribute('clicked')=="true"){
						tar.setAttribute('style', "fill: #006400");
				 document.getElementById('text'+gids[j]).setAttribute('fill','green');				
						
						}
					else{					
					tar.setAttribute('style', "fill: #6495ed")
				 document.getElementById('text'+gids[j]).setAttribute('fill','black');				

				tar.setAttribute("stroke","#000000");
					tar.setAttribute("stroke-width","0.3");}
			}}}


							
			
				var gm = document.getElementsByClassName("dotgm");
				for(var i=0;i<gm.length;i++)
				{
					if(gm[i].getAttribute('map').split(',').includes(locid.slice(3)))
					{
					var nameid = gm[i].getAttribute('clustergmid');
					let found = 0;
					if(bubbleToGMCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToGMCollection.length;jk++){
						if(nameid == bubbleToGMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(GraphToGMCollection.length != 0){
						for(var jk = 0 ;jk<GraphToGMCollection.length;jk++){
						if(nameid == GraphToGMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToGM.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGM.length;jk++){
						if(nameid == ClusterChainToGM[jk].target.ele.id.slice(9)){
							found=1;}}}						
					if(found==0){					
					var circele = document.getElementById("cgmcircid"+nameid);
					if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
					else{					
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");}}

					}
				}
				var om = document.getElementsByClassName("dotom");
				for(var i=0;i<om.length;i++)
				{
					if(om[i].getAttribute('map').split(',').includes(locid.slice(3)))
					{
					var nameid = om[i].getAttribute('clusteromid');
					let found = 0;
					if(bubbleToOMCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToOMCollection.length;jk++){
						if(nameid == bubbleToOMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(OrgToOMCollection.length != 0){
						for(var jk = 0 ;jk<OrgToOMCollection.length;jk++){
						if(nameid == OrgToOMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToOM.length != 0){
						for(var jk = 0 ;jk<ClusterChainToOM.length;jk++){
						if(nameid == ClusterChainToOM[jk].target.ele.id.slice(9)){
							found=1;}}}									
					if(found==0){						
					var circele = document.getElementById("comcircid"+nameid);	
					if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
					else{					
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");}}
				}}

				var chain = document.getElementsByClassName("dotchain");
				for(var i=0;i<chain.length;i++)
				{
				if(chain[i].getAttribute('map').split(',').includes(locid.slice(3)))
				{
				var nameid = chain[i].getAttribute('clusterchainid');	
					let found = 0;
					if(bubbleToChainCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToChainCollection.length;jk++){
						if(nameid == bubbleToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}
					if(GraphToChainCollection.length != 0){
						for(var jk = 0 ;jk<GraphToChainCollection.length;jk++){
						if(nameid == GraphToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}
					if(OrgToChainCollection.length != 0){
						for(var jk = 0 ;jk<OrgToChainCollection.length;jk++){
						if(nameid == OrgToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}			
					if(found==0){								
				var circele = document.getElementById("cchaincircid"+nameid);
					if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
					else{					
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");}
				}}
				}
			
			}
}
	
	function mapout() { 																			// handle mouse out events of map view elements
		bubbleCollectiontemp = [];
		let clicked = event.target.getAttribute('clicked');
		timeout = setTimeout(function(d) {
			tooltip.style("display", "none");
		}, 1000)
		
		if (clicked == "false") {
		if ((d3.select(this).attr("selecthist") > 0)) {
				let bright = increase_brightness('#ff7f50',- parseInt(d3.select(this).attr('selecthist') * 10));
				d3.select(this).attr('style', "fill: " + bright);
		}
		else {
			d3.select(this).attr('style', "fill: #6495ed");
		}}


		document.querySelectorAll('.link-newbtemp').forEach(ele => {
			ele.remove();
		});

		let selectedesign = document.getElementById("lineguider").value;
		maphoverout(event);

		if (selectedesign == "design") {
			if (event.target.getAttribute('clicked') == "false") {}
		}
	}

	function drawPolyLineMap(collection) {														// draw lines for map elements
        
		if(collection == bubbleToTextCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newbt')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newbt')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		
		else if (collection == bubbleToGraphCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newbg')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newbg')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newbg'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lbg'+i})		  		  		  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele.id;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		
		else if (collection == bubbleToOrgCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newbo')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newbo')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newbo'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lbo'+i})			  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele.id;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		else if (collection == bubbleToManCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newbman')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newbman')
              .merge(linkUpdate)																				//lines for each view connected from map view
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele})
          .style('stroke', '#FF7F50')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}	
		else if (collection == bubbleToGMCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newbgm')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newbgm')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newbgm'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lbgm'+i})			  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}	
		else if (collection == bubbleToOMCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newbom')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newbom')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newbom'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lbom'+i})			  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}		
		else if (collection == bubbleToChainCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newbmog')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newbmog')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newbmog'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lbmog'+i})		  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		
      }

	function drawPolyLineMapTemp(collection) {														//temp lines for hovering map elements
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newbtemp')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newbtemp')
              .merge(linkUpdate)
          .attr('d',lineFunc)
          .style('stroke', '#000000')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}

	function drawPolyLineGraph(collection) {													// graph elements draw lines
        
		if(collection == GraphToMapCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newgm')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newgm')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newgm'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lgm'+i})				  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele.id;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		
		else if (collection == GraphToTextCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newgt')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newgt')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		
		else if (collection == GraphToOrgCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newgo')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newgo')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newgo'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lgo'+i})				  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele.id;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		else if (collection == GraphToManCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newgman')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newgman')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})											//Lines connected from graph view to other views
          .style('stroke', '#FF7F50')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		
		else if (collection == GraphToGMCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newggm')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newggm')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newggm'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lggm'+i})			  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		
		else if (collection == GraphToGOCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newggo')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newggo')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newggo'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lggo'+i})			  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}	
		else if (collection == GraphToChainCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newggom')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newggom')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newggom'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lggom'+i})			  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}		
      }
	 
	function drawPolyLineGraphTemp(collection) {													//temp lines for hovering graph elements
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newgtemp')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newgtemp')
              .merge(linkUpdate)
          .attr('d',lineFunc)
          .style('stroke', '#000000')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
	 
    function drawPolyLineClusterGM(collection, customClass = 'custom-gm') {						//Cluster view drawing lines
		if(collection == ClusterGMToGraph)
		{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcgmg')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcgmg')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newcgmg'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lcgmg'+i})		  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	  if(collection == ClusterGMToMap)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcgmm')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newcgmm'+' '+collection[i].source.ele+' '+i;})
		  .attr('id',function(d,i){return 'lcgmm'+i})
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	 if(collection == ClusterGMToTextCollection)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcgmt')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcgmt')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	if(collection == ClusterGMTempCollection)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcgmtemp')								//links from cluster gm to other views
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcgmtemp')
              .merge(linkUpdate)
          .attr('d',lineFunc)
          .style('stroke', '#000000')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	  else if (collection == ClusterGMToManCollection)
	{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcgmman')
          .data(collection)
		  
          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcgmman')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#FF7F50')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
	}
	else if (collection == ClusterGMCloneToGraph)
	{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcgmclone')
          .data(collection)
		  
          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcgmclone')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#71323d')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
	}
	  }
	  
	function drawPolyLineClusterGO(collection, customClass = 'custom-go') {
		if(collection == ClusterGOToGraph)
		{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcgog')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcgog')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newcgog'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lcgog'+i})			  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	  if(collection == ClusterGOToOrg)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcgoo')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcgoo')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newcgoo'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lcgoo'+i})		  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	 if(collection == ClusterGOToTextCollection)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcgot')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcgot')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	if(collection == ClusterGOTempCollection)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcgotemp') 									//links from clusterGO to other views
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcgotemp')
              .merge(linkUpdate)
          .attr('d',lineFunc)
          .style('stroke', '#000000')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	  else if (collection == ClusterGOToManCollection)
	{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcgoman')
          .data(collection)
		  
          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcgoman')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#FF7F50')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
	}	  
	  
	  }
	  
	function drawPolyLineClusterOM(collection, customClass = 'custom-om') {
		if(collection == ClusterOMToMap)
		{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcomm')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcomm')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newcomm'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lcomm'+i})				  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	  if(collection == ClusterOMToOrg)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcomo')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcomo')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newcomo'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lcomo'+i})			  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	 if(collection == ClusterOMToTextCollection)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcomt')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcomt')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	if(collection == ClusterOMTempCollection)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcomtemp')										//links from cluster OM to view
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcomtemp')
              .merge(linkUpdate)
          .attr('d',lineFunc)
          .style('stroke', '#000000')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	  else if (collection == ClusterOMToManCollection)
	{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcomman')
          .data(collection)
		  
          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcomman')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#FF7F50')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
	}	  
	  
	  }

	function drawPolyLineClusterChain(collection, customClass = 'custom-cbi') {

	 if(collection == ClusterChainToTextCollection)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcbit')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcbit')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }

	if(collection == ClusterChainTempCollection)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcbitemp')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcbitemp')
              .merge(linkUpdate)
          .attr('d',lineFunc)
          .style('stroke', '#000000')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	  		if(collection == ClusterChainToMap)
		{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcbim')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcbim')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newcbim'+' '+collection[i].source.ele+' '+i;})
		  .attr('id',function(d,i){return 'lccm'+i})		  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	  if(collection == ClusterChainToOrg)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcco')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcco')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newcco'+' '+collection[i].source.ele+' '+i;})
		  .attr('id',function(d,i){return 'lcco'+i})		  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	 if(collection == ClusterChainToGraph)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newccg')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newccg')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newccg'+' '+collection[i].source.ele+' '+i;})
		  .attr('id',function(d,i){return 'lccg'+i})		  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	  	if(collection == ClusterChainToGM)
		{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newccgm')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newccgm')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newccgm'+' '+collection[i].source.ele+' '+i;})
		  .attr('id',function(d,i){return 'lccgm'+i})		  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	  if(collection == ClusterChainToGO)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newccgo')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newccgo')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newccgo'+' '+collection[i].source.ele+' '+i;})
		  .attr('id',function(d,i){return 'lccgo'+i})		  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	 if(collection == ClusterChainToOM)
	{
        const linkUpdate = d3.select('#line-canvas').selectAll('.link-newccom')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newccom')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newccom'+' '+collection[i].source.ele+' '+i;})
		  .attr('id',function(d,i){return 'lccom'+i})		  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
      }
	  if (collection == ClusterChainToManCollection)
	{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcbiman')
          .data(collection)
		  
          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcbiman')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#FF7F50')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
	}	  
	  }

    function drawPolyLineOrg(collection) {														//// lines for organization elements
        
		if(collection == OrgToTextCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newot')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newot')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		
		else if (collection == OrgToGraphCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newog')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newog')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newog'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'log'+i})				  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele.id;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		
		else if (collection == OrgToMapCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newom')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newom')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newom'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'lom'+i})				  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele.id;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		else if (collection == OrgToManCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newoman')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newoman')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#FF7F50')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		if(collection == OrgToGOCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newoog')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newoog')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newoog'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'loog'+i})				  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		
		else if (collection == OrgToOMCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newoom')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newoom')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newoom'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'loom'+i})				  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
		
		else if (collection == OrgToChainCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newoogm')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newoogm')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('class',function(d,i){return 'link-newoogm'+' '+collection[i].source.ele+' '+i;})	
		  .attr('id',function(d,i){return 'loogm'+i})				  
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#95c7f4')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}		
      }
	  
	function drawPolyLineOrgTemp(collection) { 												//temp lines for hovering org elements
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newotemp')
          .data(collection)
          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newotemp')
              .merge(linkUpdate)
          .attr('d',lineFunc)
          .style('stroke', '#000000')
          //.style('stroke-dasharray', '3,1.5')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}
	
	function drawPolyLineTextDoc(collection){												// lines for documentsselected elements
		if (collection == TextDocToManCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newtdman')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newtdman')
              .merge(linkUpdate)
          .attr('d',lineFunc)
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', '#FF7F50')
          .style('stroke-width', 2)
          .style('fill', 'none').raise();
		}			
		}

	function drawPolyLineClones(collection){												// lines for documentsselected elements
		if (collection == ClonesLineCollection)
		{
		const linkUpdate = d3.select('#line-canvas').selectAll('.link-newcloneprog')
          .data(collection)

          linkUpdate.enter()
          .append('path')
              .attr('class', 'link-newcloneprog')
              .merge(linkUpdate)
          .attr('d',lineFunc2)
		  .attr('id','cloneprog')
		  .attr('ele',function(d,i){return collection[i].source.ele;})
		  .attr('tar',function(d,i){return collection[i].target.ele;})
          .style('stroke', 'green')
          .style('stroke-width', 5)
          .style('fill', 'none').raise();
		}			
		}
	
	function processMatrix() {																//function for drawing the graph view
        var colors = d3.scaleOrdinal(d3.schemeCategory10);

        var svg = d3.select(".all-data svg"),
          width = svg.attr("width"),
          height = svg.attr("height"),
          node,
          link;

if(nopoints==150){
svg.attr("viewBox","-270 160 2300 1500");}

//el = document.querySelector("#graphbox > p")
//el.setAttribute("style","width:900px;height:1000px;");

        //d3.select("body")
         // .append("div")
         // .attr("id", "tooltip")
         // .attr("style", "position: absolute; opacity: 0;");

        var simulation = d3
          .forceSimulation()
          .force(
            "link",
            d3
              .forceLink()
              .id(function (d) {
                return d.id;
              })
              .distance(200)
              .strength(0)
          )
          .force("charge", d3.forceManyBody())
          .force("center", d3.forceCenter(width / 3, height / 2));
		//var nopoints = document.getElementById('nodata').value;
		
		
        d3.json("/graph-data/json50_"+dataselid+".json", function (error, graph) {
          if (error) throw error;
          
          graph.nodes.forEach(node => {
            personsCollection.push(node.name);
          });
			
          const nodesValue = graph.nodes.map((x) => x.name);
          const nameLinks = graph.links.map((x) => {
            return {
              source: nodesValue[x.source - 1],
              target: nodesValue[x.target - 1],
              type: x.type,
            };
          });

          const totalSource = Array.from(new Set(nameLinks.map((x) => x.source)));
          var totalTarget = Array.from(new Set(nameLinks.map((x) => x.target)));
		  totalTarget = totalTarget.filter(x => x !== undefined);
          const uniqArray = Array.from(new Set(totalSource.concat(totalTarget)));
          document.documentElement.style.setProperty(
            "--totalcolsRows",
            `repeat(${uniqArray.length}, minmax(3rem, 1fr))`
          );

          let html = "<div id='mat'>";
          for (let i = 0; i < uniqArray.length; i++) {
            html += `<div>`;
            for (let j = 0; j < uniqArray.length; j++) {
              html += `<div id='id_${uniqArray[i]
                .toString()
                .replace(/ /g, "")}${uniqArray[j]
                .toString()
                .replace(/ /g, "")}'>0</div>`;
            }
            html += `</div>`;
          }
          html += "</div>";

          document.querySelector("#matrix").innerHTML = html;

          let top_heading = ``;
          uniqArray.map((x) => (top_heading += `<div>${x}</div>`));
          document.querySelector("#top").innerHTML = top_heading;
          document.querySelector("#side").innerHTML = top_heading;
          setTimeout(() => {
            nameLinks.map((x) => {
              document.querySelector(
                `#id_${x.source
                  .toString()
                  .replace(/ /g, "")}${x.target.toString().replace(/ /g, "")}`
              ).innerText = x.type;
              document.querySelector(
                `#id_${x.target
                  .toString()
                  .replace(/ /g, "")}${x.source.toString().replace(/ /g, "")}`
              ).innerText = x.type;
            });
          }, 2000);

          update(graph.links, graph.nodes, svg, colors, simulation);
        });
      }
      
      let lineDataCollection = [],GraphToMapCollection = [],connections2gm = [],GraphToTextCollection=[],connections2gt=[],connections2gman=[],GraphToGMCollection=[],ClonesLineCollection=[],connectionsclone=[],
	  GraphToOrgCollection=[],connections2go=[],GraphCollectionTemp=[],GraphToManCollection=[],GraphToGOCollection=[],GraphToChainCollection=[],connections2ggm=[],connections2ggo=[],connections2gchain=[];

    function update(links, nodes, svg, colors, simulation) {								//function for drawing circles and connected lines in the graph										
        link = svg
          .selectAll(".link")
          .data(links)
          .enter()
          .append("line")
          // .style("stroke-dasharray", "10,2")
          .style("stroke", function (d, i) {
            return colors(i);
          })
          .attr("stroke-opacity", (d) => d.type * 0.4)
          .attr("class", "link");

        edgepaths = svg
          .selectAll(".edgepath")
          .data(links)
          .enter()
          .append("path")
          .attrs({
            class: "edgepath",
            "fill-opacity": 0,
            "stroke-opacity": 0,
            id: function (d, i) {
              return "edgepath" + i;
            },
          })
          .style("pointer-events", "none");

        edgelabels = svg
          .selectAll(".edgelabel")
          .data(links)
          .enter()
          .append("text")
          .style("pointer-events", "none")
          .attrs({																			//edges for the graph
            class: "edgelabel",
            id: function (d, i) {
              return "edgelabel" + i;
            },
            "font-size": 14,
            fill: "#888",
          });

        edgelabels
          .append("textPath")
          .attr("xlink:href", function (d, i) {
            return "#edgepath" + i;
          })
          .style("text-anchor", "middle")
          .style("pointer-events", "none")
          .attr("startOffset", "50%")
          .text(function (d) {
            return d.type;
          });
		  
		  
        node = svg
          .selectAll(".node")
          .data(nodes)
          .enter()
          .append("g")
          .attr("class", "node")
          .attr('node-name', function(d) {
            return d.name;
          });
        // .call(d3.drag().on("start", dragstarted).on("drag", dragged));

        node
          .append("circle")
          .attr("r",10)
          .attr('data-name', function (d) {
            return d.name;
          })
		  .attr('locations', function (d) {
			  return d.location;
		  })
		  .attr('personsid', function (d,i) {
			  return (i);
		  })
		  .attr('id', function (d,i) {
			  return "per"+(i);
		  })
          .style("fill", '#6495ed')
		  .attr('clickhist',0)
		  .attr('selecthist',0)
		  .attr('clicked', false)
		  .attr('cloned',false)			  		  
        .on("mouseover", graphhover)
		.on("mouseout",graphout)																		//click events on map elements
		.on("mouseup",graphClick)

        node.append("title").text(function (d) {
          return d.connection;
        });

        node
          .append("text")
          .attr("dy", -3)
		  .attr('id', function (d,i){return "pername"+i;})
		  .attr("fill", "black")
		  .attr("font-size", 15)
          .text(function (d) {
            return d.name;
          });

		//  fill: none; stroke: #ccc;
        simulation.nodes(nodes).on("tick", ticked);
        simulation.force("link").links(links);
		
				var selectedgraph;
				var draggableOptionsgraph = {
					start: function(event, ui) {
						//get all selected...
						if (ui.helper.hasClass('selectedgraph')) selectedgraph = $('div.selectedgraph');
						else {
							selectedgraph = $(ui.helper);
							$('div.selectedgraph').removeClass('selectedgraph')
						}
					},
					drag: function(event, ui) {
						var currentLoc = $(this).position();
						var prevLoc = $(this).data('prevLoc');
						if (!prevLoc) {
							prevLoc = ui.originalPosition;
						}

						var offsetLeft = currentLoc.left-prevLoc.left;
						var offsetTop = currentLoc.top-prevLoc.top;

						moveSelectedgraph(offsetLeft, offsetTop);
						$(this).data('prevLoc', currentLoc);
					}
				};

				function moveSelectedgraph(ol, ot){
					//console.log("moving to: " + ol + ":" + ot);
					selectedgraph.each(function(){
						$this =$(this);
						var p = $this.position();
						var l = p.left;
						var t = p.top;
						//console.log({id: $this.attr('id'), l: l, t: t});
						$this.css('left', l+ol);
						$this.css('top', t+ot);
					})}
			  
			  $('.all-data-box').draggable(draggableOptionsgraph);
			  $('.all-data-box').addClass('selectedgraph');
		
		
        $('.all-data-box').on('drag', reDrawLines);

		if(document.getElementById("movefixgraph").checked){
			document.getElementById('graphboxout').ondragstart = function() { return false; };
			$('.all-data-box').removeClass('selectedmap')
			$('.all-data-box').removeClass('selectedorg')
			$('.all-data-box').removeClass('selectedGM')
			$('.all-data-box').removeClass('selectedGO')
			$('.all-data-box').removeClass('selectedchain')			
		}
		else{
			document.getElementById('graphboxout').ondragstart = function() { return true; };
				if(bubbleToGraphCollection.length>0)
					$('.all-data-box').addClass('selectedmap')
				if(OrgToGraphCollection.length==0)					
					$('.all-data-box').addClass('selectedorg')
				if(ClusterGMToGraph.length==0)
					$('.all-data-box').addClass('selectedGM')
				if(ClusterGOToGraph.length==0)					
					$('.all-data-box').addClass('selectedGO')
				if(ClusterChainToGraph.length==0)					
					$('.all-data-box').addClass('selectedchain')			
		};
     	
		
      }
		
    function graphClick() {																//handle graph click event
		  if(window.getSelection) {
			let selection = window.getSelection();
		let selectedesign = document.getElementById("lineguider").value;
		  
			let $event = event;
            let ele = $event.target;      
            let name = event.target.getAttribute('data-name');
			let nameid = event.target.getAttribute('personsid');
			let clicked = event.target.getAttribute('clicked');
			var cloned = ele.getAttribute('cloned');
			var domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;

			let track = ["GraphView",name,1,new Date(),"click"];
			tracker.push(track);
			
			let ids = []

			for(var val in documentData){
				if(documentData[val].name.includes(name))
				{
					ids.push(documentData[val]);
				}
			}

          if(event.button === 0) {																//left click event of graph element
			  
			for (var i = GraphToMapCollection.length - 1; i >= 0; --i) {
			  if (GraphToMapCollection[i].source.ele == nameid) {
				GraphToMapCollection.splice(i, 1); 
			  }}
			  
			for (var i = GraphToOrgCollection.length - 1; i >= 0; --i) {
			  if (GraphToOrgCollection[i].source.ele == nameid) {
				GraphToOrgCollection.splice(i, 1); 
			  }} 
			  
			for (var i = connections2go.length - 1; i >= 0; --i) {
			  if (connections2go[i].source == ele) {
				connections2go.splice(i, 1); 
			  }}
			  
			for (var i = connections2gm.length - 1; i >= 0; --i) {
			  if (connections2gm[i].source == ele) {
				connections2gm.splice(i, 1); 
			  }}
			  
			for (var i = GraphToGMCollection.length - 1; i >= 0; --i) {
			  if (GraphToGMCollection[i].source.ele == nameid) {
				GraphToGMCollection.splice(i, 1); 
			  }}
			  
			for (var i = GraphToGOCollection.length - 1; i >= 0; --i) {
			  if (GraphToGOCollection[i].source.ele == nameid) {
				GraphToGOCollection.splice(i, 1); 
			  }} 
			
			for (var i = GraphToChainCollection.length - 1; i >= 0; --i) {
			  if (GraphToChainCollection[i].source.ele == nameid) {
				GraphToChainCollection.splice(i, 1); 
			  }} 			  
			  
			for (var i = connections2ggm.length - 1; i >= 0; --i) {
			  if (connections2ggm[i].source == ele) {
				connections2ggm.splice(i, 1); 
			  }}
			  
			for (var i = connections2ggo.length - 1; i >= 0; --i) {
			  if (connections2ggo[i].source == ele) {
				connections2ggo.splice(i, 1); 
			  }}		

			for (var i = connections2gchain.length - 1; i >= 0; --i) {
			  if (connections2gchain[i].source == ele) {
				connections2gchain.splice(i, 1); 
			  }}						  
			  
			document.querySelectorAll('.link-newgm').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newgo').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newggm').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newggo').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});			
			document.querySelectorAll('.link-newggom').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});

				if(event.target.getAttribute('clickhist') > 0)
			   {
				  d3.select(this).style("fill", "#6495ed");
				document.getElementById('pername'+nameid).setAttribute('fill','black');													  

			   }

			
			if(clicked == "false"){
			var nopoints = document.getElementById('nodata').value;

			d3.select(this).style("stroke","black");
			if(document.querySelector('.right .bubblemap-box').style.display == 'block'){					//connecting graph view to map view			
				var gids  = mapcondata[nameid]['gm'].split(',');
				for(var j=0;j<gids.length;j++){
				
				let tar = document.querySelector('[map-id="map' + gids[j] + '"]');
				if(selectedesign == "design"){
				//tar.setAttribute('r', "6.5")
				}	
				tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))+1);		
				if(tar.getAttribute('clicked')=="false"){				
				let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);}
				domRect2 = tar.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;
				
            GraphToMapCollection.push({
                  source : {
                    id: "graph",
					ele:nameid,
                    xOffset : x1Loc,
                    yOffset : y1Loc
                  },
                  target : {
                    id: "bubble-map",
					ele:tar,
                    xOffset : x2Loc,
                    yOffset : y2Loc
                  }
                });

			connections2gm.push({ source: ele, target: tar, boxElement: 'graph-box' });
			}
			d3.select(this).style("fill", "#006400");
			document.getElementById('pername'+nameid).setAttribute('fill','green');			
			graphclickon = true;
			//d3.select(this).attr("r", function(d){ return 15 })
			hist = parseInt(event.target.getAttribute('clickhist'))+1
			event.target.setAttribute('clickhist', hist)
			event.target.setAttribute('clicked', true)
			if(!(document.getElementById("movefixmap").checked))				
				$('.bubblemap-box').addClass('selectedgraph');
				if(selectedesign != "design"){				  				
				drawPolyLineGraph(GraphToMapCollection);}
			}
			
			if(document.querySelector('.right .organize-data-box').style.display == 'block'){
				var gids  = mapcondata[nameid]['go'].split(',');
				for(var j=0;j<gids.length;j++){
				try{
				let tar = document.querySelector('[barid="' + gids[j] + '"]');
				if(selectedesign == "design"){
				}		
				tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))+1);		
				if(tar.getAttribute('clicked')=="false"){				
				let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);}		

				domRect = tar.getBoundingClientRect();
				let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+125;
				let y2Loc = domRect.y+4;

				GraphToOrgCollection.push({
                    source : {
                      id: "graph",
					  ele: nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
					  ele: tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				  connections2go.push({source:ele,target:tar,boxElement:'graph-box'});
				}
				catch(error)
				{console.log('org miss');}
				}
				d3.select(this).style("fill", "#006400");
			document.getElementById('pername'+nameid).setAttribute('fill','green');							
				graphclickon = true;
				//d3.select(this).attr("r", function(d){ return 15 })
				hist = parseInt(event.target.getAttribute('clickhist'))+1
				event.target.setAttribute('clickhist', hist)
				event.target.setAttribute('clicked', true)
				if(!(document.getElementById("movefixorg").checked))								
					$('.organize-data-box').addClass('selectedgraph');
				if(selectedesign != "design"){				  								
				drawPolyLineGraph(GraphToOrgCollection);}
			
			}

			if(document.querySelector('.right .clusterGM-data-box').style.display == 'block'){					//connecting cluster views with graph
				var gm = document.getElementsByClassName("dotgm");
				for(var i=0;i<gm.length;i++)
				{
					if(gm[i].getAttribute('person').split(',').includes(nameid))
					{
					
					var nid = gm[i].getAttribute('clustergmid');
					var circele = document.getElementById("cgmcircid"+nid);
					let detail = circele.getAttribute('detailed');		
				if(selectedesign == "design"){
				circele.setAttribute('style', "fill: #ff7f50")
				}							
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgmgid"+nid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);

					}

					GraphToGMCollection.push({
						source : {
						  id: "graph",
						  ele: nameid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterGM",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
				  connections2ggm.push({source:ele,target:circele,boxElement:'graph-box'});
				
					d3.select(this).style("fill", "#006400");
			document.getElementById('pername'+nameid).setAttribute('fill','green');								
					graphclickon = true;
					//d3.select(this).attr("r", function(d){ return 15 })
					hist = parseInt(event.target.getAttribute('clickhist'))+1
					event.target.setAttribute('clickhist', hist)
					event.target.setAttribute('clicked', true)
					if(!(document.getElementById("movefixGM").checked))				
						$('.clusterGM-data-box').addClass('selectedgraph');
				if(selectedesign != "design"){				  									
				drawPolyLineGraph(GraphToGMCollection);				}
				  }
				}
			}
			
			if(document.querySelector('.right .clusterGO-data-box').style.display == 'block'){			
				var go = document.getElementsByClassName("dotgo");
				for(var i=0;i<go.length;i++)
				{
					if(go[i].getAttribute('person').split(',').includes(nameid))
					{
					
					var nid = go[i].getAttribute('clustergoid');
					var circele = document.getElementById("cgocircid"+nid);
				if(selectedesign == "design"){
				}			
				circele.setAttribute('style', "fill: #ff7f50")
				
					let detail = circele.getAttribute('detailed');					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgogid"+nid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);
					}

					GraphToGOCollection.push({
						source : {
						  id: "graph",
						  ele: nameid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterGO",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					  connections2ggo.push({source:ele,target:circele,boxElement:'graph-box'});
					
					d3.select(this).style("fill", "#006400");
			document.getElementById('pername'+nameid).setAttribute('fill','green');			
					
					graphclickon = true;
					//d3.select(this).attr("r", function(d){ return 15 })
					hist = parseInt(event.target.getAttribute('clickhist'))+1
					event.target.setAttribute('clickhist', hist)
					event.target.setAttribute('clicked', true)
					if(!(document.getElementById("movefixGO").checked))									
						$('.clusterGO-data-box').addClass('selectedgraph');
				if(selectedesign != "design"){				  									
				drawPolyLineGraph(GraphToGOCollection);				}
				  }
				}
			}
	
			if(document.querySelector('.right .clusterchain-data-box').style.display == 'block'){			
				var chain = document.getElementsByClassName("dotchain");
				for(var i=0;i<chain.length;i++)
				{
				if(chain[i].getAttribute('person').split(',').includes(nameid))
				{
				var nid = chain[i].getAttribute('clusterchainid');	
				var circele = document.getElementById("cchaincircid"+nid);
				if(selectedesign == "design"){
				}		
				circele.setAttribute('style', "fill: #ff7f50")
				
				var detail = circele.getAttribute('detailed');
				
				if(detail=="false")
				{
					let domRect = circele.getBoundingClientRect();
					let radius = parseInt(circele.getAttribute('r'));
					var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
					var y2Loc = domRect.y+parseInt(radius/3);
				}
				else
				{	
					let eleme2 = document.getElementById("cchaingid"+nid);
					let domRect2 = eleme2.getBoundingClientRect();
					let height2 = eleme2.getAttribute('height');
					let width2 = eleme2.getAttribute('width');
					var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
					var y2Locm = domRect2.y+parseInt(height2/7);
					
					var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
					var y2Loc = domRect2.y+parseInt(height2/7);
				}

					GraphToChainCollection.push({
						source : {
						  id: "graph",
						  ele: nameid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterchain",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					  connections2gchain.push({source:ele,target:circele,boxElement:'graph-box'});
					
					d3.select(this).style("fill", "#006400");
			document.getElementById('pername'+nameid).setAttribute('fill','green');			
					
					graphclickon = true;
					//d3.select(this).attr("r", function(d){ return 15 })
					hist = parseInt(event.target.getAttribute('clickhist'))+1
					event.target.setAttribute('clickhist', hist)
					event.target.setAttribute('clicked', true)
					if(!(document.getElementById("movefixCBI").checked))				
						$('.clusterchain-data-box').addClass('selectedgraph');		
				if(selectedesign != "design"){				  									
				drawPolyLineGraph(GraphToChainCollection);				}	
				  }
				}
			}			
			}			
		  else{
			  
				
				var gids  = mapcondata[nameid]['gm'].split(',');
					
				for(var j=0;j<gids.length;j++)
				{
				let tar = document.querySelector('[map-id="map' + gids[j] + '"]');
				tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))-1);
				}
				
				var gids  = mapcondata[nameid]['go'].split(',');
					
				for(var j=0;j<gids.length;j++)
				{
				let tar = document.querySelector('[barid="' + gids[j] + '"]');
					tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))-1);
				}
				
			  d3.select(this).style("stroke","none");

				if(GraphToMapCollection.length==0)
					$('.bubblemap-box').removeClass('selectedgraph')
				if(GraphToOrgCollection.length==0)					
					$('.organize-data-box').removeClass('selectedgraph')
				if(GraphToGMCollection.length==0)
					$('.clusterGM-data-box').removeClass('selectedgraph')
				if(GraphToGOCollection.length==0)					
					$('.clusterGO-data-box').removeClass('selectedgraph')
				if(GraphToChainCollection.length==0)					
					$('.clusterchain-data-box').removeClass('selectedgraph')
				if(cloned=="true"){

				let el = document.getElementById('clone'+nameid);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
			let selectedesign = document.getElementById("lineguider").value;
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

				ele.setAttribute('cloned','false');	}
				ele.setAttribute('r', "10")				
				graphoverout();
					let found = 0;
					if(bubbleToGraphCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToGraphCollection.length;jk++){
						if(nameid == bubbleToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToGraphCollection.length != 0){
						for(var jk = 0 ;jk<OrgToGraphCollection.length;jk++){
						if(nameid == OrgToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGraph.length;jk++){
						if(nameid == ClusterChainToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGMToGraph.length;jk++){
						if(nameid == ClusterGMToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGOToGraph.length;jk++){
						if(nameid == ClusterGOToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}					
					if(found==1){
						d3.select(this).style("fill", "#ff7f50");
				document.getElementById('pername'+nameid).setAttribute('fill','red');									
					}									
				event.target.setAttribute('clicked', false)
			}
		  }
	
	else if(event.button === 2) {																//right click event of graph element
	if(clicked == "true"){
		const rightCustomMenu = document.querySelector('.svg-custom-menu');
		
		if(manualink==false)
			{rightCustomMenu.innerHTML = `<li class="svg-menu-item-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">Submit as Answer</li><li class="svg-menu-item2-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item3-${nameid} svg-menu-item3">Create/Delete Clone V2</li>`}
			else
			{rightCustomMenu.innerHTML = `<li class="svg-menu-item-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">Link To This</li><li class="svg-menu-item2-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item3-${nameid} svg-menu-item3">Create/Delete Clone V2</li>`}
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
			
			document.querySelector('.svg-menu-item3').style.display = 'none';
			document.querySelector('.svg-menu-item').style.display = 'none';

		
			document.querySelector(`.svg-menu-item-${nameid}`).addEventListener('click', function(e) {
        document.querySelector('.svg-custom-menu').style.display = 'none';
		
		for(var i = 0;i<ids.length;i++)
		{
		
			let content = ids[i].docText;
			let sid = ids[i].docId;

            content = content.replace(name, `<span class=highlighted-text>${name}</span>`);

                  var note = `
                  <div class="reldoc note the-node" id='`+ sid +`' style="z-index: 999;">
                    <div class='close_note'>X</div>
                    <h3>`+ sid +`&nbsp;
				<label class="switch">
				  <input type="checkbox" id="movefixg`+sid+`">
				  <span class="slider round"></span>
				</label></h3>
                    <p style="cursor:text;">
                      `+ content +`
                    </p>
                  </div>
                  `;
				  
                  $("#board").append(note);
                  $(".note#" + sid).css('z-index',99).draggable({
                    containment: "#board",
                    grid: [5, 5],
                    cancel: "p"
                  });
				  document.querySelectorAll(`[data-docId='${sid}']`).forEach(docEle => {
                    docEle.style = 'fill: red !important';
                  });

                  let x2Loc = parseFloat($('#' + sid).css('left').split('px')[0]) + $('#' + sid).find('.highlighted-text').position().left+5;
                  let y2Loc = parseFloat($('#' + sid).css('top').split('px')[0]) + $('#' + sid).find('.highlighted-text').position().top + 40;

                  GraphToTextCollection.push({
                    source : {
                      id: "graph",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "highlight-text",
					  ele:sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
					$('#' + sid).addClass('selectedgraph');

                  connections2gt.push({ source: ele, sourceid:nameid,target: $('#' + sid),targetid:sid, boxElement: 'all-data-box' });
				  $('#' + sid).on('drag', function() {
                    GraphToTextCollection = [];
                    connections2gt.forEach(conn => {
                    const ele = conn.source;
					let sid = conn.target[0].id;
					domRect = ele.getBoundingClientRect();
					let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
					let y1Loc = domRect.y+5;

                    let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
                    let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

                      GraphToTextCollection.push({
                        source : {
                          id: "graph",
						  ele:ele.getAttribute('personsid'),
                          xOffset : x1Loc,
                          yOffset : y1Loc
                        },
                        target : {
                          id: "highlight-text",
						  ele:sid,
                          xOffset : x2Loc,
                          yOffset : y2Loc
                        }
                      });
                    })
                    drawPolyLineGraph(GraphToTextCollection);
                  });
				  
		}
		drawPolyLineGraph(GraphToTextCollection);

		});
			
			document.querySelector(`.svg-menu-item1-${nameid}`).addEventListener('click', function(e) {
            document.querySelector('.svg-custom-menu').style.display = 'none';
			
			let track = ["GraphView",name,1,new Date(),"submit"];
			tracker.push(track);
			submitted.push(name);
			d3.select("#submitelements").text(onlyUnique(submitted));			
				
			var study = 1;
			if(study == 0){
			
			if(manualink==false)
			{
				manualinksource.push(ele);
				manualink=true;
			}
			else
			{
				ele2 = manualinksource[0];
				
				if(ele==ele2)
				{
					console.log('Error')
					
				}
				else
				{
				
				var domRect2 = ele2.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;			
				let sid = ele2.getAttribute('id');
				
				GraphToManCollection.push({
                    source : {
                      id: "graph",
					  ele: ele,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "manual",
					  ele: sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				connections2gman.push({source:ele,target:ele2,tarid:sid,boxElement:'graph-box'});
				drawPolyLineGraph(GraphToManCollection);				
				
				manualink=false; manualinksource=[];
				}
			}
			
			}
			})
         	

			document.querySelector(`.svg-menu-item2-${nameid}`).addEventListener('click', function(e) {
           
		   document.querySelector('.svg-custom-menu').style.display = 'none';
			
			let boardg = d3.select('#line-canvas');
			cloned = ele.getAttribute('cloned');			
			//console.log(cloned);
			if (cloned == 'false'){
			
			boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "green")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.on("mouseup",cloneclick)
								.on("click",clonelclick)
								.attr("clicked","false")
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));

	
			let selectedesign = document.getElementById("lineguider").value;

			if(selectedesign == "design1"){

			boardg.append("circle")
                                .attr("r", 1) 	//get radius from targetCircle and also styles
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'progcloneci'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "green")
                                .style("stroke-width", "1px")
								.attr('trail',false)
								.on("mouseup",cloneclick())
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));								

			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextci'+nameid;})
				.style("fill", "black")
				.text('0%');
			}
			else if(selectedesign == "design2"){
			boardg.append("rect")
                                .attr("width", 50)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclonere'+nameid;})
                                .style("fill", "grey")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
			boardg.append("rect")
                                .attr("width", 0)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclone2'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
								
			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc-38)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextre'+nameid;})
				.style("fill", "white")
				.text('0%');
			}
			ele.setAttribute('cloned','true');	
			}
			else
			{
				if(cloned=="true"){

				let el = document.getElementById('clone'+nameid);
				//console.log(el);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

				ele.setAttribute('cloned','false');	}
			}



		var duprecords = [];
		function createdup(path){
			
				if(duprecords.includes(path.getAttribute('id')))
					return;
				
				duprecords.push(path.getAttribute('id'));
				
				let datemp = [];

				for(var ii=0;ii<path.getTotalLength();ii++)
				{
					
					datemp.push([path.getPointAtLength(ii).x,path.getPointAtLength(ii).y])

				let dupcirc = boardg.append("circle")
                              .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", path.getPointAtLength(ii).x)
                                .attr("cy", path.getPointAtLength(ii).y)
								.attr("id",function(d,i){return 'dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2);})
                                .style("fill", "none")
                                .style("stroke", "none")
				
				}
				return 0;
			
		}
	
		  
		  var mpid,mgpid,scale=1;

		function dragged(d) {	

			var m = d3.mouse(this)
			//console.log(m);
			var x = document.getElementsByClassName("link-newgm "+nameid);
			var z = document.getElementsByClassName("link-newgo "+nameid);
			var y = document.getElementsByClassName("link-newggo "+nameid);
			var w = document.getElementsByClassName("link-newggm "+nameid);				
			var xx = document.getElementsByClassName("link-newggom "+nameid);					


			highlightline(x);
			highlightline(z);
			highlightline(y);
			highlightline(w);
			highlightline(xx);			

			
			try {var clp = closestPoint(x[0],m);mgpid='m';mpid=x[0].getAttribute('id').slice(3);}
			catch{var clp = closestPoint(z[0],m);mgpid='g';mpid=z[0].getAttribute('id').slice(3);}
			
			for(var i=0;i<x.length;i++)
			{
			let clp2 = closestPoint(x[i],m);			
			let pid = x[i].getAttribute('id').slice(3);		
				
			
			if(!(document.getElementById("trail"+nameid+'m'+pid))){
				
			tar = x[i].getAttribute('tar');
				
			var elelabel = document.getElementById('per'+nameid).getAttribute('data-name');
			var tarlabel = document.getElementById(tar).getAttribute('label');

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'m'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "purple")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
								.attr("label",elelabel+"---"+tarlabel)
								.on("mouseup", trailcloneclick)
								.on("mouseover", function(d){tooltip3.text(event.target.getAttribute('label'));return tooltip3.style("visibility", "visible");})
								.on("mousemove", function(){return tooltip3.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");})
								.on("mouseout", function(){return tooltip3.style("visibility", "hidden");});
															
			}
			else
			{
				let dist = parseInt(x[i].getTotalLength()*scale)
				//console.log(dist)
				let chp = x[i].getPointAtLength(dist);
				//console.log(chp);
				let el = document.getElementById('trail'+nameid+'m'+pid);
				el.style.opacity = 0.4;
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid='m'
				}
			}

			for(var i=0;i<z.length;i++)
			{
			let clp2 = closestPoint(z[i],m);			
			let pid = z[i].getAttribute('id').slice(3);	
			
			if(!(document.getElementById("trail"+nameid+'g'+pid))){

			tar = z[i].getAttribute('tar');
			
			var elelabel = document.getElementById('per'+nameid).getAttribute('data-name');
			var tarlabel = document.getElementById(tar).getAttribute('orgname');

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'g'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "#0ca4ff")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
								.attr("label",elelabel+"---"+tarlabel)
								.on("mouseover", function(d){tooltip3.text(event.target.getAttribute('label'));return tooltip3.style("visibility", "visible");})
								.on("mousemove", function(){return tooltip3.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");})
								.on("mouseout", function(){return tooltip3.style("visibility", "hidden");})
								.on("mouseup", trailcloneclick);						
								
			}
			else
			{
				let dist = parseInt(z[i].getTotalLength()*scale)
				let chp = z[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'g'+pid);
				el.style.opacity = 0.4;
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'g'
				}
			}
			
			for(var i=0;i<y.length;i++)
			{
			let clp2 = closestPoint(y[i],m);			
			let pid = y[i].getAttribute('id').slice(4);		
			
			if(!(document.getElementById("trail"+nameid+'n'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'n'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "green")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(y[i].getTotalLength()*scale)
				let chp = y[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'n'+pid);
				el.style.opacity = 0.4;
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid='n'
				}
			}

			for(var i=0;i<w.length;i++)
			{
			let clp2 = closestPoint(w[i],m);			
			let pid = w[i].getAttribute('id').slice(4);
			
			
			if(!(document.getElementById("trail"+nameid+'l'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'l'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "black")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(w[i].getTotalLength()*scale)
				let chp = w[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'l'+pid);
				el.style.opacity = 0.4;
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'l'
				}
			}


			for(var i=0;i<xx.length;i++)
			{
			let clp2 = closestPoint(xx[i],m);			
			let pid = xx[i].getAttribute('id').slice(5);
			
			
			if(!(document.getElementById("trail"+nameid+'c'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'c'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "yellow")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(xx[i].getTotalLength()*scale)
				let chp = xx[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'c'+pid);
				el.style.opacity = 0.4;			
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'c'
				}
			}
						
			d3.select("#clone"+nameid).attr("cx", clp[0]).attr("cy",clp[1]);
			try{document.getElementById("trail"+nameid+mgpid+mpid).style.opacity ="0.1";}//.outerHTML = "";}
			catch(e){console.log('k');}

			let selectedesign = document.getElementById("lineguider").value;
		
			if(selectedesign == "design1"){
			
			document.getElementById('progcloneci'+nameid).setAttribute('cx',clp[0]);
			document.getElementById('progcloneci'+nameid).setAttribute('cy',clp[1]);
			document.getElementById('progtextci'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextci'+nameid).setAttribute('y',clp[1]);				
			document.getElementById('progcloneci'+nameid).setAttribute('r',scale*25);
			document.getElementById('progtextci'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}
			else if(selectedesign == "design2")
			{
			document.getElementById('progclone2'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclone2'+nameid).setAttribute('y',clp[1]-45);				
			document.getElementById('progclonere'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclonere'+nameid).setAttribute('y',clp[1]-45);			
			document.getElementById('progtextre'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextre'+nameid).setAttribute('y',clp[1]-38);				
			document.getElementById('progclone2'+nameid).setAttribute('width',scale*50);
			document.getElementById('progtextre'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}	
			
			if(mgpid=='m'){
				let path = document.getElementsByClassName("link-newgm "+nameid+' '+mpid)[0];
			try{let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
			scale = parseFloat(dist/path.getTotalLength());	
			var length = path.getTotalLength();	
			
			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] > path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}
			document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
			}
			catch(e){console.log('');}		
			}
			else{
			if(mgpid=='g'){
				let path = document.getElementsByClassName("link-newgo "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
							var length = path.getTotalLength();			
			
			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] > path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';

			}
			else{
			if(mgpid=='n'){
				let path = document.getElementsByClassName("link-newggo "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
			var length = path.getTotalLength();			
				
			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}				
				
			}
			else{
			if(mgpid=='l'){
				let path = document.getElementsByClassName("link-newggm "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
			var length = path.getTotalLength();			
				
			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}				
			}
			else{
			if(mgpid=='c'){
				let path = document.getElementsByClassName("link-newggom "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}			
			}}}}}
				
		//reDrawLines();	
	}
	
		function getDistance(x1, y1, x2, y2){
			let y = x2 - x1;
			let x = y2 - y1;
			
			return Math.sqrt(x * x + y * y);
		}
		
		function closestPoint(pathNode, point) {
			  var pathLength = pathNode.getTotalLength(),
				  precision = 8,
				  best,
				  bestLength,
				  bestDistance = Infinity;

			  // linear scan for coarse approximation
			  for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {
				if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {
				  best = scan, bestLength = scanLength, bestDistance = scanDistance;
				}
			  }

			  // binary search for precise estimate
			  precision /= 2;
			  while (precision > 0.5) {
				var before,
					after,
					beforeLength,
					afterLength,
					beforeDistance,
					afterDistance;
				if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {
				  best = before, bestLength = beforeLength, bestDistance = beforeDistance;
				} else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {
				  best = after, bestLength = afterLength, bestDistance = afterDistance;
				} else {
				  precision /= 2;
				}
			  }

			  best = [best.x, best.y];
			  best.distance = Math.sqrt(bestDistance);
			  return best;

			  function distance2(p) {
				var dx = p.x - point[0],
					dy = p.y - point[1];
				return dx * dx + dy * dy;
			  }}
	
		function dragended(d){
				
			var x = document.getElementsByClassName("link-newgm "+nameid);
			var z = document.getElementsByClassName("link-newgo "+nameid);
			var y = document.getElementsByClassName("link-newggm "+nameid);
			var w = document.getElementsByClassName("link-newggo "+nameid);
			var xx = document.getElementsByClassName("link-newggom "+nameid);
			
			unhighlightline(x);
			unhighlightline(z);
			unhighlightline(y);
			unhighlightline(w);			
			unhighlightline(xx);		
			
			let trailcirc = document.getElementsByClassName("trail"+nameid)
			for(var j=0;j<trailcirc.length;j++){
				//trailcirc[j].style.display='none';
			}
			
		}
	
		function dragstart(d){

			if(document.getElementsByClassName("trail"+nameid))
			{
				let trailcirc = document.getElementsByClassName("trail"+nameid)
				for(var j=0;j<trailcirc.length;j++){
					//trailcirc[j].style.display='block';
				}		
			}
		}
	
		function highlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'red';
				
			}			
		}
		
		function unhighlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'rgb(149, 199, 244';
				
			}			
		}	
	
		function cloneclick(){
			
			if(event.button==2){
				
				const rightCustomMenu = document.querySelector('.svg-custom-menu');
		
				rightCustomMenu.innerHTML = `<li class="svg-menu-item-${nameid} svg-menu-item">Delete Clone</li>`
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
		
		document.querySelector(`.svg-menu-item-${nameid}`).addEventListener('click', function(e) {
			
	   document.querySelector('.svg-custom-menu').style.display = 'none';
	
				let el = document.getElementById('clone'+nameid);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
			let selectedesign = document.getElementById("lineguider").value;
			
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

			ele.setAttribute('cloned','false');	
		})
				
			}
			
		}
		
		function trailcloneclick(){
			if(this.style.opacity != 0.05){
			this.style.opacity = 0.05}
			else
				this.style.opacity = 0.4;
		}
	
		function clonelclick(){
			var dates = $('[id^="trail'+nameid+'"]');
			if(this.getAttribute('clicked')=="false"){	
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "hidden";
			this.setAttribute('clicked',"true");
			}}
			else{
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "visible";
			this.setAttribute('clicked',"false");}
			}
		}		
	
	})
		  
			document.querySelector(`.svg-menu-item3-${nameid}`).addEventListener('click', function(e) {
			
			document.querySelector('.svg-custom-menu').style.display = 'none';

			let boardg = d3.select('#line-canvas');

			if (cloned == 'false'){
			let targetCircle = boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "blue")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.call(d3.drag()
								.on("drag", draggedv));
								
			circele.setAttribute('cloned','true');	
			
			 
			let tcirc = document.getElementById('clone'+nameid);
			let x1Loct = parseFloat(tcirc.getAttribute("cx"));
			let y1Loct = parseFloat(tcirc.getAttribute("cy"));
			
			if(document.querySelector('.right .all-data-box').style.display == 'block')												///connect to graph
			{			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			domRect = tar.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect.y+5;
			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}


			if(document.querySelector('.right .bubblemap-box').style.display == 'block')											//connect to map
			{			
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			let tar = document.querySelector('[map-id="map' + loc + '"]');

			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;	

			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}			

				drawPolyLineClusterGM(ClusterGMCloneToGraph);

			
			function draggedv(d){				
				d3.select(this).attr("cx", d3.event.x).attr("cy", d3.event.y);
				reDrawLines();
			}
				
			}
			else
			{
				let el = document.getElementById('clone'+nameid);
				el.remove(); 
				ClusterGMCloneToGraph=[],connections4cgclone=[]
			document.querySelectorAll('.link-newcgmclone').forEach(ele => {
				  ele.remove();
			  });
			
				circele.setAttribute('cloned','false');	
			}
			
			})

				
		
	}
			else{
			const rightCustomMenu = document.querySelector('.svg-custom-menu');
			rightCustomMenu.innerHTML = `<li class="svg-menu-item-${nameid} svg-menu-item">Submit as Answer</li>`
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
			
			document.querySelector(`.svg-menu-item-${nameid}`).addEventListener('click', function(e) {
				
			let track = ["GraphView",name,1,new Date(),"submit"];
			tracker.push(track);
			submitted.push(name);
			d3.select("#submitelements").text(onlyUnique(submitted));
				
			})
			
		}
	}
	}
	
			
		var abc1 = $('[id^="dupcirc"]');
for(let iii = 0;iii<abc1.length;iii++){
		abc1[iii].parentNode.appendChild(abc1[iii]);
}

		var abc2 = $('[id^="clone"]');
for(let iii = 0;iii<abc2.length;iii++){
		abc2[iii].parentNode.appendChild(abc2[iii]);
}

		var abc4 = $('[id^="progcloneci"]');
for(let iii = 0;iii<abc4.length;iii++){
		abc4[iii].parentNode.appendChild(abc4[iii]);
}		
		var abc3 = $('[id^="progtextci"]');
for(let iii = 0;iii<abc3.length;iii++){
		abc3[iii].parentNode.appendChild(abc3[iii]);
}
		var abc5 = $('[id^="progress"]');
for(let iii = 0;iii<abc5.length;iii++){
		abc5[iii].parentNode.appendChild(abc5[iii]);
}

	}
	  
    function graphhover() {																//handle graph hover event
			
			let $event = event;
            let ele = $event.target;      
 			let nameid = event.target.getAttribute('personsid');
			let name = event.target.getAttribute('data-name');
			let clicked = event.target.getAttribute('clicked');
			let selectedesign = document.getElementById("lineguider").value;

			startimeg = new Date();
		
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y1Loc = domRect.y+5;
			
			
			//if(clicked != "true"){
			if(clicked != "true"){
				if(d3.select(this).style("fill") != "rgb(255, 60, 0)"){
			d3.select(this).style("fill", "#485D5E");
			}}			
			if(document.querySelector('.right .bubblemap-box').style.display == 'block'){
				var gids  = mapcondata[nameid]['gm'].split(',');
				for(var j=0;j<gids.length;j++)
				{
				let tar = document.querySelector('[map-id="map' + gids[j] + '"]');
				if(selectedesign == "design"){
				//tar.setAttribute('r', "6.5")
				}
				if(tar.getAttribute('clicked')=="false"){				
				let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);}
				domRect2 = tar.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;

				GraphCollectionTemp.push({
					  source : {
						id: "graph",
						ele:nameid,
						xOffset : x1Loc,
						yOffset : y1Loc
					  },
					  target : {
						id: "bubble-map",
						xOffset : x2Loc,
						yOffset : y2Loc
					  }
					});
				}
				if(d3.select(this).style("fill")=="rgb(173, 158, 227)"){
				 d3.select(this).style("fill", "#485D5E");
				 document.getElementById('pername'+nameid).setAttribute('fill','DimGray');
				 //d3.select(this).attr("r", function(d){ return 15 })
				 }
					  if(selectedesign != "design"){				 
					  drawPolyLineGraphTemp(GraphCollectionTemp);}
			}
			
			if(document.querySelector('.right .organize-data-box').style.display == 'block'){
				var gids  = mapcondata[nameid]['go'].split(',');
				for(var j=0;j<gids.length;j++)
				{
				try{
				let tar = document.querySelector('[barid="' + gids[j] + '"]');
					if(selectedesign == "design"){
				}			
				if(tar.getAttribute('clicked')=="false"){				
				let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);}
				document.getElementById('text'+gids[j]).setAttribute('fill','red');				

				domRect = tar.getBoundingClientRect();
				let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+125;
				let y2Loc = domRect.y+4;

				GraphCollectionTemp.push({
                    source : {
                      id: "graph",
					  ele: nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
					  ele: tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				}
				catch(error)
				{console.log('org miss');}
				}
				if(d3.select(this).style("fill")=="rgb(173, 158, 227)"){
				   d3.select(this).style("fill", "#485D5E");
				 document.getElementById('pername'+nameid).setAttribute('fill','DimGray');				   
				 // d3.select(this).attr("r", function(d){ return 15 })
				  }
					  if(selectedesign != "design"){				  
					  drawPolyLineGraphTemp(GraphCollectionTemp);}
			}
			
			if(document.querySelector('.right .clusterGM-data-box').style.display == 'block'){			
				var gm = document.getElementsByClassName("dotgm");
				for(var i=0;i<gm.length;i++)
				{
					if(gm[i].getAttribute('person').split(',').includes(nameid))
					{
					
					var nid = gm[i].getAttribute('clustergmid');
					var circele = document.getElementById("cgmcircid"+nid);
					let detail = circele.getAttribute('detailed');			
				if(selectedesign == "design"){
				circele.setAttribute('style', "fill: #ff7f50")
				}		
				if(circele.getAttribute('clicked')=="false"){				
				circele.setAttribute('style', "fill: #ff7f50")}
				
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgmgid"+nid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);

					}

					GraphCollectionTemp.push({
						source : {
						  id: "graph",
						  ele: nameid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterGM",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					  if(d3.select(this).style("fill")=="rgb(173, 158, 227)"){
					   d3.select(this).style("fill", "#485D5E");
				 document.getElementById('pername'+nameid).setAttribute('fill','DimGray');					   
					  //d3.select(this).attr("r", function(d){ return 7 })
					  }
					  if(selectedesign != "design"){					  
					  drawPolyLineGraphTemp(GraphCollectionTemp);					}
				  }
				}
			}
			
			if(document.querySelector('.right .clusterGO-data-box').style.display == 'block'){			
				var go = document.getElementsByClassName("dotgo");
				for(var i=0;i<go.length;i++)
				{
					if(go[i].getAttribute('person').split(',').includes(nameid))
					{
					
					var nid = go[i].getAttribute('clustergoid');
					var circele = document.getElementById("cgocircid"+nid);
					let detail = circele.getAttribute('detailed');			
				if(selectedesign == "design"){
				circele.setAttribute('style', "fill: #ff7f50")
				}	
				if(circele.getAttribute('clicked')=="false"){				
				circele.setAttribute('style', "fill: #ff7f50")}				
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgogid"+nid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);
					}

					GraphCollectionTemp.push({
						source : {
						  id: "graph",
						  ele: nameid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterGO",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					  if(d3.select(this).style("fill")=="rgb(173, 158, 227)"){
					   d3.select(this).style("fill", "#485D5E");
				 document.getElementById('pername'+nameid).setAttribute('fill','DimGray');
					   
				//	  d3.select(this).attr("r", function(d){ return 7 })
				}
					  if(selectedesign != "design"){					  
					  drawPolyLineGraphTemp(GraphCollectionTemp);	}				
				  }
				}
			}
	
			if(document.querySelector('.right .clusterchain-data-box').style.display == 'block'){			
				var chain = document.getElementsByClassName("dotchain");
				for(var i=0;i<chain.length;i++)
				{
				if(chain[i].getAttribute('person').split(',').includes(nameid))
				{
				var nid = chain[i].getAttribute('clusterchainid');	
				var circele = document.getElementById("cchaincircid"+nid);
				var detail = circele.getAttribute('detailed');
				if(selectedesign == "design"){
				circele.setAttribute('style', "fill: #ff7f50")
				}			
				if(circele.getAttribute('clicked')=="false"){				
				circele.setAttribute('style', "fill: #ff7f50")}				
				if(detail=="false")
				{
					let domRect = circele.getBoundingClientRect();
					let radius = parseInt(circele.getAttribute('r'));
					var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
					var y2Loc = domRect.y+parseInt(radius/3);
				}
				else
				{	
					let eleme2 = document.getElementById("cchaingid"+nid);
					let domRect2 = eleme2.getBoundingClientRect();
					let height2 = eleme2.getAttribute('height');
					let width2 = eleme2.getAttribute('width');
					var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
					var y2Locm = domRect2.y+parseInt(height2/7);
					
					var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
					var y2Loc = domRect2.y+parseInt(height2/7);
				}

					GraphCollectionTemp.push({
						source : {
						  id: "graph",
						  ele: nameid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterchain",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					  if(d3.select(this).style("fill")=="rgb(173, 158, 227)"){
					   d3.select(this).style("fill", "#485D5E");
				 document.getElementById('pername'+nameid).setAttribute('fill','DimGray');					   
					  //d3.select(this).attr("r", function(d){ return 7 })
					  }
					  if(selectedesign != "design"){					  
					  drawPolyLineGraphTemp(GraphCollectionTemp);		}			
				  }
				}
			}			
		//	}
      }
	
	function graphoverout(){
			
		let $event = event;
        let ele = $event.target;      
 		let nameid = event.target.getAttribute('personsid');
		let name = event.target.getAttribute('data-name');
		let clicked = event.target.getAttribute('clicked');
		
		let track = ["GraphView",name,startimeg,new Date(),"hover"];
		
		tracker.push(track);
			
			if (clicked == "false"){
			
			if(document.querySelector('.right .bubblemap-box').style.display == 'block'){
				var gids  = mapcondata[nameid]['gm'].split(',');
				for(var j=0;j<gids.length;j++)
				{
				let found = 0;
					if(GraphToMapCollection.length != 0){
						for(var jk = 0 ;jk<GraphToMapCollection.length;jk++){
						if(gids[j] == GraphToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToMapCollection.length != 0){
						for(var jk = 0 ;jk<OrgToMapCollection.length;jk++){
						if(gids[j] == OrgToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToMap.length != 0){
						for(var jk = 0 ;jk<ClusterChainToMap.length;jk++){
						if(gids[j] == ClusterChainToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterGMToMap.length;jk++){
						if(gids[j] == ClusterGMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterOMToMap.length;jk++){
						if(gids[j] == ClusterOMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}							
					if(found==0){
				let tar = document.querySelector('[map-id="map' + gids[j] + '"]');
				if(tar.getAttribute('clicked')=="true"){tar.setAttribute('style', "fill: #006400")}
				else{									
				tar.setAttribute('style', "fill: #6495ed")
				tar.setAttribute('r', "6")
				}}
			}}

			if(document.querySelector('.right .organize-data-box').style.display == 'block'){				//hover event for elements related to organization 				
				var gids  = mapcondata[nameid]['go'].split(',');
				for(var j=0;j<gids.length;j++)
				{
					let found = 0;
					if(bubbleToOrgCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToOrgCollection.length;jk++){
						if(gids[j] == bubbleToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(GraphToOrgCollection.length != 0){
						for(var jk = 0 ;jk<GraphToOrgCollection.length;jk++){
						if(gids[j] == GraphToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterChainToOrg.length;jk++){
						if(gids[j] == ClusterChainToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterGOToOrg.length;jk++){
						if(gids[j] == ClusterGOToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterOMToOrg.length;jk++){
						if(gids[j] == ClusterOMToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(found==0){					
				let tar = document.querySelector('[barid="' + gids[j] + '"]');
				if(tar.getAttribute('clicked')=="true"){
					tar.setAttribute('style', "fill: #006400")
				 document.getElementById('text'+gids[j]).setAttribute('fill','green');				
					}
				else{									
				tar.setAttribute('style', "fill: #6495ed")
				 document.getElementById('text'+gids[j]).setAttribute('fill','black');				
				
				tar.setAttribute("stroke","#000000");
				tar.setAttribute("stroke-width","0.3");
				}}}}
			
			
			
				var gm = document.getElementsByClassName("dotgm");
				for(var i=0;i<gm.length;i++)
				{
					if(gm[i].getAttribute('person').split(',').includes(nameid))
					{
					let nid = gm[i].getAttribute('clustergmid');
					
					let found = 0;
					if(bubbleToGMCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToGMCollection.length;jk++){
						if(nid == bubbleToGMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(GraphToGMCollection.length != 0){
						for(var jk = 0 ;jk<GraphToGMCollection.length;jk++){
						if(nid == GraphToGMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToGM.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGM.length;jk++){
						if(nid == ClusterChainToGM[jk].target.ele.id.slice(9)){
							found=1;}}}						
					if(found==0){							
					var circele = document.getElementById("cgmcircid"+nid);		
					if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
					else{										
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");
					}}}}
					
				var go = document.getElementsByClassName("dotgo");
				for(var i=0;i<go.length;i++)
				{
					if(go[i].getAttribute('person').split(',').includes(nameid))
					{
					let nid = go[i].getAttribute('clustergoid');
					let found = 0;
					if(OrgToGOCollection.length != 0){
						for(var jk = 0 ;jk<OrgToGOCollection.length;jk++){
						if(nid == OrgToGOCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(GraphToGOCollection.length != 0){
						for(var jk = 0 ;jk<GraphToGOCollection.length;jk++){
						if(nid == GraphToGOCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToGO.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGO.length;jk++){
						if(nid == ClusterChainToGO[jk].target.ele.id.slice(9)){
							found=1;}}}			
					if(found==0){								
					var circele = document.getElementById("cgocircid"+nid);
					if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
					else{													
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");	
					}}}}
					
				var chain = document.getElementsByClassName("dotchain");
				for(var i=0;i<chain.length;i++)
				{
					if(chain[i].getAttribute('person').split(',').includes(nameid))
					{
					let nid = chain[i].getAttribute('clusterchainid');	
					let found = 0;
					if(bubbleToChainCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToChainCollection.length;jk++){
						if(nid == bubbleToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}
					if(GraphToChainCollection.length != 0){
						for(var jk = 0 ;jk<GraphToChainCollection.length;jk++){
						if(nid == GraphToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}
					if(OrgToChainCollection.length != 0){
						for(var jk = 0 ;jk<OrgToChainCollection.length;jk++){
						if(nid == OrgToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}			
					if(found==0){									
					var circele = document.getElementById("cchaincircid"+nid);
					if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
					else{													
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");
				}}}}
	}
	}	

	function graphout(){																//handle graph out event
		GraphCollectionTemp = [];
		let nameid = event.target.getAttribute('personsid');
		let clicked = event.target.getAttribute('clicked');

		timeout = setTimeout(function(d) {
			tooltip.style("display", "none");
		}, 1000)

		document.querySelectorAll('.link-newgtemp').forEach(ele => {
			ele.remove();
		});
		
		if (clicked == "false") {
		if ((d3.select(this).attr("selecthist") > 0)) {
				let bright = increase_brightness('#ff7f50', -parseInt(d3.select(this).attr('selecthist') * 10));
				d3.select(this).attr('style', "fill: " + bright);
		}
		else {
			d3.select(this).attr('style', "fill: #6495ed");
		}}
		
		//if ((d3.select(this).style("fill") == "rgb(72, 93, 94)")) {
	//		d3.select(this).style("fill", "#6495ed");
	//		document.getElementById('pername' + nameid).setAttribute('fill', 'black');
	//		d3.select(this).attr("r", function(d) {return 10})}
		let selectedesign = document.getElementById("lineguider").value;
		if (selectedesign == "design") {
			if (event.target.getAttribute('clicked') == "false") {}
		}
		graphoverout();
	}
	  
	function ticked() {																	//creating edges and links in the network graph
        link
          .attr("x1", function (d) {
            return d.source.x;
          })
          .attr("y1", function (d) {
            return d.source.y;
          })
          .attr("x2", function (d) {
            return d.target.x;
          })
          .attr("y2", function (d) {
            return d.target.y;
          })
          .on("mouseover", function (d) {
            d3.select("#tooltip")
              .transition()
              .duration(200)
              .style("opacity", 1)
              .text(d.type);
          })
          .on("mouseout", function () {
            d3.select("#tooltip").style("opacity", 0);
          })
          .on("mousemove", function () {
            d3.select("#tooltip")
              .style("left", d3.event.pageX + "px")
              .style("top", d3.event.pageY + "px");
          });

        node.attr("transform", function (d) {
          return "translate(" + d.x + ", " + d.y + ")";
        });

        edgepaths.attr("d", function (d) {
          return (
            "M " +
            d.source.x +
            " " +
            d.source.y +
            " L " +
            d.target.x +
            " " +
            d.target.y
          );
        });

        edgelabels.attr("transform", function (d) {
          if (d.target.x < d.source.x) {
            var bbox = this.getBBox();

            rx = bbox.x + bbox.width / 2;
            ry = bbox.y + bbox.height / 2;
            return "rotate(180 " + rx + " " + ry + ")";
          } else {
            return "rotate(0)";
          }
        });
      }

    window.oncontextmenu = function(event) {
        event.preventDefault();
        return false;
      }

    function getBubbleMapData() {															//calling to get map data
        $.ajax({
          type: "GET",
          url: "http://localhost:3000/getBubbleMapData",
          dataType: "text",
          success: function(data) {
            drawBubbleMap();
            document.querySelector('.bubble-map-button').removeAttribute('disabled');
          },
          error: function(err) {
            console.log(err);
          }
        });
      }

    function checkForBubbleData() {														//checking for the map data csv
        $.ajax({
          type: "GET",
          url: "map-data.csv",
          dataType: "text",
          success: function(data) {
            if(data.length === 0) {
              getBubbleMapData();
            } else {
              document.querySelector('.bubble-map-button').removeAttribute('disabled');
            }
          },
          error: function(err) {
            console.log(err);
            getBubbleMapData();
          }
        });
      }


	function ClusterGMdata() {																//creating scatter plot for cluster Graph and map
		  			
		var margin = {top: 30, right: 30, bottom: 30, left: 30},
		width = 1200 - margin.left - margin.right,
		height = 1200 - margin.top - margin.bottom;
			  
			 body = d3.select(".clusterGM-data-box").style("width", '450px').style("height",'450px')
					.classed("svg-container", true);
					
			d3.select("#svgclustergm").remove();
					
			 var svg = body.append("svg").attr("preserveAspectRatio", "xMinYMin meet").attr("id","svgclustergm")
										.attr("viewBox", "0 0 1200 1200").attr("transform","translate(" + margin.left + "," + margin.top + ")");

var xValue = function(d) { return d.x;};
let  x = d3.scaleLinear()
    .range([ 0, width ]);
let	xMap = function(d) { return x(xValue(d))-200;};
let	xMap0 = function(d) { return x(xValue(d))-260;};
let	xMap01 = function(d) { return x(xValue(d))-200;};

var yValue = function(d) { return d["y"];};														//mapping for circles and the two rect
let   y = d3.scaleLinear()
    .range([ height, 0]);

let	yMap = function(d) { return y(yValue(d))+80;};
let	yMap0 = function(d) { return y(yValue(d))+40;};
let	yMap01 = function(d) { return y(yValue(d))+40+(60-(d['person'].split(',').length * 12));};
let	yMap02 = function(d) { return y(yValue(d))+40+(60-(d['map'].split(',').length * 5));};
	
//	var nopoints = document.getElementById('nodata').value;	
	
	
	
  d3.csv("./cluster-data/points50/mg"+connsel+"_"+dataselid+".csv", function(data){
  
  x.domain([d3.min(data, xValue)-1.0, d3.max(data, xValue)+1]);
  y.domain([d3.min(data, yValue)-1.0, d3.max(data, yValue)+1]);
  
	
	svg.selectAll(".dotgm")
      .data(data)
	.enter().append("circle")
      .attr("class", "dotgm")
      .attr("r", function(d){return parseInt(d['person'].length)*2+parseInt(d['map'].length)*1.5})
      .attr("cx", xMap)
      .attr("cy", yMap)
	  .attr('person',function(d){return d['person'];})
	  .attr('map',function(d){return d['map'];})
	  .attr('clustergmid',function(d,i){return (i+1);})
	  .attr('id',function(d,i){return "cgmcircid"+(i+1);})	
	  .style("fill", '#a1c9fb')																	//circle inside cluster gm
	  .attr("clickhist",0)
	  .attr('clicked',false)
	  .attr('cloned',false)
	  .attr("visibility", "visible")
	  .attr('detailed',false)
	  .style("stroke", "black")
	  .attr("stroke-width",2)
      .on("mouseover", ClusterGMhover)
	  .on("mouseout",ClusterGMout)
	  .on("mouseup",ClusterGMclick);
		  
	svg.selectAll(".rectcgm")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectcgm")
		  .attr('width', 60)
		  .attr('height', function(d){return d['person'].split(',').length * 12;})
		  .attr("x", xMap0)
		  .attr("y", yMap01)
		.style("fill", '#a1c9fb')
			  .attr("visibility", "hidden")														//rectangle for detailed view
		.attr('stroke', '#000000')
		.attr('stroke-width', '1')
			.attr('clustergmid',function(d,i){return (i+1);})	
		  .attr('id',function(d,i){return "cgmgid"+(i+1);});

		  
	svg.selectAll(".rectdgm")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectdgm")
		  .attr('width', 60)
		  .attr('height', function(d){return d['map'].split(',').length * 5;})
		  .attr("x", xMap01)
		  .attr("y", yMap02)
		.style("fill", '#a1c9fb')
		.attr('stroke', '#000000')
		.attr('stroke-width', '1')
		  .attr("visibility", "hidden")
		  .attr('clustergmid',function(d,i){return (i+1);})	
		  .attr('id',function(d,i){return "cgmmid"+(i+1);});		  
		  
	svg.selectAll(".rectagm")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectagm")
		  .attr('width', 60)
		  .attr('height', 60)
		  .attr("x", xMap0)
		  .attr("y", yMap0)
			.attr("fill-opacity", 0)
			.attr('stroke', '#000000')
			.attr('stroke-width', '1')
			  .attr("visibility", "hidden")
		  .attr('clustergmid',function(d,i){return (i+1);})
		  .attr('id',function(d,i){return "cgmg"+(i+1);})		  
		  .on("mouseover", ClusterGMhover)
		  .on("mouseout",ClusterGMout)
		  .on("mouseup",ClusterGMclick);
	  	
	svg.selectAll(".rectbgm")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectbgm")
		  .attr('width', 60)
		  .attr('height', 60)
		  .attr("x", xMap01)
		  .attr("y", yMap0)
			.attr("fill-opacity", 0)
			.attr('stroke', '#000000')
			.attr('stroke-width', '1')
			  .attr("visibility", "hidden")
		  .attr('clustergmid',function(d,i){return (i+1);})
		  .attr('id',function(d,i){return "cgmm"+(i+1);})
		  .on("mouseover", ClusterGMhover)
		  .on("mouseout",ClusterGMout)
		  .on("mouseup",ClusterGMclick);
        });

				var selectedGM;
				var draggableOptionsGM = {
					start: function(event, ui) {
						//get all selected...
						if (ui.helper.hasClass('selectedGM')) selectedGM = $('div.selectedGM');
						else {
							selectedGM = $(ui.helper);
							$('div.selectedGM').removeClass('selectedGM')
						}
					},
					drag: function(event, ui) {
						var currentLoc = $(this).position();
						var prevLoc = $(this).data('prevLoc');
						if (!prevLoc) {
							prevLoc = ui.originalPosition;							//draggable options for gm view
						}

						var offsetLeft = currentLoc.left-prevLoc.left;
						var offsetTop = currentLoc.top-prevLoc.top;

						moveSelectedGM(offsetLeft, offsetTop);
						$(this).data('prevLoc', currentLoc);
					}
				};

				function moveSelectedGM(ol, ot){
					//console.log("moving to: " + ol + ":" + ot);
					selectedGM.each(function(){
						$this =$(this);
						var p = $this.position();
						var l = p.left;
						var t = p.top;
						//console.log({id: $this.attr('id'), l: l, t: t});
						$this.css('left', l+ol);
						$this.css('top', t+ot);
					})}
			  
			  $('.clusterGM-data-box').draggable(draggableOptionsGM);
			  $('.clusterGM-data-box').addClass('selectedGM');


$('.clusterGM-data-box').on('drag', reDrawLines);

		if(document.getElementById("movefixGM").checked){
			document.getElementById('clusterGM').ondragstart = function() { return false; };
			$('.clusterGM-data-box').removeClass('selectedmap')
			$('.clusterGM-data-box').removeClass('selectedgraph')
			$('.clusterGM-data-box').removeClass('selectedchain')				
		}
		else{
			document.getElementById('clusterGM').ondragstart = function() { return true; };
				if(GraphToGMCollection.length>0)
					$('.clusterGM-data-box').addClass('selectedgraph')
				if(bubbleToGMCollection.length==0)					
					$('.clusterGM-data-box').addClass('selectedmap')
				if(ClusterChainToGM.length==0)					
					$('.clusterGM-data-box').addClass('selectedchain')				
		};
      

      }
	  
	let ClusterGMToGraph=[],ClusterGMToMap=[],ClusterGMToTextCollection=[],connections4cg =[],connections4cm=[],connections4ct=[],connections4cman=[],connections4cgclone=[],
	ClusterGMTempCollection=[],ClusterGMToManCollection=[],ClusterGMCloneToGraph=[],ClusterGMdetail=false;

	docsdisplayed = [];

	function ClusterGMclick(){																	//handle click event for graph map cluster
		  if(window.getSelection) {
          let selection = window.getSelection();
		    let $event = event;
            let ele = $event.target;
			var nameid = ele.getAttribute('clustergmid');
			
			var circele = document.getElementById("cgmcircid"+nameid);
			var clicked = circele.getAttribute('clicked');
			var clickhist = circele.getAttribute('clickhist');
			var detail = circele.getAttribute('detailed');
			var persons = circele.getAttribute('person');
			var locs = circele.getAttribute('map');
			var cloned = circele.getAttribute('cloned');
			let selectedesign = document.getElementById("lineguider").value;
			
			let track = ['GraphMapCluster',nameid,1,new Date(),"click"];
			tracker.push(track);
			
			
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cgmgid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Locg = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Locg = domRect.y+parseInt(height/6);
				
				let eleme2 = document.getElementById("cgmmid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height2 = eleme2.getAttribute('height');
				var x1Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Locm = domRect.y+parseInt(height2/6);
				
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
				var y1Loc = domRect.y+parseInt(height/6);

			}
			
		  if(event.button === 2) {																		//right click event for clustter graph map view
			if(clicked == "true"){

			const rightCustomMenu = document.querySelector('.svg-custom-menu');
            
			if(detail=="false" && manualink==false)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item0">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item1">View Summary</li><li class="svg-menu-item2-${nameid} svg-menu-item2">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item3">Link From This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
            else if(detail != "false" && manualink==true)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">Show Compact View</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link To This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
			else if(detail == "false" && manualink==true)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">View Summary</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link To This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
			else if(detail != "false" && manualink==false)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">Show Compact View</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link From This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`

			document.querySelector('.svg-menu-item5').style.display = 'none';
			document.querySelector('.svg-menu-item2').style.display = 'none';
			document.querySelector('.svg-menu-item1').style.display = 'none';
			document.querySelector('.svg-menu-item0').style.display = 'none';
			document.querySelector('.svg-menu-item3').style.display = 'none';


			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
						
			document.querySelector(`.svg-menu-item0-${nameid}`).addEventListener('click', function(e) {
            document.querySelector('.svg-custom-menu').style.display = 'none';
			var docids = [], locats=[], perso=[];

			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let sor = document.querySelector('[personsid="' + person + '"]').getAttribute('data-name');
			if(!(perso.includes(sor)))
				{
						perso.push(sor);
				}
			

			for (var val in documentData){
				if(documentData[val].name.includes(sor))
				{
					if(!(docids.includes(documentData[val])))
						docids.push(documentData[val]);
				}}
			}
			
			for(var i = 0; i<locs.split(',').length;i++)
			{
			loc = locs.split(',')[i]
			let tar = document.querySelector('[map-id="map' + loc + '"]').getAttribute('data-location');
			if(!(locats.includes(tar)))
				{
						locats.push(tar);
				}
			
			for (var val in documentData){
				if(documentData[val].location.includes(tar))
				{
					if(!(docids.includes(documentData[val])))
						docids.push(documentData[val]);
				}}
			}
	//		console.log(locats);
	//		console.log(perso);
	//		console.log(docids);
			
			for (var val in docids){	
					let content = docids[val].docText;
					let sid = docids[val].docId;
					for (var p in perso)
					{
						if(docids[val].name.includes(perso[p])){
							sor = perso[p];
							content = content.replace(sor, `<span class=highlighted-text>${sor}</span>`);
						}
					}
					for (var l in locats)
					{
						if(docids[val].location.includes(locats[l])){
							tar = locats[l];
							content = content.replace(tar, `<span class=highlighted-text>${tar}</span>`);
							if(tar == "New York City")
							{
								tar = "NYC"
								content = content.replace(tar, `<span class=highlighted-text>${tar}</span>`);
							}
							if(tar == "Virginia")
							{
								tar = "VA"
								content = content.replace(tar, `<span class=highlighted-text>${tar}</span>`);
							}
						}
					}
                  var note = `
                  <div class="reldoc note the-node" id='`+ sid +`' style="z-index: 999;">
                    <div class='close_note'>X</div>
                    <h3>`+ sid +`&nbsp;
					<label class="switch">
					  <input type="checkbox" id="movefixgm`+sid+`">
					  <span class="slider round"></span>
					</label></h3>
                    <p style="cursor:text;">
                      `+ content +`
                    </p>
                  </div>
                  `;
                  $("#board").append(note);
                  $(".note#" + sid).css('z-index',99).draggable({
                    containment: "#board",
                    grid: [5, 5],
                    cancel: "p"
                  });
				 
				 let x2Loc = parseFloat($('#' + sid).css('left').split('px')[0]) + $('#' + sid).find('.highlighted-text').position().left+5;
                 let y2Loc = parseFloat($('#' + sid).css('top').split('px')[0]) + $('#' + sid).find('.highlighted-text').position().top + 40;

                 ClusterGMToTextCollection.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "highlight-text",
					  ele:sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				  $('#' + sid).addClass('selectedGM');
					
				  connections4ct.push({ source: circele, sourceid:nameid,target: $('#' + sid),targetid:sid, boxElement: 'all-data-box' });
				  $('#' + sid).on('drag', function() {
                    ClusterGMToTextCollection = [];
                    connections4ct.forEach(conn => {
                      const ele = conn.source;
					let nameid = ele.getAttribute('clustergmid')
					let sid = conn.target[0].id;
					var circele = document.getElementById("cgmcircid"+nameid);

				if(detail == "false")
				{
					let domRect = circele.getBoundingClientRect();
					let radius = parseInt(circele.getAttribute('r'));
					var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
					var y1Loc = domRect.y+parseInt(radius/3);
				}
				else
				{
					let eleme = document.getElementById("cgmmid"+nameid);
					let domRect = eleme.getBoundingClientRect();
					let height = eleme.getAttribute('height');
					var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth;
					var y1Loc = domRect.y+parseInt(height/6);
				}
					
                      let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
                      let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

                      ClusterGMToTextCollection.push({
                        source : {
                          id: "clusterGM",
						  ele:nameid,
                          xOffset : x1Loc,
                          yOffset : y1Loc
                        },
                        target : {
                          id: "highlight-text",
						  ele:sid,
                          xOffset : x2Loc,
                          yOffset : y2Loc
                        }
                      });
                    })
                    drawPolyLineClusterGM(ClusterGMToTextCollection);
                  });
				drawPolyLineClusterGM(ClusterGMToTextCollection);
				}
			})
			
			document.querySelector(`.svg-menu-item1-${nameid}`).addEventListener('click', function(e) {
				
				document.querySelector('.svg-custom-menu').style.display = 'none';
				if(detail=="false")
				{
					document.getElementById("cgmm"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cgmg"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cgmmid"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cgmgid"+nameid).setAttribute('visibility', "visible");
					if(clicked=="true"){
						document.getElementById("cgmmid"+nameid).setAttribute('style', "fill: #006400");
						document.getElementById("cgmgid"+nameid).setAttribute('style', "fill: #006400");}
					else if (clickhist>0){
						document.getElementById("cgmmid"+nameid).setAttribute('style', "fill: #6495ed");
						document.getElementById("cgmgid"+nameid).setAttribute('style', "fill: #6495ed");
					}
					document.getElementById("cgmcircid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cgmcircid"+nameid).setAttribute('detailed', true);					
				}
				else
				{
					document.getElementById("cgmm"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cgmg"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cgmmid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cgmgid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cgmcircid"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cgmcircid"+nameid).setAttribute('detailed', false);	
					if(clicked=="true"){
					document.getElementById("cgmcircid"+nameid).setAttribute('style', "fill: #006400");
					document.getElementById("cgmcircid"+nameid).setAttribute('stroke', "#000000");}
					else if (clickhist>0){
						document.getElementById("cgmcircid"+nameid).setAttribute('style', "fill: #6495ed");
						document.getElementById("cgmcircid"+nameid).setAttribute('stroke', "#000000");
					}					
				}
				reDrawLines();
				})
				
			document.querySelector(`.svg-menu-item2-${nameid}`).addEventListener('click', function(e) {
				
				document.querySelector('.svg-custom-menu').style.display = 'none';
				
				if(ClusterGMdetail== false)
				{
					let temp1 = document.getElementsByClassName('rectagm');
					for(var i = 0; i < temp1.length; i++){temp1[i].setAttribute('visibility', "visible");}
					let temp2 = document.getElementsByClassName('rectbgm');
					for(var i = 0; i < temp2.length; i++){temp2[i].setAttribute('visibility', "visible");}
					let temp3 = document.getElementsByClassName('rectcgm');
					for(var i = 0; i < temp3.length; i++){temp3[i].setAttribute('visibility', "visible");}
					let temp4 = document.getElementsByClassName('rectdgm');
					for(var i = 0; i < temp4.length; i++){temp4[i].setAttribute('visibility', "visible");}
					let temp5 = document.getElementsByClassName('dotgm');
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('visibility', "hidden");}
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('detailed', true);}
					ClusterGMdetail=true;
				}
				else
				{
					let temp1 = document.getElementsByClassName('rectagm');
					for(var i = 0; i < temp1.length; i++){temp1[i].setAttribute('visibility', "hidden");}
					let temp2 = document.getElementsByClassName('rectbgm');
					for(var i = 0; i < temp2.length; i++){temp2[i].setAttribute('visibility', "hidden");}
					let temp3 = document.getElementsByClassName('rectcgm');
					for(var i = 0; i < temp3.length; i++){temp3[i].setAttribute('visibility', "hidden");}
					let temp4 = document.getElementsByClassName('rectdgm');
					for(var i = 0; i < temp4.length; i++){temp4[i].setAttribute('visibility', "hidden");}
					let temp5 = document.getElementsByClassName('dotgm');
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('visibility', "visible");}
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('detailed', false);}					
					ClusterGMdetail=false;
				}
				reDrawLines();
				})

			document.querySelector(`.svg-menu-item3-${nameid}`).addEventListener('click', function(e) {
            document.querySelector('.svg-custom-menu').style.display = 'none';
			
			let track = ['GraphMapCluster',nameid,1,new Date(),"submit"];
			tracker.push(track);
				
			var study = 1;
			if(study == 0){
									
			if(manualink==false)
			{
				manualinksource.push(circele);
				manualink=true;
			}
			else
			{
				ele2 = manualinksource[0];
				
				if(circele==ele2)
				{
					console.log('Error')
					
				}
				else
				{
				var domRect2 = ele2.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;	
				let sid = ele2.getAttribute('id');				
				
				ClusterGMToManCollection.push({
                    source : {
                      id: "clusterGM",
					  ele: ele,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "manual",
					  ele: sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				connections4cman.push({source:ele,target:ele2,tarid:sid,boxElement:'clusterGM'});
				drawPolyLineClusterGM(ClusterGMToManCollection);				
				
				manualink=false; manualinksource=[];
				}
			}
			}
			})

			document.querySelector(`.svg-menu-item4-${nameid}`).addEventListener('click', function(e) {
           
		   document.querySelector('.svg-custom-menu').style.display = 'none';
			
			let boardg = d3.select('#line-canvas');

			if (cloned == 'false'){
			
			boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "green")
                                .style("stroke-width", "2px")
								.attr("clicked","false")
								.attr('trail',false)
								.on("mouseover",cloneclick)
								.on("click",clonelclick)
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));
								
	
			let selectedesign = document.getElementById("lineguider").value;
			
			if(selectedesign == "design1"){

			boardg.append("circle")
                                .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'progcloneci'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "green")
                                .style("stroke-width", "1px")
								.attr('trail',false)
								.on("mouseup",cloneclick())
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));								

			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextci'+nameid;})
				.style("fill", "black")
				.text('0%');
			}
			else if(selectedesign == "design2"){
			boardg.append("rect")
                                .attr("width", 50)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclonere'+nameid;})
                                .style("fill", "grey")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
			boardg.append("rect")
                                .attr("width", 0)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclone2'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
								
			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc-38)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextre'+nameid;})
				.style("fill", "white")
				.text('0%');
			}
									
			circele.setAttribute('cloned','true');	
			}
			else
			{

				let el = document.getElementById('clone'+nameid);
				//console.log(el);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

			ele.setAttribute('cloned','false');	
			}
		  
		  var mpid,mgpid,scale=1;

		function dragged(d) {	

			var m = d3.mouse(this)
			//console.log(m);
			var x = document.getElementsByClassName("link-newcgmm "+nameid);
			var z = document.getElementsByClassName("link-newcgmg "+nameid);

			highlightline(x);
			highlightline(z);

					
			try{var clp = closestPoint(x[0],m);	mgpid='m'; mpid=x[0].getAttribute('id').slice(5);}
			catch{var clp = closestPoint(z[0],m);	mgpid='g';mpid=z[0].getAttribute('id').slice(5)}
									
			for(var i=0;i<x.length;i++)
			{
			let clp2 = closestPoint(x[i],m);			
			let pid = x[i].getAttribute('id').slice(5);		
			
			if(!(document.getElementById("trail"+nameid+'m'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'m'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "purple")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(x[i].getTotalLength()*scale)
				//console.log(dist)
				let chp = x[i].getPointAtLength(dist);
				//console.log(chp);
				let el = document.getElementById('trail'+nameid+'m'+pid);
				el.style.opacity = "0.4";
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid='m'
				}
			}

			for(var i=0;i<z.length;i++)
			{
			let clp2 = closestPoint(z[i],m);			
			let pid = z[i].getAttribute('id').slice(5);
			
			
			
			if(!(document.getElementById("trail"+nameid+'g'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'g'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "#0ca4ff")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(z[i].getTotalLength()*scale)
				let chp = z[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'g'+pid);
				el.style.opacity = "0.4";
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'g'
				}
			}
			
			//console.log(clp);
			d3.select("#clone"+nameid).attr("cx", clp[0]).attr("cy",clp[1]);
			try{document.getElementById("trail"+nameid+mgpid+mpid).style.opacity = "0.01";}
			catch(e){console.log('k');}
	
			let selectedesign = document.getElementById("lineguider").value;
		
			if(selectedesign == "design1"){
			//	document.getElementById('progcloneci'+nameid).addEventListener("mouseup",cloneclick())
			
			document.getElementById('progcloneci'+nameid).setAttribute('cx',clp[0]);
			document.getElementById('progcloneci'+nameid).setAttribute('cy',clp[1]);
			document.getElementById('progtextci'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextci'+nameid).setAttribute('y',clp[1]);				
			document.getElementById('progcloneci'+nameid).setAttribute('r',scale*25);
			document.getElementById('progtextci'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}
			else if(selectedesign == "design2")
			{
			document.getElementById('progclone2'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclone2'+nameid).setAttribute('y',clp[1]-45);				
			document.getElementById('progclonere'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclonere'+nameid).setAttribute('y',clp[1]-45);			
			document.getElementById('progtextre'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextre'+nameid).setAttribute('y',clp[1]-38);				
			document.getElementById('progclone2'+nameid).setAttribute('width',scale*50);
			document.getElementById('progtextre'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}
			
			
			
			if(mgpid=='m'){
				let path = document.getElementsByClassName("link-newcgmm "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';	
		var length = path.getTotalLength();			

			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] > path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}				
				
			}
			else{
			if(mgpid=='g'){
				let path = document.getElementsByClassName("link-newcgmg "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';	
						var length = path.getTotalLength();			

			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			let circ = boardg.append('g');			
			circ.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}
			}}
			
			
		//reDrawLines();	
	}


		var duprecords = [];
		function createdup(path){
			
				if(duprecords.includes(path.getAttribute('id')))
					return;
				
				duprecords.push(path.getAttribute('id'));
				
				for(var ii=0;ii<path.getTotalLength();ii++)
				{
					
				boardg.append("circle")
                              .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", path.getPointAtLength(ii).x)
                                .attr("cy", path.getPointAtLength(ii).y)
								.attr("id",function(d,i){return 'dupcirc'+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2);})
								.attr("class","dupcirc")
                                .style("fill", "none")
                                .style("stroke", "none")
				
				}
				return 0;
			
		}
	
		function getDistance(x1, y1, x2, y2){
			let y = x2 - x1;
			let x = y2 - y1;
			
			return Math.sqrt(x * x + y * y);
		}
		
		function closestPoint(pathNode, point) {
			  var pathLength = pathNode.getTotalLength(),
				  precision = 8,
				  best,
				  bestLength,
				  bestDistance = Infinity;

			  // linear scan for coarse approximation
			  for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {
				if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {
				  best = scan, bestLength = scanLength, bestDistance = scanDistance;
				}
			  }

			  // binary search for precise estimate
			  precision /= 2;
			  while (precision > 0.5) {
				var before,
					after,
					beforeLength,
					afterLength,
					beforeDistance,
					afterDistance;
				if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {
				  best = before, bestLength = beforeLength, bestDistance = beforeDistance;
				} else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {
				  best = after, bestLength = afterLength, bestDistance = afterDistance;
				} else {
				  precision /= 2;
				}
			  }

			  best = [best.x, best.y];
			  best.distance = Math.sqrt(bestDistance);
			  return best;

			  function distance2(p) {
				var dx = p.x - point[0],
					dy = p.y - point[1];
				return dx * dx + dy * dy;
			  }}
	
		function dragended(d){
				
			var x = document.getElementsByClassName("link-newcgmm "+nameid);
			var z = document.getElementsByClassName("link-newcgmg "+nameid);

			unhighlightline(x);
			unhighlightline(z);
			
			let trailcirc = document.getElementsByClassName("trail"+nameid)
			for(var j=0;j<trailcirc.length;j++){
			//	trailcirc[j].style.display='none';
			}
			
		}
	
		function dragstart(d){

			if(document.getElementsByClassName("trail"+nameid))
			{
				let trailcirc = document.getElementsByClassName("trail"+nameid)
				for(var j=0;j<trailcirc.length;j++){
			//		trailcirc[j].style.display='block';
				}		
			}
		}
	
		function highlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'red';
				
			}			
		}
		
		function unhighlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'rgb(149, 199, 244';
				
			}			
		}	
		
		function cloneclick(){
			
			if(event.button==2){
				
				const rightCustomMenu = document.querySelector('.svg-custom-menu');
		
				rightCustomMenu.innerHTML = `<li class="svg-menu-item-${nameid} svg-menu-item">Delete Clone</li>`
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
		
		document.querySelector(`.svg-menu-item-${nameid}`).addEventListener('click', function(e) {
			
	   document.querySelector('.svg-custom-menu').style.display = 'none';
	
				let el = document.getElementById('clone'+nameid);
			el.remove();
		})
				
			}
			
		}
	
		function clonelclick(){
			var dates = $('[id^="trail'+nameid+'"]');
			if(this.getAttribute('clicked')=="false"){	
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "hidden";
			this.setAttribute('clicked',"true");
			}}
			else{
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "visible";
			this.setAttribute('clicked',"false");}
			}
		}
		
	
	
	})
		  
			document.querySelector(`.svg-menu-item5-${nameid}`).addEventListener('click', function(e) {
			
			document.querySelector('.svg-custom-menu').style.display = 'none';

			let boardg = d3.select('#line-canvas');

			if (cloned == 'false'){
			let targetCircle = boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "blue")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.call(d3.drag()
								.on("drag", draggedv));
								
			circele.setAttribute('cloned','true');	
			
			 
			let tcirc = document.getElementById('clone'+nameid);
			let x1Loct = parseFloat(tcirc.getAttribute("cx"));
			let y1Loct = parseFloat(tcirc.getAttribute("cy"));
			
			if(document.querySelector('.right .all-data-box').style.display == 'block')												///connect to graph
			{			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			domRect = tar.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect.y+5;
			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}


			if(document.querySelector('.right .bubblemap-box').style.display == 'block')											//connect to map
			{			
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			let tar = document.querySelector('[map-id="map' + loc + '"]');

			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;	

			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}			

				drawPolyLineClusterGM(ClusterGMCloneToGraph);

			
			function draggedv(d){				
				d3.select(this).attr("cx", d3.event.x).attr("cy", d3.event.y);
				reDrawLines();
			}
				
			}
			else
			{
				let el = document.getElementById('clone'+nameid);
				el.remove(); 
				ClusterGMCloneToGraph=[],connections4cgclone=[]
			document.querySelectorAll('.link-newcgmclone').forEach(ele => {
				  ele.remove();
			  });
			
				circele.setAttribute('cloned','false');	
			}
			
			})

		  }
		  }
		else
			{
	
			//if (d3.event.defaultPrevented) return; // click suppressed
			  
			for (var i = ClusterGMToGraph.length - 1; i >= 0; --i) {
			  if (ClusterGMToGraph[i].source.ele == nameid) {
				ClusterGMToGraph.splice(i, 1); 
			  }}
			  
			for (var i = ClusterGMToMap.length - 1; i >= 0; --i) {
			  if (ClusterGMToMap[i].source.ele == nameid) {
				ClusterGMToMap.splice(i, 1); 
			  }} 
			  
			for (var i = connections4cg.length - 1; i >= 0; --i) {
			  if (connections4cg[i].source == circele) {
				connections4cg.splice(i, 1); 
			  }}
			  
			for (var i = connections4cm.length - 1; i >= 0; --i) {
			  if (connections4cm[i].source == circele) {
				connections4cm.splice(i, 1); 
			  }}
			  
			document.querySelectorAll('.link-newcgmg').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newcgmm').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			
			
			if(circele.getAttribute('clickhist') > 0)
			{
			if(detail=="false")
			{
				  circele.setAttribute("style", "fill: #a1c9fb");
				  circele.setAttribute("stroke","#000000")

			}
			else
			{
				  document.getElementById('cgmgid'+nameid).setAttribute("style","fill: #a1c9fb");
				  document.getElementById('cgmmid'+nameid).setAttribute("style","fill: #a1c9fb");
			}
			}
			
			if(clicked== "false"){
				d3.select(this).style("stroke","black");
			
			if(document.querySelector('.right .all-data-box').style.display == 'block')												///connect to graph
			{			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))+1);		
			if(tar.getAttribute('clicked')=="false"){				
			let bright = increase_brightness('#ff7f50',parseInt(tar.getAttribute('selecthist')*10));
			tar.setAttribute('style', "fill: "+bright);}			
		//	document.getElementById('pername'+person).setAttribute('fill','red');			
			domRect = tar.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect.y+5;
				  
			if(detail=="false")
			{
			ClusterGMToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "graph",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else
			{
			ClusterGMToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Locg,
                      yOffset : y1Locg
                    },
                    target : {
                      id: "graph",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			connections4cg.push({ source: circele, target: tar, boxElement: 'all-data-box' });
			}
			
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
				let radius = parseInt(circele.getAttribute('r'));
				circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")

			}
			else
			{
				document.getElementById("cgmmid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cgmgid"+nameid).setAttribute("style","fill: #006400");
			}
			
			hist = parseInt(circele.getAttribute('clickhist'))+1;
			circele.setAttribute('clickhist', hist);
			circele.setAttribute('clicked', true);
			if(!(document.getElementById("movefixgraph").checked))				
				$('.all-data-box').addClass('selectedGM');		
			if(selectedesign!="design"){			
			drawPolyLineClusterGM(ClusterGMToGraph);}
			}
			
			if(document.querySelector('.right .bubblemap-box').style.display == 'block')											//connect to map
			{
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
				let tar = document.querySelector('[map-id="map' + loc + '"]');
	
				tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))+1);		
				if(tar.getAttribute('clicked')=="false"){				
				let bright = increase_brightness('#ff7f50',parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);}		
				domRect2 = tar.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;	
			if(detail=="false")
			{
			ClusterGMToMap.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "bubble-map",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else
			{
			ClusterGMToMap.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Locm,
                      yOffset : y1Locm
                    },
                    target : {
                      id: "bubble-map",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			connections4cm.push({ source: circele, target: tar, boxElement: 'bubblemap-box' });
			}
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
				let radius = parseInt(circele.getAttribute('r'));
				//circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")

			}
			else
			{
				document.getElementById("cgmmid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cgmgid"+nameid).setAttribute("style","fill: #006400");
			}
			
			hist = parseInt(circele.getAttribute('clickhist'))+1;
			circele.setAttribute('clickhist', hist);
			circele.setAttribute('clicked', true);
			if(!(document.getElementById("movefixmap").checked))							
				$('.bubblemap-box').addClass('selectedGM');	
			if(selectedesign!="design"){			
			drawPolyLineClusterGM(ClusterGMToMap);}
			}
			}
			
			else
			{
				d3.select(this).style("stroke","none");
	
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))-1);
			}
			
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			let tar = document.querySelector('[map-id="map' + loc + '"]');
			tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))-1);	}			
	
				if(ClusterGMToGraph.length==0)
					$('.all-data-box').removeClass('selectedGM');
				if(ClusterGMToMap.length==0)
					$('.bubblemap-box').removeClass('selectedGM');
				if(cloned=="true"){
				
				let el = document.getElementById('clone'+nameid);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
			let selectedesign = document.getElementById("lineguider").value;
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

				ele.setAttribute('cloned','false');}			
				
				let found = 0;
					if(bubbleToGMCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToGMCollection.length;jk++){
						if(nameid == bubbleToGMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(GraphToGMCollection.length != 0){
						for(var jk = 0 ;jk<GraphToGMCollection.length;jk++){
						if(nameid == GraphToGMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToGM.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGM.length;jk++){
						if(nameid == ClusterChainToGM[jk].target.ele.id.slice(9)){
							found=1;}}}						
					if(found==1){		
						d3.select(this).style("fill", "#ff7f50");
					}						

			circele.setAttribute('clicked', false);
			}
			}
			}
 
		var abc1 = $('[id^="dupcirc"]');
for(let iii = 0;iii<abc1.length;iii++){
		abc1[iii].parentNode.appendChild(abc1[iii]);
}

		var abc2 = $('[id^="clone"]');
for(let iii = 0;iii<abc2.length;iii++){
		abc2[iii].parentNode.appendChild(abc2[iii]);
}

		var abc4 = $('[id^="progcloneci"]');
for(let iii = 0;iii<abc4.length;iii++){
		abc4[iii].parentNode.appendChild(abc4[iii]);
}		
		var abc3 = $('[id^="progtextci"]');
for(let iii = 0;iii<abc3.length;iii++){
		abc3[iii].parentNode.appendChild(abc3[iii]);
}
		var abc5 = $('[id^="progress"]');
for(let iii = 0;iii<abc5.length;iii++){
		abc5[iii].parentNode.appendChild(abc5[iii]);
}
 }
		
	function ClusterGMhover() {																			//handle hover event for graph map cluster
		
		    let $event = event;
            let ele = $event.target;
			let nameid = ele.getAttribute('clustergmid');

			startimecgm = new Date();
	
			var circele = document.getElementById("cgmcircid"+nameid);
			let clicked = circele.getAttribute('clicked');
			let detail = circele.getAttribute('detailed');
			let persons = circele.getAttribute('person');
			let locs = circele.getAttribute('map');
			let selectedesign = document.getElementById("lineguider").value;
			
			//if(clicked != "true"){
				
			if(detail == "false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cgmgid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Locg = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Locg = domRect.y+parseInt(height/6);
				
				let eleme2 = document.getElementById("cgmmid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height2 = eleme2.getAttribute('height');
				var x1Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Locm = domRect2.y+parseInt(height2/6);
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
				var y1Loc = domRect2.y+parseInt(height2/6);

			}
			
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			
			if(document.querySelector('.right .bubblemap-box').style.display == 'block')						//map view connection when hover
			{
				let tar = document.querySelector('[map-id="map' + loc + '"]');
				if(tar.getAttribute('clicked')=="false"){				
				tar.setAttribute('style', "fill: #ff7f50")}
				domRect2 = tar.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;				
			
			if(detail == "false"){
			ClusterGMTempCollection.push({
                    source : {
                      id: "clusterGM",
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "bubble-map",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else{
				ClusterGMTempCollection.push({
                    source : {
                      id: "clusterGM",
                      xOffset : x1Locm,
                      yOffset : y1Locm
                    },
                    target : {
                      id: "bubble-map",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			}
			}
			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')

			if(document.querySelector('.right .all-data-box').style.display == 'block')							//graph view connection when hover
			{
			if(tar.getAttribute('clicked')=="false"){				
			tar.setAttribute('style', "fill: #ff7f50")}
			document.getElementById('pername'+person).setAttribute('fill','red');				

			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;
			
			if(detail == "false"){
			ClusterGMTempCollection.push({
                    source : {
                      id: "clusterGM",
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "bubble-map",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else{
				ClusterGMTempCollection.push({
                    source : {
                      id: "clusterGM",
                      xOffset : x1Locg,
                      yOffset : y1Locg
                    },
                    target : {
                      id: "bubble-map",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}			  			  
			}
			}
			
			if(detail == "false")
			{
			if(clicked == "false"){
			if(d3.select(this).style("fill")=="rgb(161, 201, 251)"){
				d3.select(this).style("fill", "#485D5E");
			}
			}}
					
			//let radius = parseInt(circele.getAttribute('r'))+5;
			//circele.setAttribute("r", radius)
			
			else
			{
				document.getElementById("cgmmid"+nameid).setAttribute("style","fill: #485D5E");
				document.getElementById("cgmgid"+nameid).setAttribute("style","fill: #485D5E");
			}
			if(selectedesign!="design"){
			drawPolyLineClusterGM(ClusterGMTempCollection);}
			//}
		}

    function ClusterGMout(){																		//handle out event for graph map cluster
			let $event = event;
            let ele = $event.target;
			let nameid = ele.getAttribute('clustergmid');
			var circele = document.getElementById("cgmcircid"+nameid);
			let clickhist = circele.getAttribute('clickhist');

			var circele = document.getElementById("cgmcircid"+nameid);
			let clicked = circele.getAttribute('clicked');
			let detail = circele.getAttribute('detailed');
			let persons = circele.getAttribute('person');
			let locs = circele.getAttribute('map');

			
			let track = ["GraphMapCluster",nameid,startimecgm,new Date,"hover"];
			
			tracker.push(track);

			if(clicked == "false")
			{

			if(detail=="false")
			{
				if(d3.select(this).style("fill")=="rgb(72, 93, 94)")
				{
					circele.setAttribute("stroke","#000000");
					d3.select(this).style("fill", "#a1c9fb");					
				}
			}
			else
			{
				if(document.getElementById("cgmmid"+nameid).getAttribute("style") == "fill: #485D5E")
				{
				if(clickhist==0)
				{
				document.getElementById("cgmmid"+nameid).setAttribute("style","fill: #a1c9fb");
				document.getElementById("cgmgid"+nameid).setAttribute("style","fill: #a1c9fb");}
				else
				{
				document.getElementById("cgmmid"+nameid).setAttribute("style","fill: #a1c9fb");
				document.getElementById("cgmgid"+nameid).setAttribute("style","fill: #a1c9fb");
				}}
			}
			}
	
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			
			if(document.querySelector('.right .bubblemap-box').style.display == 'block')						//map view connection when hover
			{
					let found = 0;
					if(GraphToMapCollection.length != 0){
						for(var jk = 0 ;jk<GraphToMapCollection.length;jk++){
						if(loc == GraphToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToMapCollection.length != 0){
						for(var jk = 0 ;jk<OrgToMapCollection.length;jk++){
						if(loc == OrgToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToMap.length != 0){
						for(var jk = 0 ;jk<ClusterChainToMap.length;jk++){
						if(loc == ClusterChainToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterGMToMap.length;jk++){
						if(loc == ClusterGMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterOMToMap.length;jk++){
						if(loc == ClusterOMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}							
					if(found==0){				
				let tar = document.querySelector('[map-id="map' + loc + '"]');
				if(tar.getAttribute('clicked')=="true"){tar.setAttribute('style', "fill: #006400")}
				else{												
				tar.setAttribute('style', "fill: #6495ed")
			}}}}
			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];

			if(document.querySelector('.right .all-data-box').style.display == 'block')							//graph view connection when hover
			{	
					let found = 0;
					if(bubbleToGraphCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToGraphCollection.length;jk++){
						if(person == bubbleToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToGraphCollection.length != 0){
						for(var jk = 0 ;jk<OrgToGraphCollection.length;jk++){
						if(person == OrgToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGraph.length;jk++){
						if(person == ClusterChainToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGMToGraph.length;jk++){
						if(person == ClusterGMToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGOToGraph.length;jk++){
						if(person == ClusterGOToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}							
					if(found==0){	
				let tar = document.querySelector('[personsid="' + person + '"]')
				if(tar.getAttribute('clicked')=="true"){
					tar.setAttribute('style', "fill: #006400");
				document.getElementById('pername'+person).setAttribute('fill','red');					
					}
				else{											
				tar.setAttribute('style', "fill: #6495ed");
				document.getElementById('pername'+person).setAttribute('fill','black');

			}}}}
			
		ClusterGMTempCollection = [];
		
		document.querySelectorAll('.link-newcgmtemp').forEach(ele => {
              ele.remove();
            });
	}
	  		
	function ClusterGOdata() {																			//create scatter plot for graph org cluster view
		var margin = {top: 10, right: 10, bottom: 10, left: 10},
		width = 1200 - margin.left - margin.right,
		height = 1200 - margin.top - margin.bottom;
			  
			 body = d3.select(".clusterGO-data-box").style("width", '450px').style("height",'450px')
					.classed("svg-container", true);
					
					
			 var svg = body.append("svg").attr("preserveAspectRatio", "xMinYMin meet").attr("id","svgclustergo")
										.attr("viewBox", "0 0 1200 1200").attr("transform","translate(" + margin.left + "," + margin.top + ")");

var xValue = function(d) { return d.x;};
let   x = d3.scaleLinear()
    .range([ 0, width ]);
let	xMap = function(d) { return x(xValue(d))-160;};
let	xMap0 = function(d) { return x(xValue(d))-220;};
let	xMap01 = function(d) { return x(xValue(d))-160;};

var yValue = function(d) { return d["y"];};
let  y = d3.scaleLinear()
    .range([ height, 0]);

let	yMap = function(d) { return y(yValue(d))+50;};
let	yMap0 = function(d) { return y(yValue(d))+20;};
let	yMap01 = function(d) { return y(yValue(d))+20+(60-(d['person'].split(',').length * 12));};
	
//	var nopoints = document.getElementById('nodata').value;
	
  d3.csv("./cluster-data/points50/go"+connsel+"_"+dataselid+".csv", function(data){
  
  x.domain([d3.min(data, xValue)-1.0, d3.max(data, xValue)+1]);
  y.domain([d3.min(data, yValue)-1.0, d3.max(data, yValue)+1]);
  
	
	svg.selectAll(".dotgo")
      .data(data)
	.enter().append("circle")
      .attr("class", "dotgo")
      .attr("r", function(d){return parseInt(d['person'].split(',').length)*7+parseInt(d['organize'].split(',').length)*7})
      .attr("cx", xMap)
      .attr("cy", yMap)
	  .attr('person',function(d){return d['person'];})
	  .attr('org',function(d){return d['organize'];})
	  .attr('clustergoid',function(d,i){return (i+1);})
	  .attr('id',function(d,i){return "cgocircid"+(i+1);})	
	  .style("fill", '#a1c9fb')
	  .attr("clickhist",0)
	  .attr('clicked',false)
	  .attr('cloned',false)	  
	  .attr("visibility", "visible")
	  .attr('detailed',false)
	  .style("stroke", "black")
	  .attr("stroke-width",2)
	  .on("mouseover", ClusterGOhover)
	  .on("mouseout",ClusterGOout)
	  .on('mouseup',ClusterGOclick);		  
		  
		svg.selectAll(".rectcgo")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectcgo")
		  .attr('width', 60)
		  .attr('height', function(d){return d['person'].split(',').length * 12;})
		  .attr("x", xMap0)
		  .attr("y", yMap01)
		.style("fill", '#a1c9fb')
			  .attr("visibility", "hidden")
		.attr('stroke', '#000000')
		.attr('stroke-width', '1')
			.attr('clustergoid',function(d,i){return (i+1);})	
		  .attr('id',function(d,i){return "cgogid"+(i+1);});

		  
	svg.selectAll(".rectdgo")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectdgo")
		  .attr('width', 60)
		  .attr('height', function(d){return d['organize'].split(',').length * 10;})
		  .attr("x", xMap01)
		  .attr("y", function(d) { return y(yValue(d))+20+60-(d['organize'].split(',').length * 10);})					//creating nodes detailed view
		.style("fill", '#a1c9fb')
		.attr('stroke', '#000000')
		.attr('stroke-width', '1')
		  .attr("visibility", "hidden")
		  .attr('clustergoid',function(d,i){return (i+1);})	
		  .attr('id',function(d,i){return "cgooid"+(i+1);});		  
		  
	svg.selectAll(".rectago")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectago")
		  .attr('width', 60)
		  .attr('height', 60)
		  .attr("x", xMap0)
		  .attr("y", yMap0)
			.attr("fill-opacity", 0)
			.attr('stroke', '#000000')
			.attr('stroke-width', '1')
			  .attr("visibility", "hidden")
		  .attr('clustergoid',function(d,i){return (i+1);})
		  .attr('id',function(d,i){return "cgog"+(i+1);})		  
		  .on("mouseover", ClusterGOhover)
		  .on("mouseout",ClusterGOout)
		  .on('mouseup',ClusterGOclick);	
	  	
	svg.selectAll(".rectbgo")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectbgo")
		  .attr('width', 60)
		  .attr('height', 60)
		  .attr("x", xMap01)
		  .attr("y", yMap0)
			.attr("fill-opacity", 0)
			.attr('stroke', '#000000')
			.attr('stroke-width', '1')
			  .attr("visibility", "hidden")
		  .attr('clustergoid',function(d,i){return (i+1);})
		  .attr('id',function(d,i){return "cgoo"+(i+1);})
		  .on("mouseover", ClusterGOhover)
		  .on("mouseout",ClusterGOout)
		  .on('mouseup',ClusterGOclick);
        });


				var selectedGO;
				var draggableOptionsGO = {
					start: function(event, ui) {
						//get all selected...
						if (ui.helper.hasClass('selectedGO')) selectedGO = $('div.selectedGO');
						else {
							selectedGO = $(ui.helper);
							$('div.selectedGO').removeClass('selectedGO')
						}
					},
					drag: function(event, ui) {
						var currentLoc = $(this).position();
						var prevLoc = $(this).data('prevLoc');
						if (!prevLoc) {
							prevLoc = ui.originalPosition;
						}

						var offsetLeft = currentLoc.left-prevLoc.left;
						var offsetTop = currentLoc.top-prevLoc.top;

						moveSelectedGO(offsetLeft, offsetTop);
						$(this).data('prevLoc', currentLoc);
					}
				};

				function moveSelectedGO(ol, ot){
					//console.log("moving to: " + ol + ":" + ot);
					selectedGO.each(function(){
						$this =$(this);
						var p = $this.position();
						var l = p.left;
						var t = p.top;
						//console.log({id: $this.attr('id'), l: l, t: t});
						$this.css('left', l+ol);
						$this.css('top', t+ot);
					})}
			  
			  $('.clusterGO-data-box').draggable(draggableOptionsGO);
			  $('.clusterGO-data-box').addClass('selectedGO');

	$('.clusterGO-data-box').on('drag', reDrawLines);
		if(document.getElementById("movefixGO").checked){
			document.getElementById('clusterGO').ondragstart = function() { return false; };
			$('.clusterGO-data-box').removeClass('selectedorg')
			$('.clusterGO-data-box').removeClass('selectedgraph')
			$('.clusterGO-data-box').removeClass('selectedchain')				
		}
		else{
			document.getElementById('clusterGO').ondragstart = function() { return true; };
				if(GraphToGOCollection.length>0)
					$('.clusterGO-data-box').addClass('selectedgraph')
				if(OrgToGOCollection.length==0)
					$('.clusterGO-data-box').addClass('selectedorg')
				if(ClusterChainToGO.length==0)					
					$('.clusterGO-data-box').addClass('selectedchain')				
		};
	}
		  	  
	let ClusterGOToGraph=[],ClusterGOToOrg=[],ClusterGOToTextCollection=[],connections5cg =[],connections5co=[],connections5ct=[],
	ClusterGOTempCollection=[],ClusterGOToManCollection=[],connections5cman=[],ClusterGOdetail=false;

	function ClusterGOclick(){																		//handle click event for graph org cluster
	if(window.getSelection) {
          let selection = window.getSelection();
		    let $event = event;
            let ele = $event.target;
			var nameid = ele.getAttribute('clustergoid');
			
			var circele = document.getElementById("cgocircid"+nameid);
			var clicked = circele.getAttribute('clicked');
			var clickhist = circele.getAttribute('clickhist');
			var detail = circele.getAttribute('detailed');
			var persons = circele.getAttribute('person');
			var orgs = circele.getAttribute('org');
			var cloned = circele.getAttribute('cloned');
			let selectedesign = document.getElementById("lineguider").value;

			let track = ['GraphOrgCluster',circele,1,new Date(),"click"];
			tracker.push(track);

			if(detail=="false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cgogid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Locg = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Locg = domRect.y+parseInt(height/7);
				
				let eleme2 = document.getElementById("cgooid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height2 = eleme2.getAttribute('height');
				let width2 = eleme2.getAttribute('width');
				var x1Loco = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/6);
				var y1Loco = domRect2.y+parseInt(height2/6);
				
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
				var y1Loc = domRect.y+parseInt(height/7);

			}
		  
		  if(event.button === 2) {																//right click events for cluster go view
	if(clicked == "true"){

			const rightCustomMenu = document.querySelector('.svg-custom-menu');
			if(detail=="false" && manualink==false)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item0">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item1">View Summary</li><li class="svg-menu-item2-${nameid} svg-menu-item2">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item3">Link From This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
            else if(detail != "false" && manualink==true)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">Show Compact View</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link To This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
			else if(detail == "false" && manualink==true)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">View Summary</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link To This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
			else if(detail != "false" && manualink==false)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">Show Compact View</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link From This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`


			document.querySelector('.svg-menu-item5').style.display = 'none';
			document.querySelector('.svg-menu-item2').style.display = 'none';
			document.querySelector('.svg-menu-item1').style.display = 'none';
			document.querySelector('.svg-menu-item0').style.display = 'none';
			document.querySelector('.svg-menu-item3').style.display = 'none';
			
			
			
            rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
			
			document.querySelector(`.svg-menu-item0-${nameid}`).addEventListener('click', function(e) {
            document.querySelector('.svg-custom-menu').style.display = 'none';
			var docids = [], organ=[], perso=[];
			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let sor = document.querySelector('[personsid="' + person + '"]').getAttribute('data-name');
			if(!(perso.includes(sor)))
				{
						perso.push(sor);
				}
				
			for (var val in documentData){
				if(documentData[val].name.includes(sor))
				{
					if(!(docids.includes(documentData[val])))
						docids.push(documentData[val]);
				}}
			}
			
			for(var i = 0; i<orgs.split(',').length;i++)
			{
			org = orgs.split(',')[i]
			let tar = document.querySelector('[barid="' + org + '"]').getAttribute('orgname');
			
			if(!(organ.includes(tar)))
				{
						organ.push(tar);
				}
			
			for (var val in documentData){
				if(documentData[val].organization.includes(tar))
				{
					if(!(docids.includes(documentData[val])))
						docids.push(documentData[val]);
				}}
			}
			
			for (var val in docids){	

					let content = docids[val].docText;
					let sid = docids[val].docId;
					
					for (var p in perso)
					{
						if(docids[val].name.includes(perso[p])){
							sor = perso[p];
							content = content.replace(sor, `<span class=highlighted-text>${sor}</span>`);
						}
					}
					for (var o in organ)
					{
						if(docids[val].organization.includes(organ[o])){
							tar = organ[o];
							content = content.replace(tar, `<span class=highlighted-text>${tar}</span>`);
						}
					}
                  var note = `
                  <div class="reldoc note the-node" id='`+ sid +`' style="z-index: 999;">
                    <div class='close_note'>X</div>
                    <h3>`+ sid +`&nbsp;
					<label class="switch">
					  <input type="checkbox" id="movefixgo`+sid+`">
					  <span class="slider round"></span>
					</label></h3>
                    <p style="cursor:text;">
                      `+ content +`
                    </p>
                  </div>
                  `;
                  $("#board").append(note);
                  $(".note#" + sid).css('z-index',99).draggable({
                    containment: "#board",
                    grid: [5, 5],
                    cancel: "p"
                  });
				 
				 let x2Loc = parseFloat($('#' + sid).css('left').split('px')[0]) + $('#' + sid).find('.highlighted-text').position().left+5;
                  let y2Loc = parseFloat($('#' + sid).css('top').split('px')[0]) + $('#' + sid).find('.highlighted-text').position().top + 40;

                  ClusterGOToTextCollection.push({
                    source : {
                      id: "clusterGO",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "highlight-text",
					  ele:sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				 $('#' + sid).addClass('selectedGO');

                  connections5ct.push({ source: circele, sourceid:nameid,target: $('#' + sid),targetid:sid, boxElement: 'all-data-box' });
				  $('#' + sid).on('drag', function() {
                    ClusterGOToTextCollection = [];
                    connections5ct.forEach(conn => {
                      const ele = conn.source;
					let nameid = ele.getAttribute('clustergoid')
					let sid = conn.target[0].id;

					var circele = document.getElementById("cgocircid"+nameid);

					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y1Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme = document.getElementById("cgooid"+nameid);
						let domRect = eleme.getBoundingClientRect();
						let height = eleme.getAttribute('height');
						var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth;
						var y1Loc = domRect.y+parseInt(height/6);
					}

                      let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
                      let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

                      ClusterGOToTextCollection.push({
                        source : {
                          id: "clusterGO",
						  ele:nameid,
                          xOffset : x1Loc,
                          yOffset : y1Loc
                        },
                        target : {
                          id: "highlight-text",
						  ele:sid,
                          xOffset : x2Loc,
                          yOffset : y2Loc
                        }
                      });
                    })
                    drawPolyLineClusterGO(ClusterGOToTextCollection);
                  });
				  drawPolyLineClusterGO(ClusterGOToTextCollection);
				  }
			})
						
			document.querySelector(`.svg-menu-item1-${nameid}`).addEventListener('click', function(e) {
				
				document.querySelector('.svg-custom-menu').style.display = 'none';
				if(detail=="false")
				{
					document.getElementById("cgoo"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cgog"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cgooid"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cgogid"+nameid).setAttribute('visibility', "visible");
					if(clicked=="true"){
						document.getElementById("cgogid"+nameid).setAttribute('style', "fill: #006400");
						document.getElementById("cgooid"+nameid).setAttribute('style', "fill: #006400");}
					else if (clickhist>0){
						document.getElementById("cgogid"+nameid).setAttribute('style', "fill: #6495ed");
						document.getElementById("cgooid"+nameid).setAttribute('style', "fill: #6495ed");
					}
					document.getElementById("cgocircid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cgocircid"+nameid).setAttribute('detailed', true);					
				}
				else
				{
					document.getElementById("cgog"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cgoo"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cgogid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cgooid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cgocircid"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cgocircid"+nameid).setAttribute('detailed', false);	
					if(clicked=="true"){
					document.getElementById("cgocircid"+nameid).setAttribute('style', "fill: #006400");
					document.getElementById("cgocircid"+nameid).setAttribute('stroke', "#000000");}
					else if (clickhist>0){
						document.getElementById("cgocircid"+nameid).setAttribute('style', "fill: #6495ed");
						document.getElementById("cgocircid"+nameid).setAttribute('stroke', "#000000");
					}					
				}
				reDrawLines();
				})
				
			document.querySelector(`.svg-menu-item2-${nameid}`).addEventListener('click', function(e) {
				
				document.querySelector('.svg-custom-menu').style.display = 'none';
				
				if(ClusterGOdetail== false)
				{
					let temp1 = document.getElementsByClassName('rectago');
					for(var i = 0; i < temp1.length; i++){temp1[i].setAttribute('visibility', "visible");}
					let temp2 = document.getElementsByClassName('rectbgo');
					for(var i = 0; i < temp2.length; i++){temp2[i].setAttribute('visibility', "visible");}
					let temp3 = document.getElementsByClassName('rectcgo');
					for(var i = 0; i < temp3.length; i++){temp3[i].setAttribute('visibility', "visible");}
					let temp4 = document.getElementsByClassName('rectdgo');
					for(var i = 0; i < temp4.length; i++){temp4[i].setAttribute('visibility', "visible");}
					let temp5 = document.getElementsByClassName('dotgo');
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('visibility', "hidden");}
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('detailed', true);}
					ClusterGOdetail=true;
				}
				else
				{
					let temp1 = document.getElementsByClassName('rectago');
					for(var i = 0; i < temp1.length; i++){temp1[i].setAttribute('visibility', "hidden");}
					let temp2 = document.getElementsByClassName('rectbgo');
					for(var i = 0; i < temp2.length; i++){temp2[i].setAttribute('visibility', "hidden");}
					let temp3 = document.getElementsByClassName('rectcgo');
					for(var i = 0; i < temp3.length; i++){temp3[i].setAttribute('visibility', "hidden");}
					let temp4 = document.getElementsByClassName('rectdgo');
					for(var i = 0; i < temp4.length; i++){temp4[i].setAttribute('visibility', "hidden");}
					let temp5 = document.getElementsByClassName('dotgo');
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('visibility', "visible");}
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('detailed', false);}					
					ClusterGOdetail=false;
				}
				reDrawLines();
		  })
		  
			document.querySelector(`.svg-menu-item3-${nameid}`).addEventListener('click', function(e) {
              document.querySelector('.svg-custom-menu').style.display = 'none';
			let track = ['GraphOrgCluster',circele,1,new Date(),"submit"];
			tracker.push(track);
				
			var study = 1;
			if(study == 0){
								
			if(manualink==false)
			{
				manualinksource.push(circele);
				manualink=true;
			}
			else
			{
				ele2 = manualinksource[0];
				
				if(circele==ele2)
				{
					console.log('Error')
					
				}
				else
				{
				var domRect2 = ele2.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;			
				let sid = ele2.getAttribute('id');				
				
				ClusterGOToManCollection.push({
                    source : {
                      id: "clusterGO",
					  ele: ele,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "manual",
					  ele: sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				connections5cman.push({source:ele,target:ele2,tarid:sid,boxElement:'clusterGO'});
				drawPolyLineClusterGO(ClusterGOToManCollection);				
				
				manualink=false; manualinksource=[];
				}
			}
			}
			})				
		  		  
			document.querySelector(`.svg-menu-item4-${nameid}`).addEventListener('click', function(e) {
           
		   document.querySelector('.svg-custom-menu').style.display = 'none';
			
			let boardg = d3.select('#line-canvas');
			let selectedesign = document.getElementById("lineguider").value;

			if (cloned == 'false'){
			let targetCircle = boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "green")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.attr('clicked',"false")
								.on("click",clonelclick)
								.on("mouseup",cloneclick())								
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));

	
			
			if(selectedesign == "design1"){

			boardg.append("circle")
                                .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'progcloneci'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "green")
                                .style("stroke-width", "1px")
								.attr('trail',false)
								.on("mouseup",cloneclick())								
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));								

			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextci'+nameid;})
				.style("fill", "black")
				.text('0%');
			}
			else if(selectedesign == "design2"){
			boardg.append("rect")
                                .attr("width", 50)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclonere'+nameid;})
                                .style("fill", "grey")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
			boardg.append("rect")
                                .attr("width", 0)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclone2'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
								
			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc-38)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextre'+nameid;})
				.style("fill", "white")
				.text('0%');
			}

			circele.setAttribute('cloned','true');	
			}
			else
			{
				let el = document.getElementById('clone'+nameid);
				//console.log(el);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

			ele.setAttribute('cloned','false');	
			}
		  
		  var mpid,mgpid,scale=1;

		function dragged(d) {	

			var m = d3.mouse(this)
			//console.log(m);
			var x = document.getElementsByClassName("link-newcgog "+nameid);
			var z = document.getElementsByClassName("link-newcgoo "+nameid);
			highlightline(x);
			highlightline(z);

			
			try{var clp = closestPoint(x[0],m);	mgpid='m'; mpid=x[0].getAttribute('id').slice(5);}
			catch{var clp = closestPoint(z[0],m);	mgpid='g';mpid=z[0].getAttribute('id').slice(5)}
			
			for(var i=0;i<x.length;i++)
			{
			let clp2 = closestPoint(x[i],m);			
			let pid = x[i].getAttribute('id').slice(5);		
			
			if(!(document.getElementById("trail"+nameid+'m'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'m'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "purple")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(x[i].getTotalLength()*scale)
				//console.log(dist)
				let chp = x[i].getPointAtLength(dist);
				//console.log(chp);
				let el = document.getElementById('trail'+nameid+'m'+pid);
				el.style.opacity = "0.4";
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid='m'
				}
			}

			for(var i=0;i<z.length;i++)
			{
			let clp2 = closestPoint(z[i],m);			
			let pid = z[i].getAttribute('id').slice(5);
			
			
			
			if(!(document.getElementById("trail"+nameid+'g'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'g'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "#0ca4ff")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(z[i].getTotalLength()*scale)
				let chp = z[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'g'+pid);
				el.style.opacity = "0.4";	
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'g'
				}
			}
			
			//console.log(clp);
			d3.select("#clone"+nameid).attr("cx", clp[0]).attr("cy",clp[1]);
			try{document.getElementById("trail"+nameid+mgpid+mpid).style.opacity = "0.01";}
			catch(e){console.log('k');}
			
			if(selectedesign == "design1"){
			//	document.getElementById('progcloneci'+nameid).addEventListener("mouseup",cloneclick())
			
			document.getElementById('progcloneci'+nameid).setAttribute('cx',clp[0]);
			document.getElementById('progcloneci'+nameid).setAttribute('cy',clp[1]);
			document.getElementById('progtextci'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextci'+nameid).setAttribute('y',clp[1]);				
			document.getElementById('progcloneci'+nameid).setAttribute('r',scale*25);
			document.getElementById('progtextci'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}
			else if(selectedesign == "design2")
			{
			document.getElementById('progclone2'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclone2'+nameid).setAttribute('y',clp[1]-45);				
			document.getElementById('progclonere'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclonere'+nameid).setAttribute('y',clp[1]-45);			
			document.getElementById('progtextre'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextre'+nameid).setAttribute('y',clp[1]-38);				
			document.getElementById('progclone2'+nameid).setAttribute('width',scale*50);
			document.getElementById('progtextre'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}			
			
			if(mgpid=='m'){
				let path = document.getElementsByClassName("link-newcgog "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';	
				var length = path.getTotalLength();			

			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] > path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}				
			}
			else{
			if(mgpid=='g'){
				let path = document.getElementsByClassName("link-newcgoo "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';		
						var length = path.getTotalLength();			

			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] > path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}				
			}}			
			
		//reDrawLines();	
	}
	
		var duprecords = [];
		function createdup(path){
			
				if(duprecords.includes(path.getAttribute('id')))
					return;
				
				duprecords.push(path.getAttribute('id'));
				
				for(var ii=0;ii<path.getTotalLength();ii++)
				{
					
				boardg.append("circle")
                              .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", path.getPointAtLength(ii).x)
                                .attr("cy", path.getPointAtLength(ii).y)
								.attr("id",function(d,i){return 'dupcirc'+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2);})
								.attr("class","dupcirc")
                                .style("fill", "none")
                                .style("stroke", "none")
				
				}
				return 0;
			
		}
	
		function getDistance(x1, y1, x2, y2){
			let y = x2 - x1;
			let x = y2 - y1;
			
			return Math.sqrt(x * x + y * y);
		}
		
		function closestPoint(pathNode, point) {
			  var pathLength = pathNode.getTotalLength(),
				  precision = 8,
				  best,
				  bestLength,
				  bestDistance = Infinity;

			  // linear scan for coarse approximation
			  for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {
				if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {
				  best = scan, bestLength = scanLength, bestDistance = scanDistance;
				}
			  }

			  // binary search for precise estimate
			  precision /= 2;
			  while (precision > 0.5) {
				var before,
					after,
					beforeLength,
					afterLength,
					beforeDistance,
					afterDistance;
				if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {
				  best = before, bestLength = beforeLength, bestDistance = beforeDistance;
				} else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {
				  best = after, bestLength = afterLength, bestDistance = afterDistance;
				} else {
				  precision /= 2;
				}
			  }

			  best = [best.x, best.y];
			  best.distance = Math.sqrt(bestDistance);
			  return best;

			  function distance2(p) {
				var dx = p.x - point[0],
					dy = p.y - point[1];
				return dx * dx + dy * dy;
			  }}
	
		function dragended(d){
				
			var x = document.getElementsByClassName("link-newcgoo "+nameid);
			var z = document.getElementsByClassName("link-newcgog "+nameid);

			unhighlightline(x);
			unhighlightline(z);
			
			let trailcirc = document.getElementsByClassName("trail"+nameid)
			for(var j=0;j<trailcirc.length;j++){
			//	trailcirc[j].style.display='none';
			}
			
		}
	
		function dragstart(d){

			if(document.getElementsByClassName("trail"+nameid))
			{
				let trailcirc = document.getElementsByClassName("trail"+nameid)
				for(var j=0;j<trailcirc.length;j++){
			//		trailcirc[j].style.display='block';
				}		
			}
		}
	
		function highlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'red';
				
			}			
		}
		
		function unhighlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'rgb(149, 199, 244';
				
			}			
		}	
		
		function cloneclick(){
			
			if(event.button==2){
				
				const rightCustomMenu = document.querySelector('.svg-custom-menu');
		
				rightCustomMenu.innerHTML = `<li class="svg-menu-item-${nameid} svg-menu-item">Delete Clone</li>`
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
		
		document.querySelector(`.svg-menu-item-${nameid}`).addEventListener('click', function(e) {
			
	   document.querySelector('.svg-custom-menu').style.display = 'none';
	
				let el = document.getElementById('clone'+nameid);
			el.remove();
		})
				
			}
			
		}
	
		function clonelclick(){
			var dates = $('[id^="trail'+nameid+'"]');
			if(this.getAttribute('clicked')=="false"){	
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "hidden";
			this.setAttribute('clicked',"true");
			}}
			else{
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "visible";
			this.setAttribute('clicked',"false");}
			}
		}
		
	
	})
		  
			document.querySelector(`.svg-menu-item5-${nameid}`).addEventListener('click', function(e) {
			
			document.querySelector('.svg-custom-menu').style.display = 'none';

			let boardg = d3.select('#line-canvas');

			if (cloned == 'false'){
			let targetCircle = boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "blue")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.call(d3.drag()
								.on("drag", draggedv));
								
			circele.setAttribute('cloned','true');	
			
			 
			let tcirc = document.getElementById('clone'+nameid);
			let x1Loct = parseFloat(tcirc.getAttribute("cx"));
			let y1Loct = parseFloat(tcirc.getAttribute("cy"));
			
			if(document.querySelector('.right .all-data-box').style.display == 'block')												///connect to graph
			{			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			domRect = tar.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect.y+5;
			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}


			if(document.querySelector('.right .bubblemap-box').style.display == 'block')											//connect to map
			{			
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			let tar = document.querySelector('[map-id="map' + loc + '"]');

			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;	

			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}			

				drawPolyLineClusterGM(ClusterGMCloneToGraph);

			
			function draggedv(d){				
				d3.select(this).attr("cx", d3.event.x).attr("cy", d3.event.y);
				reDrawLines();
			}
				
			}
			else
			{
				let el = document.getElementById('clone'+nameid);
				el.remove(); 
				ClusterGMCloneToGraph=[],connections4cgclone=[]
			document.querySelectorAll('.link-newcgmclone').forEach(ele => {
				  ele.remove();
			  });
			
				circele.setAttribute('cloned','false');	
			}
			
			})
	}

		  }

		else
			{
			for (var i = ClusterGOToGraph.length - 1; i >= 0; --i) {
			  if (ClusterGOToGraph[i].source.ele == nameid) {
				ClusterGOToGraph.splice(i, 1); 
			  }}
			  
			for (var i = ClusterGOToOrg.length - 1; i >= 0; --i) {
			  if (ClusterGOToOrg[i].source.ele == nameid) {
				ClusterGOToOrg.splice(i, 1); 
			  }} 
			  
			for (var i = connections5cg.length - 1; i >= 0; --i) {
			  if (connections5cg[i].source == circele) {
				connections5cg.splice(i, 1); 
			  }}
			  
			for (var i = connections5co.length - 1; i >= 0; --i) {
			  if (connections5co[i].source == circele) {
				connections5co.splice(i, 1); 
			  }}
			  
			document.querySelectorAll('.link-newcgog').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newcgoo').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			
			if(circele.getAttribute('clickhist') > 0)
			{
			if(detail=="false")
			{
				  circele.setAttribute("style", "fill: #a1c9fb");
				  circele.setAttribute("stroke","#000000")

			}
			else
			{
				  document.getElementById('cgogid'+nameid).setAttribute("style","fill: #a1c9fb");
				  document.getElementById('cgooid'+nameid).setAttribute("style","fill: #a1c9fb");
			}
			}
			 
			if(clicked=="false"){
				d3.select(this).style("stroke","black");
				
			if(document.querySelector('.right .all-data-box').style.display == 'block')						//graph view connection
			{
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))+1);		
			if(tar.getAttribute('clicked')=="false"){				
			let bright = increase_brightness('#ff7f50',parseInt(tar.getAttribute('selecthist')*10));
			tar.setAttribute('style', "fill: "+bright);}					
			//document.getElementById('pername'+person).setAttribute('fill','red');						
			domRect = tar.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect.y+5;
			
			if(detail=="false")
			{
			ClusterGOToGraph.push({
                    source : {
                      id: "clusterGO",
					  ele:nameid,					  
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "graph",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else
			{
			ClusterGOToGraph.push({
                    source : {
                      id: "clusterGO",
					  ele:nameid,					  
                      xOffset : x1Locg,
                      yOffset : y1Locg
                    },
                    target : {
                      id: "graph",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			connections5cg.push({ source: circele, target: tar, boxElement: 'all-data-box' });
			}
			
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
				let radius = parseInt(circele.getAttribute('r'));
				circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")
			}
			else
			{
				document.getElementById("cgogid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cgooid"+nameid).setAttribute("style","fill: #006400");
			}
				hist = parseInt(circele.getAttribute('clickhist'))+1;
				circele.setAttribute('clickhist', hist);
				circele.setAttribute('clicked', true);
				if(!(document.getElementById("movefixgraph").checked))								
					$('.all-data-box').addClass('selectedGO');	
			if(selectedesign!="design"){				
			drawPolyLineClusterGO(ClusterGOToGraph);}
			}
			
			if(document.querySelector('.right .organize-data-box').style.display == 'block')				//organization connection
			{
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
				
			let bubble = document.querySelector('[barid="' + org + '"]');
			//document.getElementById('text'+org).setAttribute('fill','red');				
			bubble.setAttribute('selecthist',parseInt(bubble.getAttribute('selecthist'))+1);		
			if(bubble.getAttribute('clicked')=="false"){				
			let bright = increase_brightness('#ff7f50',parseInt(bubble.getAttribute('selecthist')*10));
			bubble.setAttribute('style', "fill: "+bright);}					
			domRect = bubble.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+125;
			let y2Loc = domRect.y+5;
			if(detail=="false")
			{
			ClusterGOToOrg.push({
                    source : {
                      id: "clusterGO",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
					  ele:bubble,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else
			{
			ClusterGOToOrg.push({
                    source : {
                      id: "clusterGO",
					  ele:nameid,					  
                      xOffset : x1Loco,
                      yOffset : y1Loco
                    },
                    target : {
                      id: "organize",
					  ele:bubble,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			connections5co.push({ source: circele, target: bubble, boxElement: 'organize' });
			}
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
				let radius = parseInt(circele.getAttribute('r'));
				circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")

			}
			else
			{
				document.getElementById("cgogid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cgooid"+nameid).setAttribute("style","fill: #006400");
			}
			hist = parseInt(circele.getAttribute('clickhist'))+1;
			circele.setAttribute('clickhist', hist);
			circele.setAttribute('clicked', true);	
			if(!(document.getElementById("movefixorg").checked))							
				$('.organize-data-box').addClass('selectedGO');		
			if(selectedesign!="design"){			
			drawPolyLineClusterGO(ClusterGOToOrg);}
			}}
			else{
				d3.select(this).style("stroke","none");
				
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))-1);
			}
			
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
			let bubble = document.querySelector('[barid="' + org + '"]');
			bubble.setAttribute('selecthist',parseInt(bubble.getAttribute('selecthist'))-1);}
			
				
				if(ClusterGOToGraph.length==0)
					$('.all-data-box').removeClass('selectedGO')
				if(ClusterGOToOrg.length==0)					
					$('.organize-data-box').removeClass('selectedGO')	
				if(cloned=="true"){
				
				let el = document.getElementById('clone'+nameid);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
			let selectedesign = document.getElementById("lineguider").value;
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

				ele.setAttribute('cloned','false');}

					let found = 0;
					if(OrgToGOCollection.length != 0){
						for(var jk = 0 ;jk<OrgToGOCollection.length;jk++){
						if(nameid == OrgToGOCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(GraphToGOCollection.length != 0){
						for(var jk = 0 ;jk<GraphToGOCollection.length;jk++){
						if(nameid == GraphToGOCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToGO.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGO.length;jk++){
						if(nameid == ClusterChainToGO[jk].target.ele.id.slice(9)){
							found=1;}}}			
					if(found==1){
					d3.select(this).style("fill", "#ff7f50");
					}
				
			circele.setAttribute('clicked', false);}
			}
            }
		var abc1 = $('[id^="dupcirc"]');
for(let iii = 0;iii<abc1.length;iii++){
		abc1[iii].parentNode.appendChild(abc1[iii]);
}

		var abc2 = $('[id^="clone"]');
for(let iii = 0;iii<abc2.length;iii++){
		abc2[iii].parentNode.appendChild(abc2[iii]);
}

		var abc4 = $('[id^="progcloneci"]');
for(let iii = 0;iii<abc4.length;iii++){
		abc4[iii].parentNode.appendChild(abc4[iii]);
}		
		var abc3 = $('[id^="progtextci"]');
for(let iii = 0;iii<abc3.length;iii++){
		abc3[iii].parentNode.appendChild(abc3[iii]);
}
		var abc5 = $('[id^="progress"]');
for(let iii = 0;iii<abc5.length;iii++){
		abc5[iii].parentNode.appendChild(abc5[iii]);
}			

}
	
	function ClusterGOhover() {																		//handle hover event for graph org cluster
			
		    let $event = event;
            let ele = $event.target;
			var nameid = ele.getAttribute('clustergoid');

			startimecgo = new Date();
			
			var circele = document.getElementById("cgocircid"+nameid);
			var clicked = circele.getAttribute('clicked');
			var clickhist = circele.getAttribute('clickhist');
			var detail = circele.getAttribute('detailed');
			var persons = circele.getAttribute('person');
			var orgs = circele.getAttribute('org');
			let selectedesign = document.getElementById("lineguider").value;
			
		//	if(clicked != "true"){

			if(detail=="false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cgogid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Locg = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Locg = domRect.y+parseInt(height/7);
				
				let eleme2 = document.getElementById("cgooid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height2 = eleme2.getAttribute('height');
				let width2 = eleme2.getAttribute('width');
				var x1Loco = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
				var y1Loco = domRect2.y+parseInt(height2/7);

				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
				var y1Loc = domRect2.y+parseInt(height/7);

			}
			if(document.querySelector('.right .all-data-box').style.display == 'block')
			{
				
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			if(tar.getAttribute('clicked')=="false"){				
			tar.setAttribute('style', "fill: #ff7f50")}
			document.getElementById('pername'+person).setAttribute('fill','red');			

			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;
			
			if(detail=="false")
			{
			ClusterGOTempCollection.push({
                    source : {
                      id: "clusterGO",
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else
			{
			ClusterGOTempCollection.push({
                    source : {
                      id: "clusterGO",
                      xOffset : x1Locg,
                      yOffset : y1Locg
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			}
			}
			
			if(document.querySelector('.right .organize-data-box').style.display == 'block')
			{
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
			let bubble = document.querySelector('[barid="' + org + '"]');
			if(bubble.getAttribute('clicked')=="false"){				
			bubble.setAttribute('style', "fill: #ff7f50")}
			document.getElementById('text'+org).setAttribute('fill','red');				

			domRect2 = bubble.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+125;
			let y2Loc = domRect2.y+5;
			
			if(detail=="false")
			{
			ClusterGOTempCollection.push({
                    source : {
                      id: "clusterGO",
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else
			{
			ClusterGOTempCollection.push({
                    source : {
                      id: "clusterGO",
                      xOffset : x1Loco,
                      yOffset : y1Loco
                    },
                    target : {
                      id: "organize",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
		}}
			if(detail == "false")
			{
			if(clicked == "false"){
			if(d3.select(this).style("fill")=="rgb(161, 201, 251)"){
				d3.select(this).style("fill", "#485D5E");
			}
			}}
			else
			{
				document.getElementById("cgogid"+nameid).setAttribute("style","fill: #485D5E");
				document.getElementById("cgooid"+nameid).setAttribute("style","fill: #485D5E");
			}
			if(selectedesign != "design"){
			drawPolyLineClusterGO(ClusterGOTempCollection);}
		//}
		}

    function ClusterGOout(){																		//handle out event for graph org cluster
		
		    let $event = event;
            let ele = $event.target;
			var nameid = ele.getAttribute('clustergoid');	
			var circele = document.getElementById("cgocircid"+nameid);
			var clicked = circele.getAttribute('clicked');
			var clickhist = circele.getAttribute('clickhist');
			var detail = circele.getAttribute('detailed');
			var persons = circele.getAttribute('person');
			var orgs = circele.getAttribute('org');
			
			let track = ["GraphOrgCluster",nameid,startimecgo,new Date,"hover"];
			tracker.push(track);
						
			if(clicked == "false")
			{

			if(detail=="false")
			{
				if(d3.select(this).style("fill")=="rgb(72, 93, 94)")
				{
					circele.setAttribute("stroke","#000000");
					d3.select(this).style("fill", "#a1c9fb");					
				}
				
			}
			else
			{
				if(document.getElementById("cgogid"+nameid).getAttribute("style") == "fill: #485D5E")
				{
				if(clickhist==0)
				{
				document.getElementById("cgogid"+nameid).setAttribute("style","fill: #a1c9fb");
				document.getElementById("cgooid"+nameid).setAttribute("style","fill: #a1c9fb");}
				else
				{
				document.getElementById("cgogid"+nameid).setAttribute("style","fill: #a1c9fb");
				document.getElementById("cgooid"+nameid).setAttribute("style","fill: #a1c9fb");
				}}
			}
			}
			

			if(document.querySelector('.right .all-data-box').style.display == 'block')
			{
				
			for(var j = 0; j<persons.split(',').length;j++)
			{
				let found = 0;
					if(bubbleToGraphCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToGraphCollection.length;jk++){
						if(person == bubbleToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToGraphCollection.length != 0){
						for(var jk = 0 ;jk<OrgToGraphCollection.length;jk++){
						if(person == OrgToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGraph.length;jk++){
						if(person == ClusterChainToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGMToGraph.length;jk++){
						if(person == ClusterGMToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGOToGraph.length;jk++){
						if(person == ClusterGOToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(found==0){				
			person = persons.split(',')[j];			
			let tar = document.querySelector('[personsid="' + person + '"]')
			if(tar.getAttribute('clicked')=="true"){
				tar.setAttribute('style', "fill: #006400")
			document.getElementById('pername'+person).setAttribute('fill','green');			
				}
			else{											
			tar.setAttribute('style', "fill: #6495ed")
			document.getElementById('pername'+person).setAttribute('fill','black');			
			
			}}}}
			
			if(document.querySelector('.right .organize-data-box').style.display == 'block')
			{
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
					let found = 0;
					if(bubbleToOrgCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToOrgCollection.length;jk++){
						if(org == bubbleToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(GraphToOrgCollection.length != 0){
						for(var jk = 0 ;jk<GraphToOrgCollection.length;jk++){
						if(org == GraphToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterChainToOrg.length;jk++){
						if(org == ClusterChainToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterGOToOrg.length;jk++){
						if(org == ClusterGOToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterOMToOrg.length;jk++){
						if(org == ClusterOMToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(found==0){			
			let bubble = document.querySelector('[barid="' + org + '"]');
			if(bubble.getAttribute('clicked')=="true"){
				bubble.setAttribute('style', "fill: #006400");
				 document.getElementById('text'+org).setAttribute('fill','green');				
				
				}
			else{											
			bubble.setAttribute('style', "fill: #6495ed")
				 document.getElementById('text'+org).setAttribute('fill','black');				
			
			bubble.setAttribute("stroke","#000000");
			bubble.setAttribute("stroke-width","0.3");			

			}}}}
			
		ClusterGOTempCollection = [];
		
		document.querySelectorAll('.link-newcgotemp').forEach(ele => {
              ele.remove();
            });
	}
	  		
	let ClusterOMToOrg=[],ClusterOMToMap=[],ClusterOMToTextCollection=[],connections6co =[],connections6cm=[],connections6ct=[],
	ClusterOMTempCollection=[],ClusterOMToManCollection=[],connections6cman=[],ClusterOMdetail=false;
	
	function ClusterOMdata() {																		//creating scatter plot for org map 

		var margin = {top: 10, right: 10, bottom: 10, left: 10},
		width = 1200 - margin.left - margin.right,
		height = 1200 - margin.top - margin.bottom;
			  
		body = d3.select(".clusterOM-data-box").style("width", '450px').style("height",'450px')
		.classed("svg-container", true);

		var svg = body.append("svg").attr("preserveAspectRatio", "xMinYMin meet").attr("id","svgclusterom")
										.attr("viewBox", "0 0 1200 1200").attr("transform","translate(" + margin.left + "," + margin.top + ")");

	var xValue = function(d) { return d.x;};
	let  x = d3.scaleLinear()
		.range([ 0, width ]);
	let	xMap = function(d) { return x(xValue(d))-160;};
	let	xMap0 = function(d) { return x(xValue(d))-220;};
	let	xMap01 = function(d) { return x(xValue(d))-160;};


	var yValue = function(d) { return d["y"];};
	let  y = d3.scaleLinear()
		.range([ height, 0]);
	let yMap = function(d) { return y(yValue(d))+50;};
	let	yMap0 = function(d) { return y(yValue(d))+20;};
	let	yMap01 = function(d) { return y(yValue(d))+20+(60-(d['map'].split(',').length * 5));};


	  d3.csv("./cluster-data/points50/om"+connsel+"_"+dataselid+".csv", function(data){
	  
	  x.domain([d3.min(data, xValue)-1.2, d3.max(data, xValue)+1]);
	  y.domain([d3.min(data, yValue)-1.2, d3.max(data, yValue)+1]);
	 	
	svg.selectAll(".dotom")
		  .data(data)
		.enter().append("circle")
		  .attr("class", "dotom")
		  .attr("r", function(d){return parseInt(d['organize'].split(',').length)*5+parseInt(d['map'].split(',').length)*5})
		  .attr("cx", xMap)
		  .attr("cy", yMap)
		  .attr('map',function(d){return d['map'];})
		  .attr('org',function(d){return d['organize'];})
		  .style("fill", '#a1c9fb')
		  .attr("clickhist",0)
		  .attr('clicked',false)
		  .style("stroke", "black")
		  .attr("visibility", "visible")	  		  
		  .attr('detailed',false)		
		  .attr('cloned',false)		  
		  .attr("stroke-width",2)
		  .attr('clusteromid',function(d,i){return (i+1);})
		  .attr('id',function(d,i){return "comcircid"+(i+1);})	
		  .on("mouseover", ClusterOMhover)
		  .on("mouseout",ClusterOMout)
		  .on('mouseup',ClusterOMclick);	

svg.selectAll(".rectcom")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectcom")
		  .attr('width', 60)
		  .attr('height', function(d){return d['map'].split(',').length * 5;})
		  .attr("x", xMap0)
		  .attr("y", yMap01)
		.style("fill", '#a1c9fb')
			  .attr("visibility", "hidden")
		.attr('stroke', '#000000')
		.attr('stroke-width', '1')
			.attr('clusteromid',function(d,i){return (i+1);})	
		  .attr('id',function(d,i){return "commid"+(i+1);});

		  
	svg.selectAll(".rectdom")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectdom")
		  .attr('width', 60)
		  .attr('height', function(d){return d['organize'].split(',').length * 8.5;})
		  .attr("x", xMap01)
		  .attr("y", function(d) { return y(yValue(d))+20+60-(d['organize'].split(',').length * 8.5);})
		.style("fill", '#a1c9fb')
		.attr('stroke', '#000000')
		.attr('stroke-width', '1')
		  .attr("visibility", "hidden")
		  .attr('clusteromid',function(d,i){return (i+1);})	
		  .attr('id',function(d,i){return "comoid"+(i+1);});		  
		  
	svg.selectAll(".rectaom")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectaom")
		  .attr('width', 60)
		  .attr('height', 60)
		  .attr("x", xMap0)
		  .attr("y", yMap0)
			.attr("fill-opacity", 0)
			.attr('stroke', '#000000')
			.attr('stroke-width', '1')
			  .attr("visibility", "hidden")
		  .attr('clusteromid',function(d,i){return (i+1);})
		  .attr('id',function(d,i){return "comm"+(i+1);})		  
		  .on("mouseover", ClusterOMhover)
		  .on("mouseout",ClusterOMout)
		  .on('mouseup',ClusterOMclick);
	  	
	svg.selectAll(".rectbom")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectbom")
		  .attr('width', 60)
		  .attr('height', 60)
		  .attr("x", xMap01)
		  .attr("y", yMap0)
			.attr("fill-opacity", 0)
			.attr('stroke', '#000000')
			.attr('stroke-width', '1')
			  .attr("visibility", "hidden")
		  .attr('clusteromid',function(d,i){return (i+1);})
		  .attr('id',function(d,i){return "como"+(i+1);})
		  .on("mouseover", ClusterOMhover)
		  .on("mouseout",ClusterOMout)
		  .on('mouseup',ClusterOMclick);	  
			});
			
				var selectedOM;
				var draggableOptionsOM = {
					start: function(event, ui) {
						//get all selected...
						if (ui.helper.hasClass('selectedOM')) selectedOM = $('div.selectedOM');
						else {
							selectedOM = $(ui.helper);
							$('div.selectedOM').removeClass('selectedOM')
						}
					},
					drag: function(event, ui) {
						var currentLoc = $(this).position();
						var prevLoc = $(this).data('prevLoc');
						if (!prevLoc) {
							prevLoc = ui.originalPosition;
						}

						var offsetLeft = currentLoc.left-prevLoc.left;
						var offsetTop = currentLoc.top-prevLoc.top;

						moveSelectedOM(offsetLeft, offsetTop);
						$(this).data('prevLoc', currentLoc);
					}
				};

				function moveSelectedOM(ol, ot){
					//console.log("moving to: " + ol + ":" + ot);
					selectedOM.each(function(){
						$this =$(this);
						var p = $this.position();
						var l = p.left;
						var t = p.top;
						//console.log({id: $this.attr('id'), l: l, t: t});
						$this.css('left', l+ol);
						$this.css('top', t+ot);
					})}
			  
			  $('.clusterOM-data-box').draggable(draggableOptionsOM);
			  $('.clusterOM-data-box').addClass('selectedOM');			
			
			
	$('.clusterOM-data-box').on('drag', reDrawLines);
		if(document.getElementById("movefixOM").checked){
			document.getElementById('clusterOM').ondragstart = function() { return false; };
			$('.clusterOM-data-box').removeClass('selectedorg')
			$('.clusterOM-data-box').removeClass('selectedmap')
			$('.clusterOM-data-box').removeClass('selectedchain')			
		}
		else{
			document.getElementById('clusterOM').ondragstart = function() { return true; };
				if(OrgToOMCollection.length>0)
					$('.clusterOM-data-box').addClass('selectedorg')
				if(bubbleToOMCollection.length==0)					
					$('.clusterOM-data-box').addClass('selectedmap')
				if(ClusterChainToOM.length==0)					
					$('.clusterOM-data-box').addClass('selectedchain')				
		};
      }

	function ClusterOMclick(){																		//handle click event for graph map cluster
	if(window.getSelection) {
          let selection = window.getSelection();
		    let $event = event;
            let ele = $event.target;
			var nameid = ele.getAttribute('clusteromid');

			var circele = document.getElementById("comcircid"+nameid);
			var clicked = circele.getAttribute('clicked');
			var clickhist = circele.getAttribute('clickhist');
			var detail = circele.getAttribute('detailed');
			var locs = circele.getAttribute('map');
			var orgs = circele.getAttribute('org');
			var cloned = circele.getAttribute('cloned');
			let selectedesign = document.getElementById("lineguider").value;

			let track = ['OrgMapCluster',nameid,1,new Date(),"click"];
			tracker.push(track);
	
			if(detail=="false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("commid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Locm = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Locm = domRect.y+parseInt(height/7);
				
				let eleme2 = document.getElementById("comoid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height2 = eleme2.getAttribute('height');
				let width2 = eleme2.getAttribute('width');
				var x1Loco = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/6);
				var y1Loco = domRect2.y+parseInt(height2/6);
				
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
				var y1Loc = domRect.y+parseInt(height/7);
			}
		  
		  if(event.button === 2) {																					//right click for org map view
	if(clicked == "true"){

			const rightCustomMenu = document.querySelector('.svg-custom-menu');
			
//			if(detail=="false" && manualink==false)
//            else if(detail != "false" && manualink==true)
//			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">Show Compact View</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link To This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
//			else if(detail == "false" && manualink==true)
//			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">View Summary</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link To This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
//			else if(detail != "false" && manualink==false)
//			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">Show Compact View</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link From This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`


			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item0">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item1">View Summary</li><li class="svg-menu-item2-${nameid} svg-menu-item2">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item3">Link From This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
3
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
			
			document.querySelector('.svg-menu-item0').style.display = 'none';
			document.querySelector('.svg-menu-item1').style.display = 'none';
			document.querySelector('.svg-menu-item2').style.display = 'none';
			document.querySelector('.svg-menu-item5').style.display = 'none';
			document.querySelector('.svg-menu-item3').style.display = 'none';

			
			document.querySelector(`.svg-menu-item0-${nameid}`).addEventListener('click', function(e) {
            document.querySelector('.svg-custom-menu').style.display = 'none';
			var docids = [], organ=[], locats=[];
			
			for(var i = 0; i<locs.split(',').length;i++)
			{
			loc = locs.split(',')[i]
			let sor = document.querySelector('[map-id="map' + loc + '"]').getAttribute('data-location');
			if(!(locats.includes(sor)))
				{
						locats.push(sor);
				}
				
			for (var val in documentData){
				if(documentData[val].location.includes(sor))
				{
					if(!(docids.includes(documentData[val])))
						docids.push(documentData[val]);
				}}
			}
			
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
			let tar = document.querySelector('[barid="' + org + '"]').getAttribute('orgname');
			if(!(organ.includes(tar)))
				{
						organ.push(tar);
				}

			for (var val in documentData){
				if(documentData[val].organization.includes(tar))
				{
					if(!(docids.includes(documentData[val])))
						docids.push(documentData[val]);
				}}
			}
						
			for (var val in docids){
					let content = docids[val].docText;
					let id = docids[val].docId;

					for (var o in organ)
					{
						if(docids[val].organization.includes(organ[o])){
							sor = organ[o];
							content = content.replace(sor, `<span class=highlighted-text>${sor}</span>`);
						}
					}
					for (var l in locats)
					{
						if(docids[val].location.includes(locats[l])){
							tar = locats[l];
							content = content.replace(tar, `<span class=highlighted-text>${tar}</span>`);
						}
						if(tar == "New York City")
						{
							tar = "NYC"
							content = content.replace(tar, `<span class=highlighted-text>${tar}</span>`);
						}
						if(tar == "Virginia")
						{
							tar = "VA"
							content = content.replace(tar, `<span class=highlighted-text>${tar}</span>`);
						}
					}
					
                  var note = `
                  <div class="reldoc note the-node" id='`+ id +`' style="z-index: 999;">
                    <div class='close_note'>X</div>
                    <h3>`+ id +`&nbsp;
					<label class="switch">
					  <input type="checkbox" id="movefixom`+sid+`">
					  <span class="slider round"></span>
					</label></h3>
                    <p style="cursor:text;">
                      `+ content +`
                    </p>
                  </div>
                  `;
                  $("#board").append(note);
                  $(".note#" + id).css('z-index',99).draggable({
                    containment: "#board",
                    grid: [5, 5],
                    cancel: "p"
                  });
				 
				 let x2Loc = parseFloat($('#' + id).css('left').split('px')[0]) + $('#' + id).find('.highlighted-text').position().left+5;
                  let y2Loc = parseFloat($('#' + id).css('top').split('px')[0]) + $('#' + id).find('.highlighted-text').position().top + 40;

                  ClusterOMToTextCollection.push({
                    source : {
                      id: "clusterOM",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "highlight-text",
					  ele:id,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });

                  connections6ct.push({ source: circele, sourceid:nameid,target: $('#' + id),targetid:id });
				  $('#' + id).on('drag', function() {
                    ClusterOMToTextCollection = [];
                    connections6ct.forEach(conn => {
                    const ele = conn.source;
					let nameid = ele.getAttribute('clusteromid')
					let sid = conn.target[0].id;

					var circele = document.getElementById("comcircid"+nameid);

					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y1Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme = document.getElementById("comoid"+nameid);
						let domRect = eleme.getBoundingClientRect();
						let height = eleme.getAttribute('height');
						var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth;
						var y1Loc = domRect.y+parseInt(height/6);
					}
					
                      let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
                      let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

                      ClusterOMToTextCollection.push({
                        source : {
                          id: "clusterOM",
						  ele:nameid,
                          xOffset : x1Loc,
                          yOffset : y1Loc
                        },
                        target : {
                          id: "highlight-text",
						  ele:sid,
                          xOffset : x2Loc,
                          yOffset : y2Loc
                        }
                      });
                    })
                    drawPolyLineClusterOM(ClusterOMToTextCollection);
                  });
				  drawPolyLineClusterOM(ClusterOMToTextCollection);

				  }
			})
						
			document.querySelector(`.svg-menu-item1-${nameid}`).addEventListener('click', function(e) {
			document.querySelector('.svg-custom-menu').style.display = 'none';

				if(detail=="false")
				{
					document.getElementById("comm"+nameid).setAttribute('visibility', "visible");
					document.getElementById("como"+nameid).setAttribute('visibility', "visible");
					document.getElementById("commid"+nameid).setAttribute('visibility', "visible");
					document.getElementById("comoid"+nameid).setAttribute('visibility', "visible");
					if(clicked=="true"){
						document.getElementById("comoid"+nameid).setAttribute('style', "fill: #006400");
						document.getElementById("commid"+nameid).setAttribute('style', "fill: #006400");}
					else if (clickhist>0){
						document.getElementById("comoid"+nameid).setAttribute('style', "fill: #6495ed");
						document.getElementById("commid"+nameid).setAttribute('style', "fill: #6495ed");
					}
					document.getElementById("comcircid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("comcircid"+nameid).setAttribute('detailed', true);					
				}
				else
				{
					document.getElementById("comm"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("como"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("commid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("comoid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("comcircid"+nameid).setAttribute('visibility', "visible");
					document.getElementById("comcircid"+nameid).setAttribute('detailed', false);	
					if(clicked=="true"){
					document.getElementById("comcircid"+nameid).setAttribute('style', "fill: #006400");
					document.getElementById("comcircid"+nameid).setAttribute('stroke', "#000000");}
					else if (clickhist>0){
						document.getElementById("comcircid"+nameid).setAttribute('style', "fill: #6495ed");
						document.getElementById("comcircid"+nameid).setAttribute('stroke', "#000000");
					}					
				}
				reDrawLines();
				})
				
			document.querySelector(`.svg-menu-item2-${nameid}`).addEventListener('click', function(e) {
				
				document.querySelector('.svg-custom-menu').style.display = 'none';
				
				if(ClusterOMdetail== false)
				{
					let temp1 = document.getElementsByClassName('rectaom');
					for(var i = 0; i < temp1.length; i++){temp1[i].setAttribute('visibility', "visible");}
					let temp2 = document.getElementsByClassName('rectbom');
					for(var i = 0; i < temp2.length; i++){temp2[i].setAttribute('visibility', "visible");}
					let temp3 = document.getElementsByClassName('rectcom');
					for(var i = 0; i < temp3.length; i++){temp3[i].setAttribute('visibility', "visible");}
					let temp4 = document.getElementsByClassName('rectdom');
					for(var i = 0; i < temp4.length; i++){temp4[i].setAttribute('visibility', "visible");}
					let temp5 = document.getElementsByClassName('dotom');
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('visibility', "hidden");}
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('detailed', true);}
					ClusterOMdetail=true;
				}
				else
				{
					let temp1 = document.getElementsByClassName('rectaom');
					for(var i = 0; i < temp1.length; i++){temp1[i].setAttribute('visibility', "hidden");}
					let temp2 = document.getElementsByClassName('rectbom');
					for(var i = 0; i < temp2.length; i++){temp2[i].setAttribute('visibility', "hidden");}
					let temp3 = document.getElementsByClassName('rectcom');
					for(var i = 0; i < temp3.length; i++){temp3[i].setAttribute('visibility', "hidden");}
					let temp4 = document.getElementsByClassName('rectdom');
					for(var i = 0; i < temp4.length; i++){temp4[i].setAttribute('visibility', "hidden");}
					let temp5 = document.getElementsByClassName('dotom');
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('visibility', "visible");}
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('detailed', false);}					
					ClusterOMdetail=false;
				}
				reDrawLines();
		  })
	
			document.querySelector(`.svg-menu-item3-${nameid}`).addEventListener('click', function(e) {
              document.querySelector('.svg-custom-menu').style.display = 'none';

			let track = ['OrgMapCluster',nameid,1,new Date(),"submit"];
			tracker.push(track);
				
			var study = 1;
			if(study == 0){			
			if(manualink==false)
			{
				manualinksource.push(circele);
				manualink=true;
			}
			else
			{
				ele2 = manualinksource[0];
				
				if(circele==ele2)
				{
					console.log('Error')
					
				}
				else
				{
				var domRect2 = ele2.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;			
				let sid = ele2.getAttribute('id');				
				
				ClusterOMToManCollection.push({
                    source : {
                      id: "clusterOM",
					  ele: ele,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "manual",
					  ele: sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				connections6cman.push({source:ele,target:ele2,tarid:sid,boxElement:'clusterOM'});
				drawPolyLineClusterOM(ClusterOMToManCollection);				
				
				manualink=false; manualinksource=[];
				}
			}
			}
			})				

			document.querySelector(`.svg-menu-item4-${nameid}`).addEventListener('click', function(e) {
           
		   document.querySelector('.svg-custom-menu').style.display = 'none';
			
			let boardg = d3.select('#line-canvas');
			let selectedesign = document.getElementById("lineguider").value;
		    cloned = circele.getAttribute('cloned');

			if (cloned == 'false'){
			let targetCircle = boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "green")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.attr("clicked","false")
								.on("click",clonelclick)
								.on("mouseup",cloneclick())
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));

			
			if(selectedesign == "design1"){

			boardg.append("circle")
                                .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'progcloneci'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "green")
                                .style("stroke-width", "1px")
								.attr('trail',false)
								.on("mouseup",cloneclick())
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));								

			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextci'+nameid;})
				.style("fill", "black")
				.text('0%');
			}
			else if(selectedesign == "design2"){
			boardg.append("rect")
                                .attr("width", 50)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclonere'+nameid;})
                                .style("fill", "grey")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
			boardg.append("rect")
                                .attr("width", 0)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclone2'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
								
			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc-38)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextre'+nameid;})
				.style("fill", "white")
				.text('0%');
			}
			
			circele.setAttribute('cloned','true');	
			}
			else
			{
				
				let el = document.getElementById('clone'+nameid);
				//console.log(el);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

				circele.setAttribute('cloned','false');	
			}
		  var mpid,mgpid,scale=1;

		function dragged(d) {	

			var m = d3.mouse(this)
			//console.log(m);
			var x = document.getElementsByClassName("link-newcomm "+nameid);
			var z = document.getElementsByClassName("link-newcomo "+nameid);

			highlightline(x);
			highlightline(z);

			
			try{var clp = closestPoint(x[0],m);	mgpid='m'; mpid=x[0].getAttribute('id').slice(5);}
			catch{var clp = closestPoint(z[0],m);	mgpid='g';mpid=z[0].getAttribute('id').slice(5)}
			
			for(var i=0;i<x.length;i++)
			{
			let clp2 = closestPoint(x[i],m);			
			let pid = x[i].getAttribute('id').slice(5);		
			
			if(!(document.getElementById("trail"+nameid+'m'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'m'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "purple")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(x[i].getTotalLength()*scale)
				//console.log(dist)
				let chp = x[i].getPointAtLength(dist);
				//console.log(chp);
				let el = document.getElementById('trail'+nameid+'m'+pid);
				el.style.opacity = 0.4;
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid='m'
				}
			}

			for(var i=0;i<z.length;i++)
			{
			let clp2 = closestPoint(z[i],m);			
			let pid = z[i].getAttribute('id').slice(5);
			
			
			
			if(!(document.getElementById("trail"+nameid+'g'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'g'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "#0ca4ff")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(z[i].getTotalLength()*scale)
				let chp = z[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'g'+pid);
				el.style.opacity = 0.4;
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'g'
				}
			}
			
			//console.log(clp);
			d3.select("#clone"+nameid).attr("cx", clp[0]).attr("cy",clp[1]);
			try{document.getElementById("trail"+nameid+mgpid+mpid).style.opacity = "0.01"
			}
			catch(e){console.log('k');}

			if(selectedesign == "design1"){
			//	document.getElementById('progcloneci'+nameid).addEventListener("mouseup",cloneclick())
			
			document.getElementById('progcloneci'+nameid).setAttribute('cx',clp[0]);
			document.getElementById('progcloneci'+nameid).setAttribute('cy',clp[1]);
			document.getElementById('progtextci'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextci'+nameid).setAttribute('y',clp[1]);				
			document.getElementById('progcloneci'+nameid).setAttribute('r',scale*25);
			document.getElementById('progtextci'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}
			else if(selectedesign == "design2")
			{
			document.getElementById('progclone2'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclone2'+nameid).setAttribute('y',clp[1]-45);				
			document.getElementById('progclonere'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclonere'+nameid).setAttribute('y',clp[1]-45);			
			document.getElementById('progtextre'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextre'+nameid).setAttribute('y',clp[1]-38);				
			document.getElementById('progclone2'+nameid).setAttribute('width',scale*50);
			document.getElementById('progtextre'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}
						
			if(mgpid=='m'){
				let path = document.getElementsByClassName("link-newcomm "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';	
		var length = path.getTotalLength();			

			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] > path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}				
				
			}
			else{
			if(mgpid=='g'){
				let path = document.getElementsByClassName("link-newcomo "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';	
						var length = path.getTotalLength();			

			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			let circ = boardg.append('g');			
			circ.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] > path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}
			}}
					
		//reDrawLines();	
	}
	
		function getDistance(x1, y1, x2, y2){
			let y = x2 - x1;
			let x = y2 - y1;
			
			return Math.sqrt(x * x + y * y);
		}
		
		function closestPoint(pathNode, point) {
			  var pathLength = pathNode.getTotalLength(),
				  precision = 8,
				  best,
				  bestLength,
				  bestDistance = Infinity;

			  // linear scan for coarse approximation
			  for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {
				if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {
				  best = scan, bestLength = scanLength, bestDistance = scanDistance;
				}
			  }

			  // binary search for precise estimate
			  precision /= 2;
			  while (precision > 0.5) {
				var before,
					after,
					beforeLength,
					afterLength,
					beforeDistance,
					afterDistance;
				if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {
				  best = before, bestLength = beforeLength, bestDistance = beforeDistance;
				} else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {
				  best = after, bestLength = afterLength, bestDistance = afterDistance;
				} else {
				  precision /= 2;
				}
			  }

			  best = [best.x, best.y];
			  best.distance = Math.sqrt(bestDistance);
			  return best;

			  function distance2(p) {
				var dx = p.x - point[0],
					dy = p.y - point[1];
				return dx * dx + dy * dy;
			  }}
	
		function dragended(d){
				
			var x = document.getElementsByClassName("link-newcomm "+nameid);
			var z = document.getElementsByClassName("link-newcomo "+nameid);

			unhighlightline(x);
			unhighlightline(z);
			
			let trailcirc = document.getElementsByClassName("trail"+nameid)
			for(var j=0;j<trailcirc.length;j++){
				//trailcirc[j].style.display='none';
			}
			
		}
	
		function dragstart(d){

			if(document.getElementsByClassName("trail"+nameid))
			{
				let trailcirc = document.getElementsByClassName("trail"+nameid)
				for(var j=0;j<trailcirc.length;j++){
					//trailcirc[j].style.display='block';
				}		
			}
		}
	
		function highlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'red';
				
			}			
		}
		
		function unhighlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'rgb(149, 199, 244';
				
			}			
		}	
	
		function cloneclick(){
			
			if(event.button==2){
				
				const rightCustomMenu = document.querySelector('.svg-custom-menu');
		
				rightCustomMenu.innerHTML = `<li class="svg-menu-item-${nameid} svg-menu-item">Delete Clone</li>`
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
		
		document.querySelector(`.svg-menu-item-${nameid}`).addEventListener('click', function(e) {
			
	   document.querySelector('.svg-custom-menu').style.display = 'none';
	
				let el = document.getElementById('clone'+nameid);

				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

			ele.setAttribute('cloned','false');	
		})
				
			}
			
		}
		var duprecords = [];
		function createdup(path){
			
				if(duprecords.includes(path.getAttribute('id')))
					return;
				
				duprecords.push(path.getAttribute('id'));
				
				for(var ii=0;ii<path.getTotalLength();ii++)
				{
					
				boardg.append("circle")
                              .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", path.getPointAtLength(ii).x)
                                .attr("cy", path.getPointAtLength(ii).y)
								.attr("id",function(d,i){return 'dupcirc'+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2);})
								.attr("class","dupcirc")
                                .style("fill", "none")
                                .style("stroke", "none")
				
				}
				return 0;
			
		}
		
		function clonelclick(){
			var dates = $('[id^="trail'+nameid+'"]');
			if(this.getAttribute('clicked')=="false"){	
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "hidden";
			this.setAttribute('clicked',"true");
			}}
			else{
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "visible";
			this.setAttribute('clicked',"false");}
			}
		}
		
	
	})
		  
			document.querySelector(`.svg-menu-item5-${nameid}`).addEventListener('click', function(e) {
			
			document.querySelector('.svg-custom-menu').style.display = 'none';

			let boardg = d3.select('#line-canvas');

			if (cloned == 'false'){
			let targetCircle = boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "blue")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.call(d3.drag()
								.on("drag", draggedv));
								
			circele.setAttribute('cloned','true');	
			
			 
			let tcirc = document.getElementById('clone'+nameid);
			let x1Loct = parseFloat(tcirc.getAttribute("cx"));
			let y1Loct = parseFloat(tcirc.getAttribute("cy"));
			
			if(document.querySelector('.right .all-data-box').style.display == 'block')												///connect to graph
			{			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			domRect = tar.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect.y+5;
			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}


			if(document.querySelector('.right .bubblemap-box').style.display == 'block')											//connect to map
			{			
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			let tar = document.querySelector('[map-id="map' + loc + '"]');

			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;	

			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}			

				drawPolyLineClusterGM(ClusterGMCloneToGraph);

			
			function draggedv(d){				
				d3.select(this).attr("cx", d3.event.x).attr("cy", d3.event.y);
				reDrawLines();
			}
				
			}
			else
			{
				let el = document.getElementById('clone'+nameid);
				el.remove(); 
				ClusterGMCloneToGraph=[],connections4cgclone=[]
			document.querySelectorAll('.link-newcgmclone').forEach(ele => {
				  ele.remove();
			  });
			
				circele.setAttribute('cloned','false');	
			}
			
			})

	}		  }
	
		else
			{
			for (var i = ClusterOMToOrg.length - 1; i >= 0; --i) {
			  if (ClusterOMToOrg[i].source.ele == nameid) {
				ClusterOMToOrg.splice(i, 1); 
			  }}
			  
			for (var i = ClusterOMToMap.length - 1; i >= 0; --i) {
			  if (ClusterOMToMap[i].source.ele == nameid) {
				ClusterOMToMap.splice(i, 1); 
			  }} 
			  
			for (var i = connections6co.length - 1; i >= 0; --i) {
			  if (connections6co[i].source == circele) {
				connections6co.splice(i, 1); 
			  }}
			  
			for (var i = connections6cm.length - 1; i >= 0; --i) {
			  if (connections6cm[i].source == circele) {
				connections6cm.splice(i, 1); 
			  }}
			  
			document.querySelectorAll('.link-newcomm').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newcomo').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});

			if(circele.getAttribute('clickhist') > 0)
			{
			if(detail=="false")
			{
				  circele.setAttribute("style", "fill: #a1c9fb");
				  circele.setAttribute("stroke","#000000")

			}
			else
			{
				  document.getElementById('commid'+nameid).setAttribute("style","fill: #a1c9fb");
				  document.getElementById('comoid'+nameid).setAttribute("style","fill: #a1c9fb");
			}
			}			

			if(clicked=="false"){
				d3.select(this).style("stroke","black");
			
			if(document.querySelector('.right .bubblemap-box').style.display == 'block')			//map view connection
			{	
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			try{
			let tar = document.querySelector('[map-id="map' + loc + '"]');
			tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))+1);		
			if(tar.getAttribute('clicked')=="false"){				
			let bright = increase_brightness('#ff7f50',parseInt(tar.getAttribute('selecthist')*10));
			tar.setAttribute('style', "fill: "+bright);}		
			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;	
			
			if(detail=="false")
			{
			ClusterOMToMap.push({
                    source : {
                      id: "clusterOM",
					  ele:nameid,					  
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "bubble-map",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else
			{
			ClusterOMToMap.push({
                    source : {
                      id: "clusterOM",
					  ele:nameid,					  
                      xOffset : x1Locm,
                      yOffset : y1Locm
                    },
                    target : {
                      id: "bubble-map",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			connections6cm.push({ source: circele, target: tar, boxElement: 'bubble-map' });
			}
			catch(error){}
			}
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
			//	let radius = parseInt(circele.getAttribute('r'));
			//	circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")
			}
			else
			{
				document.getElementById("commid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("comoid"+nameid).setAttribute("style","fill: #006400");
			}
			hist = parseInt(circele.getAttribute('clickhist'))+1;
			circele.setAttribute('clickhist', hist);
			circele.setAttribute('clicked', true);
			if(!(document.getElementById("movefixmap").checked))							
				$('.bubblemap-box').addClass('selectedOM');		
			if(selectedesign!="design"){			
			drawPolyLineClusterOM(ClusterOMToMap);}
			}
			
			if(document.querySelector('.right .organize-data-box').style.display == 'block')		//organization view connection
			{			
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
			let tar = document.querySelector('[barid="' + org + '"]');
			tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))+1);		
			if(tar.getAttribute('clicked')=="false"){				
			let bright = increase_brightness('#ff7f50',parseInt(tar.getAttribute('selecthist')*10));
			tar.setAttribute('style', "fill: "+bright);}		
			//document.getElementById('text'+org).setAttribute('fill','red');							
			domRect = tar.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+125;
			let y2Loc = domRect.y+5;
			
			if(detail=="false")
			{
			ClusterOMToOrg.push({
                    source : {
                      id: "clusterOM",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else
			{
			ClusterOMToOrg.push({
                    source : {
                      id: "clusterOM",
					  ele:nameid,					  
                      xOffset : x1Loco,
                      yOffset : y1Loco
                    },
                    target : {
                      id: "organize",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			connections6co.push({ source: circele, target: tar, boxElement: 'organize' });
			}
			
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
				//let radius = parseInt(circele.getAttribute('r'));
				//circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")

			}
			else
			{
				document.getElementById("commid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("comoid"+nameid).setAttribute("style","fill: #006400");
			}
			hist = parseInt(circele.getAttribute('clickhist'))+1;
			circele.setAttribute('clickhist', hist);
			circele.setAttribute('clicked', true);
			if(!(document.getElementById("movefixorg").checked))				
				$('.organize-data-box').addClass('selectedOM');	
			if(selectedesign!="design"){			
			drawPolyLineClusterOM(ClusterOMToOrg);}
			}}
			
			else{
				d3.select(this).style("stroke","none");
			
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
			let bubble = document.querySelector('[barid="' + org + '"]');
			bubble.setAttribute('selecthist',parseInt(bubble.getAttribute('selecthist'))-1);}

			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			let tar = document.querySelector('[map-id="map' + loc + '"]');
			tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))-1);	}	

				
				if(ClusterOMToMap.length==0)
					$('.bubblemap-box').removeClass('selectedOM')
				if(ClusterOMToOrg.length==0)					
					$('.organize-data-box').removeClass('selectedOM')

				if(cloned=="true"){

					let el = document.getElementById('clone'+nameid);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
			let selectedesign = document.getElementById("lineguider").value;
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

				ele.setAttribute('cloned','false');	}
					
					let found = 0;
					if(bubbleToOMCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToOMCollection.length;jk++){
						if(nameid == bubbleToOMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(OrgToOMCollection.length != 0){
						for(var jk = 0 ;jk<OrgToOMCollection.length;jk++){
						if(nameid == OrgToOMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToOM.length != 0){
						for(var jk = 0 ;jk<ClusterChainToOM.length;jk++){
						if(nameid == ClusterChainToOM[jk].target.ele.id.slice(9)){
							found=1;}}}									
					if(found==1){
						d3.select(this).style("fill", "#ff7f50");}							
				circele.setAttribute('clicked', false);}
			}
            }
		var abc1 = $('[id^="dupcirc"]');
for(let iii = 0;iii<abc1.length;iii++){
		abc1[iii].parentNode.appendChild(abc1[iii]);
}

		var abc2 = $('[id^="clone"]');
for(let iii = 0;iii<abc2.length;iii++){
		abc2[iii].parentNode.appendChild(abc2[iii]);
}

		var abc4 = $('[id^="progcloneci"]');
for(let iii = 0;iii<abc4.length;iii++){
		abc4[iii].parentNode.appendChild(abc4[iii]);
}		
		var abc3 = $('[id^="progtextci"]');
for(let iii = 0;iii<abc3.length;iii++){
		abc3[iii].parentNode.appendChild(abc3[iii]);
}
		var abc5 = $('[id^="progress"]');
for(let iii = 0;iii<abc5.length;iii++){
		abc5[iii].parentNode.appendChild(abc5[iii]);
}			
}

	function ClusterOMhover() {																		//handle hover event for org map cluster
			
		    let $event = event;
            let ele = $event.target;
			var nameid = ele.getAttribute('clusteromid');

			var circele = document.getElementById("comcircid"+nameid);
			var clicked = circele.getAttribute('clicked');
			var clickhist = circele.getAttribute('clickhist');
			var detail = circele.getAttribute('detailed');
			var locs = circele.getAttribute('map');
			var orgs = circele.getAttribute('org');
			let selectedesign = document.getElementById("lineguider").value;

			startimecom = new Date();
			
	//		if(clicked != "true"){
			
			if(detail=="false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("commid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Locm = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Locm = domRect.y+parseInt(height/7);
				
				let eleme2 = document.getElementById("comoid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height2 = eleme2.getAttribute('height');
				let width2 = eleme2.getAttribute('width');				
				var x1Loco = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
				var y1Loco = domRect2.y+parseInt(height2/7);
				
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
				var y1Loc = domRect2.y+parseInt(height/7);
			}

			if(document.querySelector('.right .bubblemap-box').style.display == 'block')
			{			
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			try{
			let tar = document.querySelector('[map-id="map' + loc + '"]');
			if(tar.getAttribute('clicked')=="false"){				
			tar.setAttribute('style', "fill: #ff7f50")}
			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;	
			
			if(detail=="false")
			{
			ClusterOMTempCollection.push({
                    source : {
                      id: "clusterOM",
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "bubble-map",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else
			{
			ClusterOMTempCollection.push({
                    source : {
                      id: "clusterOM",
                      xOffset : x1Locm,
                      yOffset : y1Locm
                    },
                    target : {
                      id: "bubble-map",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			}
			catch(error){}
			}
			}
			
			if(document.querySelector('.right .organize-data-box').style.display == 'block')
			{			
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
			let bubble = document.querySelector('[barid="' + org + '"]');
			if(bubble.getAttribute('clicked')=="false"){				
			bubble.setAttribute('style', "fill: #ff7f50")}
			document.getElementById('text'+org).setAttribute('fill','red');							
			domRect2 = bubble.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+125;
			let y2Loc = domRect2.y+5;
			if(detail=="false")
			{
			ClusterOMTempCollection.push({
                    source : {
                      id: "clusterOM",
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else
			{
			ClusterOMTempCollection.push({
                    source : {
                      id: "clusterOM",
                      xOffset : x1Loco,
                      yOffset : y1Loco
                    },
                    target : {
                      id: "organize",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
		}}
			
			if(detail == "false")
			{
			if(clicked == "false"){
			if(d3.select(this).style("fill")=="rgb(161, 201, 251)"){
				d3.select(this).style("fill", "#485D5E");
			}
			}}
			else
			{
				document.getElementById("commid"+nameid).setAttribute("style","fill: #485D5E");
				document.getElementById("comoid"+nameid).setAttribute("style","fill: #485D5E");
			}
			if(selectedesign!="design"){			
			drawPolyLineClusterOM(ClusterOMTempCollection);}
	//		}
	}


    function ClusterOMout(){																		//handle out event for org map cluster
		
		    let $event = event;
            let ele = $event.target;
			var nameid = ele.getAttribute('clusteromid');

			var circele = document.getElementById("comcircid"+nameid);
			var clicked = circele.getAttribute('clicked');
			var clickhist = circele.getAttribute('clickhist');
			var detail = circele.getAttribute('detailed');
			var locs = circele.getAttribute('map');
			var orgs = circele.getAttribute('org');
			
			let track = ["OrgMapCluster",nameid,startimecom,new Date,"hover"];
			tracker.push(track);

			if(clicked == "false")
			{

			if(detail=="false")
			{
				if(d3.select(this).style("fill")=="rgb(72, 93, 94)")
				{
					circele.setAttribute("stroke","#000000");
					d3.select(this).style("fill", "#a1c9fb");					
				}
			}
			else
			{
				if(document.getElementById("commid"+nameid).getAttribute("style") == "fill: #485D5E")
				{
				if(clickhist==0)
				{
				document.getElementById("commid"+nameid).setAttribute("style","fill: #a1c9fb");
				document.getElementById("comoid"+nameid).setAttribute("style","fill: #a1c9fb");}
				else
				{
				document.getElementById("comoid"+nameid).setAttribute("style","fill: #a1c9fb");
				document.getElementById("commid"+nameid).setAttribute("style","fill: #a1c9fb");
				}}
			}
			}
			
			if(document.querySelector('.right .bubblemap-box').style.display == 'block')
			{			
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
					let found = 0;
					if(GraphToMapCollection.length != 0){
						for(var jk = 0 ;jk<GraphToMapCollection.length;jk++){
						if(loc == GraphToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToMapCollection.length != 0){
						for(var jk = 0 ;jk<OrgToMapCollection.length;jk++){
						if(loc == OrgToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToMap.length != 0){
						for(var jk = 0 ;jk<ClusterChainToMap.length;jk++){
						if(loc == ClusterChainToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterGMToMap.length;jk++){
						if(loc == ClusterGMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterOMToMap.length;jk++){
						if(loc == ClusterOMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}							
					if(found==0){				
			let tar = document.querySelector('[map-id="map' + loc + '"]');
			if(tar.getAttribute('clicked')=="true"){tar.setAttribute('style', "fill: #006400")}
			else{											
			tar.setAttribute('style', "fill: #6495ed")
			}}}}
	
			if(document.querySelector('.right .organize-data-box').style.display == 'block')
			{			
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
					let found = 0;
					if(bubbleToOrgCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToOrgCollection.length;jk++){
						if(org == bubbleToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(GraphToOrgCollection.length != 0){
						for(var jk = 0 ;jk<GraphToOrgCollection.length;jk++){
						if(org == GraphToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterChainToOrg.length;jk++){
						if(org == ClusterChainToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterGOToOrg.length;jk++){
						if(org == ClusterGOToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterOMToOrg.length;jk++){
						if(org == ClusterOMToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(found==0){				
			let bubble = document.querySelector('[barid="' + org + '"]');
			if(bubble.getAttribute('clicked')=="true"){
				bubble.setAttribute('style', "fill: #006400");
				document.getElementById('text'+org).setAttribute('fill','green');				
				}
			else{											
			bubble.setAttribute('style', "fill: #6495ed")
				 document.getElementById('text'+org).setAttribute('fill','black');				
			
			bubble.setAttribute("stroke","#000000");
			bubble.setAttribute("stroke-width","0.3");
			}}}}
			
		ClusterOMTempCollection = [];
		
		document.querySelectorAll('.link-newcomtemp').forEach(ele => {
              ele.remove();
            });
	}
	
	
	function organizedata() {																//organization bar chart
var margin = {top: 30, right: 30, bottom: 70, left: 190},
    width = 700 - margin.left - margin.right,
    height = 710 - margin.top - margin.bottom;
	
	var body = d3.select(".organize-data-box").classed("svg-container", true)
	
    var svg = body.append("svg").attr("preserveAspectRatio", "xMinYMin meet").attr('id','organizesvg')
									.attr("viewBox", "0 0 700 700").append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var x = d3.scaleLinear()
          .range([0, width]);

    var y = d3.scaleBand()
        .range([height, 0]);


    var yAxis = d3.axisLeft(y);

d3.csv("organize-data/organize_"+dataselid+".csv", type, function(error, data) {
	
//		var nopoints = document.getElementById('nodata').value;			
		//const shuffled = data.sort(() => 0.5 - Math.random());

		// Get sub-array of first n elements after shuffled
		let selected = data.slice(0, nopoints);
		
		data = selected;
	
	if(nopoints==50){
		var fontsizeselect = 12;	
	}
	if(nopoints==100){
		var fontsizeselect = 7;	
	}
	if(nopoints==150){
		var fontsizeselect = 4;	
	}
	
      if (error) throw error;

data.sort(function(a, b) {
    if(a.Label < b.Labek) { return -1; }
    if(a.Label > b.Label) { return 1; }
    return 0;      });
	  
	  
  x.domain([0, d3.max(data, function(d) { return d.Value; }) + 3]);

      y.domain(data.map(function(d) { return d.Label; }))
       .paddingInner(0.1);


      svg.append("g")
          .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x));

      svg.append("g")
          .attr("class", "axis axis--y")
		  .attr("id", "axisG")
		  .style("font-size", fontsizeselect)
          .call(yAxis);

      svg.selectAll(".bar")
          .data(data)
        .enter().append("rect")
          .attr("class", "bar")
          .attr("x", 0)
          .attr("height", y.bandwidth)
          .attr("y", function(d) { return y(d.Label); })
          .attr("width", function(d) { return x(d.Value); })
		  .attr('docId',function(d) {return d.docId})
		  .attr('orgname',function(d) {return d.Label})
		  .attr('barid',function(d,i){return (i);})
		  .attr('id',function(d,i){return 'bar'+(i);})
		  .attr('freq',function(d) {return d.Value})
		  .style("fill", '#6495ed')
		  .style("stroke-width",0.3)
		  .style("stroke",'rgb(0,0,0)')
		  .attr("clickhist",0)
		  .attr('clicked',false)
		  .attr('cloned',false)
		  .attr('selecthist',0)
		  .attr('cx',0)
		  .attr('cy',function(d){return y(d.Label);})
		  .on("mouseover", organizehover)
		  .on("mouseout",organizeout)
		  .on("mouseup",organizeclick)

	d3.select("#axisG").selectAll("text")
	.attr("id", function(d,i) {return "text" + i})
	.attr("font-size", 12.8);

		svg.append("text")
		.attr("text-anchor", "middle")
		.style("font-size", "16px")
		.attr("transform", "translate("+ (width/2) + "," +(height+32) + ")")
		.style("color", "#333333")
		.text("Frequency")
		.style("font-family", "Arial"); 
		
		svg.append("text")
		.attr("text-anchor", "middle")
		.style("font-size", "13px")
		.attr("transform", "translate("+ (width/2) + "," +(height - 620) + ")")
		.style("color", "#333333")
	//	.text("Organizations")
		.style("font-family", "Arial"); 

$("#sort").on("change", change);

				var selectedorg;
				var draggableOptionsorg = {
					start: function(event, ui) {
						//get all selected...
						if (ui.helper.hasClass('selectedorg')) selectedorg = $('div.selectedorg');
						else {
							selectedorg = $(ui.helper);
							$('div.selectedorg').removeClass('selectedorg')
						}
					},
					drag: function(event, ui) {
						var currentLoc = $(this).position();
						var prevLoc = $(this).data('prevLoc');
						if (!prevLoc) {
							prevLoc = ui.originalPosition;
						}

						var offsetLeft = currentLoc.left-prevLoc.left;
						var offsetTop = currentLoc.top-prevLoc.top;

						moveSelectedorg(offsetLeft, offsetTop);
						$(this).data('prevLoc', currentLoc);
					}
				};

				function moveSelectedorg(ol, ot){
					//console.log("moving to: " + ol + ":" + ot);
					selectedorg.each(function(){
						$this =$(this);
						var p = $this.position();
						var l = p.left;
						var t = p.top;
						//console.log({id: $this.attr('id'), l: l, t: t});
						$this.css('left', l+ol);
						$this.css('top', t+ot);
					})}
			  
			  $('.organize-data-box').draggable(draggableOptionsorg);
			  $('.organize-data-box').addClass('selectedorg');

$('.organize-data-box').on('drag', reDrawLines);
$('.organize-data-box').on('resize', reDrawLines);

function change() {
	var yScale0 = y.domain(data.sort(this.checked
		? function(a, b) { return a.Value - b.Value; }
		: function(a, b) { return d3.descending(b.organize, a.organize); })
		.map(function(d) { return d.organize; }))
		.copy();
	svg.selectAll(".bar")
		.sort(function(a, b) { return yScale0(b.organize) - yScale0(a.organize); });
	var transition = svg.transition().duration(750);
	var delay = function(d, i) { return i * 50; };
	transition.selectAll(".bar")
			.delay(delay)
			.attr("y", function(d) { return yScale0(d.organize); });
	transition.select(".axis--y")
		.call(d3.axisLeft(y))
		.selectAll("g")
			.delay(delay);
}
})

		if(document.getElementById("movefixorg").checked){
			document.getElementById('orgbox').ondragstart = function() { return false; };
			$('.organize-data-box').removeClass('selectedmap')
			$('.organize-data-box').removeClass('selectedgraph')
			$('.organize-data-box').removeClass('selectedOM')
			$('.organize-data-box').removeClass('selectedGO')
			$('.organize-data-box').removeClass('selectedchain')				
		}
		else{
			document.getElementById('orgbox').ondragstart = function() { return true; };
				if(GraphToOrgCollection.length>0)
					$('.organize-data-box').addClass('selectedgraph')
				if(bubbleToOrgCollection.length==0)					
					$('.organize-data-box').addClass('selectedmap')
				if(ClusterGOToOrg.length==0)
					$('.organize-data-box').addClass('selectedGO')
				if(ClusterOMToOrg.length==0)					
					$('.organize-data-box').addClass('selectedOM')
				if(ClusterChainToOrg.length==0)					
					$('.organize-data-box').addClass('selectedchain')				
		};
     
}

	function type(d) {
      d.Value = +d.Value;
      return d;
    }
	
	let OrgToTextCollection=[],connections3ot=[],OrgToGraphCollection=[],OrgToMapCollection=[],connections3og=[],connections3ochain=[],connections3ogo=[],connections3oom=[]
		connections3om=[],OrgCollectionTemp=[],OrgToManCollection=[],connections3oman=[],OrgToChainCollection=[],OrgToGOCollection=[],OrgToOMCollection=[];
	
	function organizeclick() {																		//handle click event for organization view
		  if(window.getSelection) {
			let selection = window.getSelection();
		  
			let $event = event;
            let ele = $event.target;      
            let orgname = event.target.getAttribute('orgname');
			let orgid = event.target.getAttribute('barid');
			let clicked = ele.getAttribute('clicked');
			var cloned = event.target.getAttribute('cloned');			
			let selectedesign = document.getElementById("lineguider").value;
			let nameid = orgid;
			var	domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+125;
			let y1Loc = domRect.y+5;
	
			let track = ["OrganizeView",orgname,1,new Date(),"click"];
			tracker.push(track);
	
			let ids = []

			for(var val in documentData){
				if(documentData[val].organization.includes(orgname))
				{
					ids.push(documentData[val]);
				}
			}
			
          if(event.button === 2) {																						//right click organizatio view
	if(clicked == "true"){

			const rightCustomMenu = document.querySelector('.svg-custom-menu');

			if(manualink==false)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item-${orgid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${orgid} svg-menu-item">Submit as Answer</li><li class="svg-menu-item2-${orgid} svg-menu-item">LineGuider</li><li class="svg-menu-item3-${orgid} svg-menu-item3">Create/Delete Clone V2</li>`
			else
            rightCustomMenu.innerHTML = `<li class="svg-menu-item-${orgid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${orgid} svg-menu-item">Link To This</li><li class="svg-menu-item2-${orgid} svg-menu-item">LineGuider</li><li class="svg-menu-item3-${orgid} svg-menu-item3">Create/Delete Clone V2</li>`
            rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
			
			document.querySelector('.svg-menu-item3').style.display = 'none';
			document.querySelector('.svg-menu-item').style.display = 'none';

			
			document.querySelector(`.svg-menu-item-${orgid}`).addEventListener('click', function(e) {
			document.querySelector('.svg-custom-menu').style.display = 'none';
			

			
			for(var i = 0;i<ids.length;i++)
			{
			
			scontent = ids[i].docText;
			sid = ids[i].docId;
				
              scontent = scontent.replace(orgname, `<span class=highlighted-text>${orgname}</span>`);
	
              var note = `
              <div class="reldoc note the-node" id='`+ sid +`' style="z-index: 999;">
                <div class='close_note'>X</div>
                <h3>`+ sid +' '+orgname +`&nbsp;
				<label class="switch">
				  <input type="checkbox" id="movefixo`+sid+`">
				  <span class="slider round"></span>
				</label></h3>
                <p style="cursor:text;">
                  `+ scontent +`
                </p>
              </div>
              `;
              $("#board").append(note);
              $(".note#" + sid).css('z-index',99).draggable({
                containment: "#board",
                grid: [5, 5],
                cancel: "p"
              });
			  

              let x2Loc = parseFloat($('#' + sid).css('left').split('px')[0]) + $('#' + sid).find('.highlighted-text').position().left+5;
              let y2Loc = parseFloat($('#' + sid).css('top').split('px')[0]) + $('#' + sid).find('.highlighted-text').position().top + 40;

              OrgToTextCollection.push({
                source : {
                  id: "organize",
				  ele:orgid,
                  xOffset : x1Loc,
                  yOffset : y1Loc
                },
                target : {
                  id: "highlight-text",
				  ele:sid,
                  xOffset : x2Loc,
                  yOffset : y2Loc
                }
              });
			$('#' + sid).addClass('selectedorg');

			connections3ot.push({ source: ele, target: $('#' + sid), targetid:sid, boxElement: 'organize-data-box' });
				  
				  $('#' + sid).on('drag', function() {
                    OrgToTextCollection = [];
                    connections3ot.forEach(conn => {
                      const ele = conn.source;
					let sid = conn.target[0].id;

					domRect = ele.getBoundingClientRect();
					let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;;
					let y1Loc = domRect.y+5;

                      let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
                      let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

                      OrgToTextCollection.push({
                        source : {
                          id: "organize",
						  ele:ele.getAttribute('barid'),
                          xOffset : x1Loc,
                          yOffset : y1Loc
                        },
                        target : {
                          id: "highlight-text",
						  ele: sid,
                          xOffset : x2Loc,
                          yOffset : y2Loc
                        }
                      });
                    })
                    drawPolyLineOrg(OrgToTextCollection);
			})
			}
			drawPolyLineOrg(OrgToTextCollection);
			})
			
			document.querySelector(`.svg-menu-item1-${orgid}`).addEventListener('click', function(e) {
            document.querySelector('.svg-custom-menu').style.display = 'none';
			let track = ["OrganizeView",orgname,1,new Date(),"submit"];
			tracker.push(track);
			submitted.push(orgname);
			d3.select("#submitelements").text(onlyUnique(submitted));
			
			var study = 1;
			if(study == 0){
						
			if(manualink==false)
			{
				manualinksource.push(ele);
				manualink=true;
			}
			else
			{
				ele2 = manualinksource[0];
				
				if(ele==ele2)
				{
					console.log('Error')
					
				}
				else
				{
				var domRect2 = ele2.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;			
				let sid = ele2.getAttribute('id');

				
				OrgToManCollection.push({
                    source : {
                      id: "organize",
					  ele: ele,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "manual",
					  ele: sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				connections3oman.push({source:ele,target:ele2,tarid:sid,boxElement:'organize'});
				drawPolyLineOrg(OrgToManCollection);				
				
				manualink=false; manualinksource=[];
				}
			}
			
			}
			})
	

			document.querySelector(`.svg-menu-item2-${orgid}`).addEventListener('click', function(e) {
           
		   document.querySelector('.svg-custom-menu').style.display = 'none';
			
			let boardg = d3.select('#line-canvas');
			cloned = ele.getAttribute('cloned');
			if (cloned == 'false'){
			let targetCircle = boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "green")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.attr("clicked","false")
								.on("mouseup",cloneclick)
								.on("click",clonelclick)
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));
			
			let selectedesign = document.getElementById("lineguider").value;
			
			if(selectedesign == "design1"){
			boardg.append("circle")
                                .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'progcloneci'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "green")
                                .style("stroke-width", "1px")
								.attr('trail',false)
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));								

			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextci'+nameid;})
				.style("fill", "black")
				.text('0%');
			}
			else if(selectedesign == "design2"){
			boardg.append("rect")
                                .attr("width", 50)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclonere'+nameid;})
                                .style("fill", "grey")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
			boardg.append("rect")
                                .attr("width", 0)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclone2'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
								
			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc-38)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextre'+nameid;})
				.style("fill", "white")
				.text('0%');
			}
			


			ele.setAttribute('cloned','true');	
			}
			else
			{
				let el = document.getElementById('clone'+nameid);
				//console.log(el);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

			ele.setAttribute('cloned','false');	
			}
		  
		  var mpid,mgpid,scale=1;


		var duprecords = [];
		function createdup(path){
			
				if(duprecords.includes(path.getAttribute('id')))
					return;
				
				duprecords.push(path.getAttribute('id'));
				
				let datemp = [];

				for(var ii=0;ii<path.getTotalLength();ii++)
				{
					
					datemp.push([path.getPointAtLength(ii).x,path.getPointAtLength(ii).y])

				

				let dupcirc = boardg.append("circle")
                              .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", path.getPointAtLength(ii).x)
                                .attr("cy", path.getPointAtLength(ii).y)
								.attr("id",function(d,i){return 'dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2);})
                                .style("fill", "none")
                                .style("stroke", "none")
				
				}
				return 0;
			
		}
	


		function dragged(d) {	

			var m = d3.mouse(this)
			//console.log(m);
			var x = document.getElementsByClassName("link-newom "+nameid);
			var z = document.getElementsByClassName("link-newog "+nameid);
			var y = document.getElementsByClassName("link-newoog "+nameid);
			var w = document.getElementsByClassName("link-newoom "+nameid);				
			var xx = document.getElementsByClassName("link-newoogm "+nameid);					


			highlightline(x);
			highlightline(z);
			highlightline(y);
			highlightline(w);
			highlightline(xx);

			try{
			var clp = closestPoint(x[0],m);mgpid='m',mpid=  x[0].getAttribute('id').slice(3);}
			catch{
			var clp = closestPoint(z[0],m);mgpid='g',mpid=  z[0].getAttribute('id').slice(3);}

			for(var i=0;i<x.length;i++)
			{
			let clp2 = closestPoint(x[i],m);			
			pid = x[i].getAttribute('id').slice(3);		
			
			if(!(document.getElementById("trail"+nameid+'m'+pid))){

			tar = x[i].getAttribute('tar');
				
			var elelabel = document.getElementById('bar'+nameid).getAttribute('orgname');
			var tarlabel = document.getElementById(tar).getAttribute('label');

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'m'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "purple")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
								.attr("label",elelabel+"---"+tarlabel)
								.on("mouseup", trailcloneclick)
								.on("mouseover", function(d){tooltip3.text(event.target.getAttribute('label'));return tooltip3.style("visibility", "visible");})
								.on("mousemove", function(){return tooltip3.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");})
								.on("mouseout", function(){return tooltip3.style("visibility", "hidden");});								
			}
			else
			{
				let dist = parseInt(x[i].getTotalLength()*scale)
				//console.log(dist)
				let chp = x[i].getPointAtLength(dist);
				//console.log(chp);
				let el = document.getElementById('trail'+nameid+'m'+pid);
				el.style.opacity = "0.4";
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid='m'
				}
			}

			for(var i=0;i<z.length;i++)
			{
			let clp2 = closestPoint(z[i],m);			
			let pid = z[i].getAttribute('id').slice(3);
			
			tar = z[i].getAttribute('tar');
				
			var elelabel = document.getElementById('bar'+nameid).getAttribute('orgname');
			var tarlabel = document.getElementById(tar).getAttribute('data-name');			
			
			
			if(!(document.getElementById("trail"+nameid+'g'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'g'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "#0ca4ff")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
								.attr("label",elelabel+"---"+tarlabel)
								.on("mouseup", trailcloneclick)
								.on("mouseover", function(d){tooltip3.text(event.target.getAttribute('label'));return tooltip3.style("visibility", "visible");})
								.on("mousemove", function(){return tooltip3.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");})
								.on("mouseout", function(){return tooltip3.style("visibility", "hidden");});								
			}
			else
			{
				let dist = parseInt(z[i].getTotalLength()*scale)
				let chp = z[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'g'+pid);
				el.style.opacity = "0.4";				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'g'
				}
			}
			
			for(var i=0;i<y.length;i++)
			{
			let clp2 = closestPoint(y[i],m);			
			let pid = y[i].getAttribute('id').slice(4);		
			
			if(!(document.getElementById("trail"+nameid+'n'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'n'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "green")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(y[i].getTotalLength()*scale)
				let chp = y[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'n'+pid);
				el.style.opacity = "0.4";				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid='n'
				}
			}

			for(var i=0;i<w.length;i++)
			{
			let clp2 = closestPoint(w[i],m);			
			let pid = w[i].getAttribute('id').slice(4);
			
			
			if(!(document.getElementById("trail"+nameid+'l'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'l'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "black")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(w[i].getTotalLength()*scale)
				let chp = w[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'l'+pid);
				el.style.opacity = "0.4";
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'l'
				}
			}


			for(var i=0;i<xx.length;i++)
			{
			let clp2 = closestPoint(xx[i],m);			
			let pid = xx[i].getAttribute('id').slice(5);
			
			
			if(!(document.getElementById("trail"+nameid+'c'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'c'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "yellow")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(xx[i].getTotalLength()*scale)
				let chp = xx[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'c'+pid);
				el.style.opacity = "0.4";
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'c'
				}
			}
						
			
			d3.select("#clone"+nameid).attr("cx", clp[0]).attr("cy",clp[1]);
			try{document.getElementById("trail"+nameid+mgpid+mpid).style.opacity ="0.1";}//.outerHTML = "";}
			catch(e){//console.log('k');
			}
	
	
			let selectedesign = document.getElementById("lineguider").value;
		
			if(selectedesign == "design1"){
			
			document.getElementById('progcloneci'+nameid).setAttribute('cx',clp[0]);
			document.getElementById('progcloneci'+nameid).setAttribute('cy',clp[1]);
			document.getElementById('progtextci'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextci'+nameid).setAttribute('y',clp[1]);				
			document.getElementById('progcloneci'+nameid).setAttribute('r',scale*25);
			document.getElementById('progtextci'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}
			else if(selectedesign == "design2")
			{
			document.getElementById('progclone2'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclone2'+nameid).setAttribute('y',clp[1]-45);				
			document.getElementById('progclonere'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclonere'+nameid).setAttribute('y',clp[1]-45);			
			document.getElementById('progtextre'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextre'+nameid).setAttribute('y',clp[1]-38);				
			document.getElementById('progclone2'+nameid).setAttribute('width',scale*50);
			document.getElementById('progtextre'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}	
			
  
			if(mgpid=='m'){
				let path = document.getElementsByClassName("link-newom "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
			var length = path.getTotalLength();			
			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}
			}
			else{
			if(mgpid=='g'){
				let path = document.getElementsByClassName("link-newog "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';

			var length = path.getTotalLength();			
			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}		
			}
			else{
			if(mgpid=='n'){
				let path = document.getElementsByClassName("link-newoog "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
	var length = path.getTotalLength();			
			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}				
			}
			else{
			if(mgpid=='l'){
				let path = document.getElementsByClassName("link-newoom "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
			var length = path.getTotalLength();			
			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}				
			}
			else{
			if(mgpid=='c'){
				let path = document.getElementsByClassName("link-newoogm "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';	
			var length = path.getTotalLength();			
			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}				
			}			
			}}}}
			
		//reDrawLines();	
	}
		
		function getDistance(x1, y1, x2, y2){
			let y = x2 - x1;
			let x = y2 - y1;
			
			return Math.sqrt(x * x + y * y);
		}
		
		function closestPoint(pathNode, point) {
			  var pathLength = pathNode.getTotalLength(),
				  precision = 8,
				  best,
				  bestLength,
				  bestDistance = Infinity;

			  // linear scan for coarse approximation
			  for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {
				if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {
				  best = scan, bestLength = scanLength, bestDistance = scanDistance;
				}
			  }

			  // binary search for precise estimate
			  precision /= 2;
			  while (precision > 0.5) {
				var before,
					after,
					beforeLength,
					afterLength,
					beforeDistance,
					afterDistance;
				if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {
				  best = before, bestLength = beforeLength, bestDistance = beforeDistance;
				} else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {
				  best = after, bestLength = afterLength, bestDistance = afterDistance;
				} else {
				  precision /= 2;
				}
			  }

			  best = [best.x, best.y];
			  best.distance = Math.sqrt(bestDistance);
			  return best;

			  function distance2(p) {
				var dx = p.x - point[0],
					dy = p.y - point[1];
				return dx * dx + dy * dy;
			  }}
	
		function dragended(d){
				
			var x = document.getElementsByClassName("link-newom "+nameid);
			var z = document.getElementsByClassName("link-newog "+nameid);
			var y = document.getElementsByClassName("link-newoog "+nameid);
			var w = document.getElementsByClassName("link-newoom "+nameid);
			var xx = document.getElementsByClassName("link-newoogm "+nameid);
			
			unhighlightline(x);
			unhighlightline(z);
			unhighlightline(y);
			unhighlightline(w);			
			unhighlightline(xx);		
			
			let trailcirc = document.getElementsByClassName("trail"+nameid)
			for(var j=0;j<trailcirc.length;j++){
				//trailcirc[j].style.display='none';
			}
			
			d3.select()
			
		}
	
		function dragstart(d){

			if(document.getElementsByClassName("trail"+nameid))
			{
				let trailcirc = document.getElementsByClassName("trail"+nameid)
				for(var j=0;j<trailcirc.length;j++){
					trailcirc[j].style.display='block';
				}		
			}
		}
	
		function highlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'red';
				
			}			
		}
		
		function unhighlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'rgb(149, 199, 244';
				
			}			
		}	
	
		function cloneclick(){
			
			if(event.button==2){
				
				const rightCustomMenu = document.querySelector('.svg-custom-menu');
		
				rightCustomMenu.innerHTML = `<li class="svg-menu-item-${nameid} svg-menu-item">Delete Clone</li>`
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
		
		document.querySelector(`.svg-menu-item-${nameid}`).addEventListener('click', function(e) {
			
	   document.querySelector('.svg-custom-menu').style.display = 'none';
	
				let el = document.getElementById('clone'+nameid);
				//console.log(el);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
			let selectedesign = document.getElementById("lineguider").value;				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

			ele.setAttribute('cloned','false');	
		})
				
			}
			
		}
			
		function trailcloneclick(){
			if(this.style.opacity != 0.05){
			this.style.opacity = 0.05}
			else
				this.style.opacity = 0.4;
		}
		
		function clonelclick(){
			var dates = $('[id^="trail'+nameid+'"]');
			if(this.getAttribute('clicked')=="false"){	
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "hidden";
			this.setAttribute('clicked',"true");
			}}
			else{
			for(var i=0;i<dates.length;i++){
			dates[i].style.visibility = "visible";
			this.setAttribute('clicked',"false");}
			}
		}
		

	})
		  
			document.querySelector(`.svg-menu-item3-${orgid}`).addEventListener('click', function(e) {
			
			document.querySelector('.svg-custom-menu').style.display = 'none';

			let boardg = d3.select('#line-canvas');

			if (cloned == 'false'){
			let targetCircle = boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "blue")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.call(d3.drag()
								.on("drag", draggedv));
								
			circele.setAttribute('cloned','true');	
			
			 
			let tcirc = document.getElementById('clone'+nameid);
			let x1Loct = parseFloat(tcirc.getAttribute("cx"));
			let y1Loct = parseFloat(tcirc.getAttribute("cy"));
			
			if(document.querySelector('.right .all-data-box').style.display == 'block')												///connect to graph
			{			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			domRect = tar.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect.y+5;
			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}


			if(document.querySelector('.right .bubblemap-box').style.display == 'block')											//connect to map
			{			
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			let tar = document.querySelector('[map-id="map' + loc + '"]');

			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;	

			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}			

				drawPolyLineClusterGM(ClusterGMCloneToGraph);

			
			function draggedv(d){				
				d3.select(this).attr("cx", d3.event.x).attr("cy", d3.event.y);
				reDrawLines();
			}
				
			}
			else
			{
				let el = document.getElementById('clone'+nameid);
				el.remove(); 
				ClusterGMCloneToGraph=[],connections4cgclone=[]
			document.querySelectorAll('.link-newcgmclone').forEach(ele => {
				  ele.remove();
			  });
			
				circele.setAttribute('cloned','false');	
			}
			
			})

	}
	
				else{
			const rightCustomMenu = document.querySelector('.svg-custom-menu');
			rightCustomMenu.innerHTML = `<li class="svg-menu-item-${orgid} svg-menu-item">Submit as Answer</li>`
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
			
			document.querySelector(`.svg-menu-item-${orgid}`).addEventListener('click', function(e) {
				
			let track = ["OrganizeView",orgname,1,new Date(),"submit"];
			tracker.push(track);
			submitted.push(orgname);
			d3.select("#submitelements").text(onlyUnique(submitted));			
				
			})
			
		}
			}
			else{
			for (var i = OrgToGraphCollection.length - 1; i >= 0; --i) {
			  if (OrgToGraphCollection[i].source.ele == orgid) {
				OrgToGraphCollection.splice(i, 1); 
			  }}
			  
			for (var i = OrgToMapCollection.length - 1; i >= 0; --i) {
			  if (OrgToMapCollection[i].source.ele == orgid) {
				OrgToMapCollection.splice(i, 1); 
			  }} 
			  
			for (var i = connections3og.length - 1; i >= 0; --i) {
			  if (connections3og[i].source == ele) {
				connections3og.splice(i, 1); 
			  }}
			  
			for (var i = connections3om.length - 1; i >= 0; --i) {
			  if (connections3om[i].source == ele) {
				connections3om.splice(i, 1); 
			  }}
			for (var i = OrgToGOCollection.length - 1; i >= 0; --i) {
			  if (OrgToGOCollection[i].source.ele == orgid) {
				OrgToGOCollection.splice(i, 1); 
			  }}
			  
			for (var i = OrgToOMCollection.length - 1; i >= 0; --i) {
			  if (OrgToOMCollection[i].source.ele == orgid) {
				OrgToOMCollection.splice(i, 1); 
			  }} 
			  
			for (var i = OrgToChainCollection.length - 1; i >= 0; --i) {
			  if (OrgToChainCollection[i].source.ele == orgid) {
				OrgToChainCollection.splice(i, 1); 
			  }} 
			  
			for (var i = connections3oom.length - 1; i >= 0; --i) {
			  if (connections3oom[i].source == ele) {
				connections3oom.splice(i, 1); 
			  }}
			  
			
			for (var i = connections3ogo.length - 1; i >= 0; --i) {
			  if (connections3ogo[i].source == ele) {
				connections3ogo.splice(i, 1); 
			  }}
			  
			  
			for (var i = connections3ochain.length - 1; i >= 0; --i) {
			  if (connections3ochain[i].source == ele) {
				connections3ochain.splice(i, 1); 
			  }}	  
			  
			document.querySelectorAll('.link-newog').forEach(ele => {
              if(ele.getAttribute('ele') == orgid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newom').forEach(ele => {
              if(ele.getAttribute('ele') == orgid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newoom').forEach(ele => {
              if(ele.getAttribute('ele') == orgid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newoog').forEach(ele => {
              if(ele.getAttribute('ele') == orgid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newoogm').forEach(ele => {
              if(ele.getAttribute('ele') == orgid){
				  ele.remove();
			  }});			  
			  
			  
			if(event.target.getAttribute('clickhist') > 0)
			   {
				  d3.select(this).style("fill", "#6495ed");
			
				  

			   }
			if(clicked == "false"){
				d3.select(this).style("stroke","black");
				
				
			if(document.querySelector('.right .all-data-box').style.display == 'block'){
				var gids  = mapcondata[orgid]['og'].split(',');
				for(var j=0;j<gids.length;j++)
				{		
				let tar = document.querySelector('[personsid="' + gids[j] + '"]');
				tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))+1);		
				if(tar.getAttribute('clicked')=="false"){				
				let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);}	
				domRect = tar.getBoundingClientRect();
				let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;;
				let y2Loc = domRect.y+5;
				
				OrgToGraphCollection.push({
                    source : {
                      id: "organize",
					  ele: orgid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "graph",
					  ele: tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				  
				  connections3og.push({source:ele,target:tar,boxElement:'organize-box'});
				}
				d3.select(this).style("fill", "#006400");
				 document.getElementById('text'+orgid).setAttribute('fill','green');				
				hist = parseInt(event.target.getAttribute('clickhist'))+1;
				event.target.setAttribute('clickhist', hist);
				event.target.setAttribute('clicked', true);
				d3.select(this).style("stroke-width", 1);
				if(!(document.getElementById("movefixgraph").checked))								
					$('.all-data-box').addClass('selectedorg');		
				if(selectedesign != "design"){				  
				drawPolyLineOrg(OrgToGraphCollection);}					
				}
				
			if(document.querySelector('.right .bubblemap-box').style.display == 'block'){
				var gids  = mapcondata[orgid]['om'].split(',');
				for(var j=0;j<gids.length;j++)
				{	
				let tar = document.querySelector('[map-id="map' + gids[j] + '"]');
				tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))+1);		
				if(tar.getAttribute('clicked')=="false"){				
				let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);}
				domRect2 = tar.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;
				
            OrgToMapCollection.push({
                  source : {
                    id: "organize",
					ele:orgid,
                    xOffset : x1Loc,
                    yOffset : y1Loc
                  },
                  target : {
                    id: "bubble-map",
					ele:tar,
                    xOffset : x2Loc,
                    yOffset : y2Loc
                  }
                });
			connections3om.push({ source: ele, target: tar, boxElement: 'organize-box' });
			}
			d3.select(this).style("fill", "#006400");
				 document.getElementById('text'+orgid).setAttribute('fill','green');							
			hist = parseInt(event.target.getAttribute('clickhist'))+1;
			event.target.setAttribute('clickhist', hist);
			event.target.setAttribute('clicked', true);			
			d3.select(this).style("stroke-width", 1);
			if(!(document.getElementById("movefixmap").checked))				
				$('.bubblemap-box').addClass('selectedorg');
				if(selectedesign != "design"){				  			
				drawPolyLineOrg(OrgToMapCollection);}
			}
			
			if(document.querySelector('.right .clusterOM-data-box').style.display == 'block'){				//connecting cluster views 
				var om = document.getElementsByClassName("dotom");
				for(var i=0;i<om.length;i++)
				{
					if(om[i].getAttribute('org').split(',').includes(orgid))
					{
					
					var nid = om[i].getAttribute('clusteromid');
					var circele = document.getElementById("comcircid"+nid);
					let detail = circele.getAttribute('detailed');					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("comoid"+nid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);
					}

					OrgToOMCollection.push({
						source : {
						  id: "organize",
						  ele: orgid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterOM",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					connections3oom.push({ source: ele, target: circele, boxElement: 'organize-box' });
					
					d3.select(this).style("fill", "#006400");
				 document.getElementById('text'+orgid).setAttribute('fill','green');									
					hist = parseInt(event.target.getAttribute('clickhist'))+1;
					event.target.setAttribute('clickhist', hist);
					event.target.setAttribute('clicked', true);			
					d3.select(this).style("stroke-width", 1);
					if(!(document.getElementById("movefixOM").checked))				
						$('.clusterOM-data-box').addClass('selectedorg');	
				if(selectedesign != "design"){				  					
				drawPolyLineOrg(OrgToOMCollection);}	
				  }
				}
			}
			
			if(document.querySelector('.right .clusterGO-data-box').style.display == 'block'){			
				var go = document.getElementsByClassName("dotgo");
				for(var i=0;i<go.length;i++)
				{
					if(go[i].getAttribute('org').split(',').includes(orgid))
					{
					
					var nid = go[i].getAttribute('clustergoid');
					var circele = document.getElementById("cgocircid"+nid);
					let detail = circele.getAttribute('detailed');					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgooid"+nid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);
					}

					OrgToGOCollection.push({
						source : {
						  id: "organize",
						  ele: orgid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterGO",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					connections3ogo.push({ source: ele, target: circele, boxElement: 'organize-box' });
					}
					d3.select(this).style("fill", "#006400");
				 document.getElementById('text'+orgid).setAttribute('fill','green');									
					hist = parseInt(event.target.getAttribute('clickhist'))+1;
					event.target.setAttribute('clickhist', hist);
					event.target.setAttribute('clicked', true);			
					d3.select(this).style("stroke-width", 1);
					if(!(document.getElementById("movefixGM").checked))				
						$('.clusterGM-data-box').addClass('selectedorg');	
				if(selectedesign != "design"){				  										
				drawPolyLineOrg(OrgToGOCollection);}
				  }
				}
		
			if(document.querySelector('.right .clusterchain-data-box').style.display == 'block'){			
				var chain = document.getElementsByClassName("dotchain");
				for(var i=0;i<chain.length;i++)
				{
				if(chain[i].getAttribute('organize').split(',').includes(orgid))
				{
				var nid = chain[i].getAttribute('clusterchainid');	
				var circele = document.getElementById("cchaincircid"+nid);
				var detail = circele.getAttribute('detailed');
				
				if(detail=="false")
				{
					let domRect = circele.getBoundingClientRect();
					let radius = parseInt(circele.getAttribute('r'));
					var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
					var y2Loc = domRect.y+parseInt(radius/3);
				}
				else
				{	
					let eleme2 = document.getElementById("cchainoid"+nid);
					let domRect2 = eleme2.getBoundingClientRect();
					let height2 = eleme2.getAttribute('height');
					let width2 = eleme2.getAttribute('width');
					var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
					var y2Locm = domRect2.y+parseInt(height2/7);
					
					var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
					var y2Loc = domRect2.y+parseInt(height2/7);
				}

					OrgToChainCollection.push({
						source : {
						  id: "organize",
						  ele: orgid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterchain",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					connections3ochain.push({ source: ele, target: circele, boxElement: 'organize-box' });
					
					d3.select(this).style("fill", "#006400");
				 document.getElementById('text'+orgid).setAttribute('fill','green');									
					hist = parseInt(event.target.getAttribute('clickhist'))+1;
					event.target.setAttribute('clickhist', hist);
					event.target.setAttribute('clicked', true);			
					d3.select(this).style("stroke-width", 1);
					if(!(document.getElementById("movefixCBI").checked))									
						$('.clusterchain-data-box').addClass('selectedorg');		
				if(selectedesign != "design"){				  					
				drawPolyLineOrg(OrgToChainCollection);	}		
				  }
				}
			}			
			}
			
			else{
								
				var gids  = mapcondata[orgid]['om'].split(',');
					
				for(var j=0;j<gids.length;j++)
				{
				let tar = document.querySelector('[map-id="map' + gids[j] + '"]');
				tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))-1);
				}
				
				var gids  = mapcondata[orgid]['og'].split(',');
					
				for(var j=0;j<gids.length;j++)
				{
				let tar = document.querySelector('[personsid="' + gids[j] + '"]');
					tar.setAttribute('selecthist',parseInt(tar.getAttribute('selecthist'))-1);
				}
				
				d3.select(this).style("stroke","none");
				
				if(OrgToMapCollection.length==0)
					$('.bubblemap-box').removeClass('selectedorg')
				if(OrgToGraphCollection.length==0)					
					$('.all-data-box').removeClass('selectedorg')
				if(OrgToGOCollection.length==0)
					$('.clusterGO-data-box').removeClass('selectedorg')
				if(OrgToOMCollection.length==0)					
					$('.clusterOM-data-box').removeClass('selectedorg')
				if(OrgToChainCollection.length==0)					
					$('.clusterchain-data-box').removeClass('selectedorg')
				if(cloned=="true"){
				
			let el = document.getElementById('clone'+nameid);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
			let selectedesign = document.getElementById("lineguider").value;
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

				ele.setAttribute('cloned','false');}
					let found = 0;
					if(bubbleToOrgCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToOrgCollection.length;jk++){
						if(orgid == bubbleToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(GraphToOrgCollection.length != 0){
						for(var jk = 0 ;jk<GraphToOrgCollection.length;jk++){
						if(orgid == GraphToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterChainToOrg.length;jk++){
						if(orgid == ClusterChainToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterGOToOrg.length;jk++){
						if(orgid == ClusterGOToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterOMToOrg.length;jk++){
						if(orgid == ClusterOMToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(found==1){d3.select(this).style("fill", "#ff7f50");}	
					else{
						d3.select(this).style("fill", "#485D5E");
					}
				d3.select(this).style("stroke-width", 1);
				event.target.setAttribute('clicked', false);
			}}
			
			}

			
		var abc1 = $('[id^="dupcirc"]');
for(let iii = 0;iii<abc1.length;iii++){
		abc1[iii].parentNode.appendChild(abc1[iii]);
}

		var abc2 = $('[id^="clone"]');
for(let iii = 0;iii<abc2.length;iii++){
		abc2[iii].parentNode.appendChild(abc2[iii]);
}

		var abc4 = $('[id^="progcloneci"]');
for(let iii = 0;iii<abc4.length;iii++){
		abc4[iii].parentNode.appendChild(abc4[iii]);
}		
		var abc3 = $('[id^="progtextci"]');
for(let iii = 0;iii<abc3.length;iii++){
		abc3[iii].parentNode.appendChild(abc3[iii]);
}
		var abc5 = $('[id^="progress"]');
for(let iii = 0;iii<abc5.length;iii++){
		abc5[iii].parentNode.appendChild(abc5[iii]);
}
			
}


	function organizehover() {																		//handle hover event for organization view
			
			let $event = event;
            let ele = $event.target;      
            let orgname = event.target.getAttribute('orgname');
			let orgid = event.target.getAttribute('barid');
			let clicked = event.target.getAttribute('clicked');
			let selectedesign = document.getElementById("lineguider").value;
			startimeo = new Date();
	
			//if(clicked != "true"){
			domRect = ele.getBoundingClientRect();
			let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+125;;
			let y1Loc = domRect.y+5;

			if(clicked != "true"){
				if(d3.select(this).style("fill") != "rgb(255, 60, 0)"){
			d3.select(this).style("fill", "#485D5E");
			}}
			if(document.querySelector('.right .all-data-box').style.display == 'block')
			{
				var gids  = mapcondata[orgid]['og'].split(',');
				for(var j=0;j<gids.length;j++)
				{
				let tar = document.querySelector('[personsid="' + gids[j] + '"]');
				if(tar.getAttribute('clicked')=="false"){				
				let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);}
				document.getElementById('pername'+gids[j]).setAttribute('fill','red');

				domRect = tar.getBoundingClientRect();
				let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;;
				let y2Loc = domRect.y+5;
				OrgCollectionTemp.push({
                    source : {
                      id: "organize",
					  ele: orgid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "graph",
					  ele: tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				}
			if(d3.select(this).style("fill")=="rgb(173, 158, 227)"){
				d3.select(this).style("fill", "#485D5E");
				 document.getElementById('text'+orgid).setAttribute('fill','DimGray');				
				d3.select(this).style("stroke-width", 1);}
				if(selectedesign != "design"){				  
				drawPolyLineOrgTemp(OrgCollectionTemp);}
				
			}
				
			if(document.querySelector('.right .bubblemap-box').style.display == 'block')
				{
				var gids  = mapcondata[orgid]['om'].split(',');
				for(var j=0;j<gids.length;j++)
				{			
				let tar = document.querySelector('[map-id="map' + gids[j] + '"]');
				if(tar.getAttribute('clicked')=="false"){				
				let bright = increase_brightness('#ff7f50',-parseInt(tar.getAttribute('selecthist')*10));
				tar.setAttribute('style', "fill: "+bright);}			
				domRect2 = tar.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;
				
            OrgCollectionTemp.push({
                  source : {
                    id: "organize",
					ele:orgid,
                    xOffset : x1Loc,
                    yOffset : y1Loc
                  },
                  target : {
                    id: "bubble-map",
                    xOffset : x2Loc,
                    yOffset : y2Loc
                  }
                });
			}
			if(d3.select(this).style("fill")=="rgb(173, 158, 227)"){
				d3.select(this).style("fill", "#485D5E");
				 document.getElementById('text'+orgid).setAttribute('fill','DimGray');								
				d3.select(this).style("stroke-width", 1);}
				if(selectedesign != "design"){				  
				drawPolyLineOrgTemp(OrgCollectionTemp);}
				}
			
			if(document.querySelector('.right .clusterOM-data-box').style.display == 'block'){			
				var om = document.getElementsByClassName("dotom");
				for(var i=0;i<om.length;i++)
				{
					if(om[i].getAttribute('org').split(',').includes(orgid))
					{
					
					var nid = om[i].getAttribute('clusteromid');
					var circele = document.getElementById("comcircid"+nid);
				if(circele.getAttribute('clicked')=="false"){				
				circele.setAttribute('style', "fill: #ff7f50")}
					let detail = circele.getAttribute('detailed');					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("comoid"+nid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);
					}

					OrgCollectionTemp.push({
						source : {
						  id: "organize",
						  ele: orgid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterOM",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					  if(d3.select(this).style("fill")=="rgb(173, 158, 227)"){
					   d3.select(this).style("fill", "#485D5E");
				 document.getElementById('text'+orgid).setAttribute('fill','DimGray');									   
					  d3.select(this).attr("r", function(d){ return 7 })}
				if(selectedesign != "design"){				  
				drawPolyLineOrgTemp(OrgCollectionTemp);}
				}
				}
			}
			
			if(document.querySelector('.right .clusterGO-data-box').style.display == 'block'){			
				var go = document.getElementsByClassName("dotgo");
				for(var i=0;i<go.length;i++)
				{
					if(go[i].getAttribute('org').split(',').includes(orgid))
					{
					
					var nid = go[i].getAttribute('clustergoid');
					var circele = document.getElementById("cgocircid"+nid);
				if(circele.getAttribute('clicked')=="false"){				
				circele.setAttribute('style', "fill: #ff7f50")}
					let detail = circele.getAttribute('detailed');					
					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgooid"+nid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width/6);
						var y2Locm = domRect.y+parseInt(height2/6);
						
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/6);
					}

					OrgCollectionTemp.push({
						source : {
						  id: "organize",
						  ele: orgid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterGO",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					  if(d3.select(this).style("fill")=="rgb(173, 158, 227)"){
					   d3.select(this).style("fill", "#485D5E");
				 document.getElementById('text'+orgid).setAttribute('fill','DimGray');									   
					  d3.select(this).attr("r", function(d){ return 7 })}
				if(selectedesign != "design"){				  
				drawPolyLineOrgTemp(OrgCollectionTemp);}
				}
				}
			}
			if(document.querySelector('.right .clusterchain-data-box').style.display == 'block'){			
				var chain = document.getElementsByClassName("dotchain");
				for(var i=0;i<chain.length;i++)
				{
				if(chain[i].getAttribute('organize').split(',').includes(orgid))
				{
				var nid = chain[i].getAttribute('clusterchainid');	
				var circele = document.getElementById("cchaincircid"+nid);
				if(circele.getAttribute('clicked')=="false"){				
				circele.setAttribute('style', "fill: #ff7f50")}
				var detail = circele.getAttribute('detailed');
				
				if(detail=="false")
				{
					let domRect = circele.getBoundingClientRect();
					let radius = parseInt(circele.getAttribute('r'));
					var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
					var y2Loc = domRect.y+parseInt(radius/3);
				}
				else
				{	
					let eleme2 = document.getElementById("cchainoid"+nid);
					let domRect2 = eleme2.getBoundingClientRect();
					let height2 = eleme2.getAttribute('height');
					let width2 = eleme2.getAttribute('width');
					var x2Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
					var y2Locm = domRect2.y+parseInt(height2/7);
					
					var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
					var y2Loc = domRect2.y+parseInt(height2/7);
				}

					OrgCollectionTemp.push({
						source : {
						  id: "organize",
						  ele: orgid,
						  xOffset : x1Loc,
						  yOffset : y1Loc
						},
						target : {
						  id: "clusterchain",
						  ele: circele,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
					  if(d3.select(this).style("fill")=="rgb(173, 158, 227)"){
					   d3.select(this).style("fill", "#485D5E");
				 document.getElementById('text'+orgid).setAttribute('fill','DimGray');									   
					  d3.select(this).attr("r", function(d){ return 7 })}
				if(selectedesign != "design"){				  
				drawPolyLineOrgTemp(OrgCollectionTemp);}
				}
				}
			}
			
			//}
      }

	function organizeout(){																		//handle out event for organization view		            let orgname = event.target.getAttribute('orgname');
			let $event = event;
            let ele = $event.target;      
            let orgname = event.target.getAttribute('orgname');
			let orgid = event.target.getAttribute('barid');
			let clicked = event.target.getAttribute('clicked');
			
		OrgCollectionTemp = [],
		document.querySelectorAll('.link-newotemp').forEach(ele => {
              ele.remove();
            });
			
			
					if (clicked == "false") {
		if ((d3.select(this).attr("selecthist") > 0)) {
				let bright = increase_brightness('#ff7f50', -parseInt(d3.select(this).attr('selecthist') * 10));
				d3.select(this).attr('style', "fill: " + bright);
		}
		else {
			d3.select(this).attr('style', "fill: #6495ed");
		}}
			
		//if((d3.select(this).style("fill")== "rgb(72, 93, 94)")){
		//	d3.select(this).style("fill", "#6495ed");
		//		 document.getElementById('text'+orgid).setAttribute('fill','black');							
		//	d3.select(this).style("stroke-width", 0.3);}

		d3.select(this).style("stroke","black");
		d3.select(this).style("stroke-width",0.3);
		
		let track = ["OrgView",orgname,startimeo,new Date(),"hover"];
		tracker.push(track);

			let ids = []

			for(var val in documentData){
				if(documentData[val].organization.includes(orgname))
				{
					ids.push(documentData[val]);
				}
			}
			

			if(document.querySelector('.right .bubblemap-box').style.display == 'block')
			{
					var gids  = mapcondata[orgid]['om'].split(',');
					for(var j=0;j<gids.length;j++)
					{
					let found = 0;
					if(GraphToMapCollection.length != 0){
						for(var jk = 0 ;jk<GraphToMapCollection.length;jk++){
						if(gids[j] == GraphToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToMapCollection.length != 0){
						for(var jk = 0 ;jk<OrgToMapCollection.length;jk++){
						if(gids[j] == OrgToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToMap.length != 0){
						for(var jk = 0 ;jk<ClusterChainToMap.length;jk++){
						if(gids[j] == ClusterChainToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterGMToMap.length;jk++){
						if(gids[j] == ClusterGMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterOMToMap.length;jk++){
						if(gids[j] == ClusterOMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}							
					if(found==0){						
					let tar = document.querySelector('[map-id="map' + gids[j] + '"]');
				if(tar.getAttribute('clicked')=="true"){tar.setAttribute('style', "fill: #006400")}
				else{													
					tar.setAttribute('style', "fill: #6495ed")
					}}}}
			
			if(document.querySelector('.right .all-data-box').style.display == 'block')
			{
					var gids  = mapcondata[orgid]['og'].split(',');
					for(var j=0;j<gids.length;j++)
					{	
					let found = 0;
					if(bubbleToGraphCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToGraphCollection.length;jk++){
						if(gids[j] == bubbleToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToGraphCollection.length != 0){
						for(var jk = 0 ;jk<OrgToGraphCollection.length;jk++){
						if(gids[j] == OrgToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGraph.length;jk++){
						if(gids[j] == ClusterChainToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGMToGraph.length;jk++){
						if(gids[j] == ClusterGMToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGOToGraph.length;jk++){
						if(gids[j] == ClusterGOToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(found==0){						
					let tar = document.querySelector('[personsid="' + gids[j] + '"]');
				if(tar.getAttribute('clicked')=="true"){
					tar.setAttribute('style', "fill: #006400")
					document.getElementById('pername'+gids[j]).setAttribute('fill','green');				
					}
				else{													
					tar.setAttribute('style', "fill: #6495ed")
				 document.getElementById('pername'+gids[j]).setAttribute('fill','black');				
					
			}}}}
		
			var om = document.getElementsByClassName("dotom");
			for(var i=0;i<om.length;i++)
			{
				if(om[i].getAttribute('org').split(',').includes(orgid))
				{
					let nid = om[i].getAttribute('clusteromid');
					let found = 0;
					if(bubbleToOMCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToOMCollection.length;jk++){
						if(nid == bubbleToOMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(OrgToOMCollection.length != 0){
						for(var jk = 0 ;jk<OrgToOMCollection.length;jk++){
						if(nid == OrgToOMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToOM.length != 0){
						for(var jk = 0 ;jk<ClusterChainToOM.length;jk++){
						if(nid == ClusterChainToOM[jk].target.ele.id.slice(9)){
							found=1;}}}									
					if(found==0){											
					var circele = document.getElementById("comcircid"+nid);	
				if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
				else{													
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");
				}}}
			}
			var go = document.getElementsByClassName("dotgo");
			for(var i=0;i<go.length;i++)
			{
					if(go[i].getAttribute('org').split(',').includes(orgid))
					{
					let nid = go[i].getAttribute('clustergoid');
					let found = 0;
					if(OrgToGOCollection.length != 0){
						for(var jk = 0 ;jk<OrgToGOCollection.length;jk++){
						if(nid == OrgToGOCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(GraphToGOCollection.length != 0){
						for(var jk = 0 ;jk<GraphToGOCollection.length;jk++){
						if(nid == GraphToGOCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToGO.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGO.length;jk++){
						if(nid == ClusterChainToGO[jk].target.ele.id.slice(9)){
							found=1;}}}						
					if(found==0){										
					var circele = document.getElementById("cgocircid"+nid);
				if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
				else{						
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");	
					}}
			}}
			var chain = document.getElementsByClassName("dotchain");
			for(var i=0;i<chain.length;i++)
			{
				if(chain[i].getAttribute('organize').split(',').includes(orgid))
				{
				let nid = chain[i].getAttribute('clusterchainid');	
					let found = 0;
					if(bubbleToChainCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToChainCollection.length;jk++){
						if(nid == bubbleToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}
					if(GraphToChainCollection.length != 0){
						for(var jk = 0 ;jk<GraphToChainCollection.length;jk++){
						if(nid == GraphToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}
					if(OrgToChainCollection.length != 0){
						for(var jk = 0 ;jk<OrgToChainCollection.length;jk++){
						if(nid == OrgToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}			
					if(found==0){						
				var circele = document.getElementById("cchaincircid"+nid);
				if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
				else{					
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");
					}
				}
	}}}

	let ClusterChainTempCollection = [],ClusterChainToGraph=[],ClusterChainToMap=[],ClusterChainToOrg=[],ClusterChainToGM=[],ClusterChainToOM=[],
	ClusterChainToGO=[],ClusterChainToTextCollection=[],connections7ct=[],connections7cg=[],connections7cm=[],connections7co=[],
	connections7cgm=[],connections7cgo=[],connections7com=[],ClusterChainToManCollection=[],connections7cman=[],ClusterChaindetail=false;


	window.onclick = function(e){
	   document.querySelector('.svg-custom-menu').style.display = 'none';

	}

	function ClusterChain(){																		//Creating tri cluster chain

		var margin = {top: 10, right: 10, bottom: 10, left: 10},
		width = 1600 - margin.left - margin.right,
		height = 1200 - margin.top - margin.bottom;
  
		 body = d3.select(".clusterchain-data-box").classed("svg-container", true).style("width", '600px').style("height",'650px');
		
			var svg = body.append("svg").attr("preserveAspectRatio", "xMinYMin meet").attr("id","svgclusterchain")
										.attr("viewBox", "0 0 1600 1200").attr("transform","translate(" + margin.left + "," + margin.top + ")");

		var xValue = function(d) { return d.x;};
		let  x = d3.scaleLinear()
			.range([ 0, width ]);
		let	xMap = function(d) { return x(xValue(d))-160;};
		let	xMap0 = function(d) { return x(xValue(d))-250;};
		let	xMap01 = function(d) { return x(xValue(d))-190;};
		let	xMap02 = function(d) { return x(xValue(d))-130;};


		var yValue = function(d) { return d["y"];};
		let  y = d3.scaleLinear()
			.range([ height, 0]);
		let yMap = function(d) { return y(yValue(d))+70;};
		let	yMap0 = function(d) { return y(yValue(d))+20;};


  d3.csv("biclusterchainref1.csv", function(data){											//creating the tricluster view thorugh a file


 var sliderSimple = d3
    .sliderBottom()
    .min(0.2)
    .max(1)
	.tickFormat(d3.format('.0%'))
    .width(450)
	.step(0.2)
	.default(0.2)
	.ticks(5)
    .on('onchange', val => {
		let tempd = []
		ClusterChainToTextCollection=[],ClusterChainToMap = [], ClusterChainToOrg = [],ClusterChainToGraph=[],ClusterChainToGM=[],ClusterChainToGO=[],ClusterChainToOM=[],
		connections7cm=[],connections7co=[],connections7cg=[],connections7cgm=[],connections7cgo=[],connections7com=[],connections7ct=[];
		
            document.querySelectorAll('.link-newccg').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcbim').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcco').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newccgm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newccgo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newccom').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcbit').forEach(ele => {
              ele.remove();
            });
			
		let temp1 = document.getElementsByClassName('rectachain');
		for(var i = 0; i < temp1.length; i++){temp1[i].setAttribute('visibility', "hidden");}	
		let temp2 = document.getElementsByClassName('rectbchain');
		for(var i = 0; i < temp2.length; i++){temp2[i].setAttribute('visibility', "hidden");}
		let temp3 = document.getElementsByClassName('rectcchain');
		for(var i = 0; i < temp3.length; i++){temp3[i].setAttribute('visibility', "hidden");}
		let temp4 = document.getElementsByClassName('rectdchain');
		for(var i = 0; i < temp4.length; i++){temp4[i].setAttribute('visibility', "hidden");}
		let temp6 = document.getElementsByClassName('rectechain');
		for(var i = 0; i < temp6.length; i++){temp6[i].setAttribute('visibility', "hidden");}
		let temp7 = document.getElementsByClassName('rectfchain');
		for(var i = 0; i < temp7.length; i++){temp7[i].setAttribute('visibility', "hidden");}
		let temp5 = document.getElementsByClassName('dotchain');
		for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('visibility', "hidden");}
		for(var i = 0; i < temp5.length; i++){
		if(temp5[i].getAttribute('perc')>=val)
		{
			if(temp5[i].getAttribute('detailed')=="false"){
				temp5[i].setAttribute('visibility', "visible");
			}
			else
			{
				tempd.push(temp5[i].getAttribute('clusterchainid'));
			}
		}}
		for(var j = 0; j< tempd.length; j++){
		for(var i = 0; i < temp1.length; i++){
			if(temp1[i].getAttribute("clusterchainid")==tempd[j]){
				temp1[i].setAttribute('visibility', "visible");
		}}
		for(var i = 0; i < temp2.length; i++){
			if(temp2[i].getAttribute("clusterchainid")==tempd[j]){
				temp2[i].setAttribute('visibility', "visible");
		}}
		for(var i = 0; i < temp3.length; i++){
			if(temp3[i].getAttribute("clusterchainid")==tempd[j]){
				temp3[i].setAttribute('visibility', "visible");
		}}
		for(var i = 0; i < temp4.length; i++){
			if(temp4[i].getAttribute("clusterchainid")==tempd[j]){
				temp4[i].setAttribute('visibility', "visible");
		}}		
		for(var i = 0; i < temp6.length; i++){
			if(temp6[i].getAttribute("clusterchainid")==tempd[j]){
				temp6[i].setAttribute('visibility', "visible");
		}}
		for(var i = 0; i < temp7.length; i++){
			if(temp7[i].getAttribute("clusterchainid")==tempd[j]){
				temp7[i].setAttribute('visibility', "visible");
		}}
		}
		
    });

  var gSimple = d3
    .select('div#slider-simple')
    .append('svg')
	.attr('id',"sliderchain")
    .attr('width', 600)
    .attr('height', 120)
    .append('g')
    .attr('transform', 'translate(80,30)');

  gSimple.call(sliderSimple);

  
  x.domain([d3.min(data, xValue)-1, d3.max(data, xValue)+1]);
  y.domain([d3.min(data, yValue)-1, d3.max(data, yValue)+1]);
  
  changes(data);
  
    });
		
	function changes(data){														//slider function of the chain view
	
	let radius = data.length;

svg.selectAll(".dotchain")
      .data(data)
    .enter().append("circle")
      .attr("class", "dotchain")
      .attr("r", function(d){return parseInt(d['person'].split(',').length)*5+parseInt(d['organize'].split(',').length)*5+parseInt(d['map'].split(',').length)*5})
      .attr("cx", xMap)
      .attr("cy", yMap)
	  .attr('person',function(d){return d['person'];})
	  .attr('map',function(d){return d['map'];})
	  .attr('organize',function(d){return d['organize'];})
	  .attr('clusterchainid',function(d,i){return (i+1);})
	  .attr('perc',function(d){return d['perc'];})
	  .style("fill", '#a1c9fb')
	  .style("stroke", "black")
	  .attr("stroke-width",2)	  
	  .attr("visibility", "visible")	  
	  .attr("clickhist",0)
	  .attr('detailed',false)		  	  
	  .attr("clicked", false)
	  .attr("cloned",false)
	  .attr('id',function(d,i){return "cchaincircid"+(i+1);})		  
      .on("mouseover", ClusterChainhover)
	  .on("mouseout",ClusterChainout)
	  .on("mouseup",ClusterChainclick);
	  
	svg.selectAll(".rectdchain")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectdchain")
		  .attr('width', 60)
		  .attr('height', function(d){return d['person'].split(',').length * 12;})
		  .attr("x", xMap0)
		  .attr("y", function(d) { return y(yValue(d))+20+60-(d['person'].split(',').length * 12);})
		.style("fill", '#a1c9fb')
		.attr("visibility", "hidden")
		.attr('stroke', '#000000')
		.attr('stroke-width', '1')
			.attr('clusterchainid',function(d,i){return (i+1);})	
		  .attr('id',function(d,i){return "cchaingid"+(i+1);});

		  
	svg.selectAll(".rectechain")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectechain")
		  .attr('width', 60)
		  .attr('height', function(d){return d['map'].split(',').length * 7.5;})
		  .attr("x", xMap01)
		  .attr("y", function(d) { return y(yValue(d))+20+60-(d['map'].split(',').length * 7.5);})
		.style("fill", '#a1c9fb')
		.attr('stroke', '#000000')
		.attr('stroke-width', '1')
		  .attr("visibility", "hidden")
		  .attr('clusterchainid',function(d,i){return (i+1);})	
		  .attr('id',function(d,i){return "cchainmid"+(i+1);});	

	svg.selectAll(".rectfchain")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectfchain")
		  .attr('width', 60)
		  .attr('height', function(d){return d['organize'].split(',').length * 8.5;})
		  .attr("x", xMap02)
		  .attr("y", function(d) { return y(yValue(d))+20+60-(d['organize'].split(',').length * 8.5);})
		.style("fill", '#a1c9fb')
		.attr('stroke', '#000000')
		.attr('stroke-width', '1')
		  .attr("visibility", "hidden")
		  .attr('clusterchainid',function(d,i){return (i+1);})	
		  .attr('id',function(d,i){return "cchainoid"+(i+1);});	

	svg.selectAll(".rectachain")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectachain")
		  .attr('width', 60)
		  .attr('height', 60)
		  .attr("x", xMap0)
		  .attr("y", yMap0)
			.attr("fill-opacity", 0)
			.attr('stroke', '#000000')
			.attr('stroke-width', '1')
			  .attr("visibility", "hidden")
		  .attr('clusterchainid',function(d,i){return (i+1);})
		  .attr('id',function(d,i){return "cchaing"+(i+1);})		  
		  .on("mouseover", ClusterChainhover)
		  .on("mouseout",ClusterChainout)
		  .on("mouseup",ClusterChainclick);
	  	
	svg.selectAll(".rectbchain")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectbchain")
		  .attr('width', 60)
		  .attr('height', 60)
		  .attr("x", xMap01)
		  .attr("y", yMap0)
			.attr("fill-opacity", 0)
			.attr('stroke', '#000000')
			.attr('stroke-width', '1')
			  .attr("visibility", "hidden")
		  .attr('clusterchainid',function(d,i){return (i+1);})
		  .attr('id',function(d,i){return "cchainm"+(i+1);})
		  .on("mouseover", ClusterChainhover)
		  .on("mouseout",ClusterChainout)
		  .on("mouseup",ClusterChainclick);

	svg.selectAll(".rectcchain")
		  .data(data)
		.enter().append("rect")
		  .attr("class", "rectcchain")
		  .attr('width', 60)
		  .attr('height', 60)
		  .attr("x", xMap02)
		  .attr("y", yMap0)
			.attr("fill-opacity", 0)
			.attr('stroke', '#000000')
			.attr('stroke-width', '1')
			  .attr("visibility", "hidden")
		  .attr('clusterchainid',function(d,i){return (i+1);})
		  .attr('id',function(d,i){return "cchaino"+(i+1);})
		  .on("mouseover", ClusterChainhover)
		  .on("mouseout",ClusterChainout)
		  .on("mouseup",ClusterChainclick);		  
	  
}

				var selectedchain;
				var draggableOptionschain = {
					start: function(event, ui) {
						//get all selected...
						if (ui.helper.hasClass('selectedchain')) selectedchain = $('div.selectedchain');
						else {
							selectedchain = $(ui.helper);
							$('div.selectedchain').removeClass('selectedchain')
						}
					},
					drag: function(event, ui) {
						var currentLoc = $(this).position();
						var prevLoc = $(this).data('prevLoc');
						if (!prevLoc) {
							prevLoc = ui.originalPosition;
						}

						var offsetLeft = currentLoc.left-prevLoc.left;
						var offsetTop = currentLoc.top-prevLoc.top;

						moveSelectedchain(offsetLeft, offsetTop);
						$(this).data('prevLoc', currentLoc);
					}
				};

				function moveSelectedchain(ol, ot){
					//console.log("moving to: " + ol + ":" + ot);
					selectedchain.each(function(){
						$this =$(this);
						var p = $this.position();
						var l = p.left;
						var t = p.top;
						//console.log({id: $this.attr('id'), l: l, t: t});
						$this.css('left', l+ol);
						$this.css('top', t+ot);
					})}
			  
			  $('.clusterchain-data-box').draggable(draggableOptionschain);
			  $('.clusterchain-data-box').addClass('selectedchain');	


	$('.clusterchain-data-box').on('drag', reDrawLines);
	$("#movefixCBI").on("change", function(e){
		if(document.getElementById("movefixCBI").checked){
			document.getElementById('clusterChain').ondragstart = function() { return false; };
			$('.clusterchain-data-box').removeClass('selectedorg')
			$('.clusterchain-data-box').removeClass('selectedmap')
			$('.clusterchain-data-box').removeClass('selectedgraph')				
		}
		else{
			document.getElementById('clusterChain').ondragstart = function() { return true; };
				if(GraphToChainCollection.length>0)
					$('.clusterchain-data-box').addClass('selectedgraph')
				if(bubbleToChainCollection.length==0)					
					$('.clusterchain-data-box').addClass('selectedmap')
				if(OrgToChainCollection.length==0)
					$('.clusterchain-data-box').addClass('selectedorg')				
		};
      })

	function ClusterChainhover() {													//hover event of the tricluster view
			
		    let $event = event;
            let ele = $event.target;
			var nameid = ele.getAttribute('clusterchainid');

			var circele = document.getElementById("cchaincircid"+nameid);
			var clicked = circele.getAttribute('clicked');
			var clickhist = circele.getAttribute('clickhist');
			var detail = circele.getAttribute('detailed');
			var locs = circele.getAttribute('map');
			var orgs = circele.getAttribute('organize');
			var persons = circele.getAttribute('person');
			let selectedesign = document.getElementById("lineguider").value;

			startimechain = new Date();

		//	if(clicked != "true"){
			if(detail=="false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cchaingid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Locg = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Locg = domRect.y+parseInt(height/7);
				
				let eleme2 = document.getElementById("cchainmid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height2 = eleme2.getAttribute('height');
				let width2 = eleme2.getAttribute('width');
				var x1Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
				var y1Locm = domRect2.y+parseInt(height2/7);
				
				let eleme3 = document.getElementById("cchainoid"+nameid);
				let domRect3 = eleme3.getBoundingClientRect();
				let height3 = eleme3.getAttribute('height');
				let width3 = eleme3.getAttribute('width');
				var x1Loco = domRect3.x-document.getElementById('leftplace').offsetWidth+parseInt(width3/7);
				var y1Loco = domRect3.y+parseInt(height3/7);
				
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
				var y1Loc = domRect2.y+parseInt(height2/7);
			}
			
			
			var clustergo = $("[clustergoid]")
			var clustergm = $("[clustergmid]")
			var clusterom = $("[clusteromid]")
			
			for(var i=0;i<clustergo.length;i++)
			{
			
			if(document.querySelector('.right .clusterGO-data-box').style.display == 'block')
			{
				if(orgs==clustergo[i].getAttribute('org'))
				{
					var goid = clustergo[i].getAttribute('clustergoid')
					let detailgo = clustergo[i].getAttribute('detailed')
					if(detailgo=="false")
					{
						let circid = document.getElementById('cgocircid'+goid);
						circid.setAttribute('style', "fill: #ff7f50")
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgooid"+goid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					if(detail=="false")
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Loc,
							  yOffset : y1Loc
							},
							target : {
							  id: "clusterGO",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
					else
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Loco,
							  yOffset : y1Loco
							},
							target : {
							  id: "clusterGO",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
				}
				if(persons==clustergo[i].getAttribute('person'))
				{
					var goid = clustergo[i].getAttribute('clustergoid')
					let detailgo = clustergo[i].getAttribute('detailed')
					if(detailgo=="false")
					{
						let circid = document.getElementById('cgocircid'+goid);
						circid.setAttribute('style', "fill: #ff7f50")						
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgogid"+goid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					
					if(detail=="false")
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Loc,
							  yOffset : y1Loc
							},
							target : {
							  id: "clusterGO",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
					else
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Locg,
							  yOffset : y1Locg
							},
							target : {
							  id: "clusterGO",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
				}
			}}			
			for(var i=0;i<clustergm.length;i++)
			{
			if(document.querySelector('.right .clusterGM-data-box').style.display == 'block')
			{				
				if(persons==clustergm[i].getAttribute('person'))
				{
					var gmid = clustergm[i].getAttribute('clustergmid')

					let detailgm = clustergm[i].getAttribute('detailed');
					
					if(detailgm=="false")
					{
						let circid = document.getElementById('cgmcircid'+gmid);
						circid.setAttribute('style', "fill: #ff7f50")
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgmgid"+gmid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					
					if(detail=="false")
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Loc,
							  yOffset : y1Loc
							},
							target : {
							  id: "clusterGM",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
					else
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Locg,
							  yOffset : y1Locg
							},
							target : {
							  id: "clusterGM",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
				}
				if(locs==clustergm[i].getAttribute('map'))
				{
					var gmid = clustergm[i].getAttribute('clustergmid')
					let detailgm = clustergm[i].getAttribute('detailed');
					
					if(detailgm=="false")
					{
						let circid = document.getElementById('cgmcircid'+gmid);
						circid.setAttribute('style', "fill: #ff7f50")						
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgmmid"+gmid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					
					if(detail=="false")
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Loc,
							  yOffset : y1Loc
							},
							target : {
							  id: "clusterGM",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
					else
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Locm,
							  yOffset : y1Locm
							},
							target : {
							  id: "clusterGM",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
				}
			}}
			for(var i=0;i<clusterom.length;i++)
			{
			if(document.querySelector('.right .clusterOM-data-box').style.display == 'block')
			{
				if(orgs==clusterom[i].getAttribute('org'))
				{
					var omid = clusterom[i].getAttribute('clusteromid')

					let detailom = clusterom[i].getAttribute('detailed')
					if(detailom=="false")
					{
						let circid = document.getElementById('comcircid'+omid);
						circid.setAttribute('style', "fill: #ff7f50")
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("comoid"+omid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					if(detail=="false")
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Loc,
							  yOffset : y1Loc
							},
							target : {
							  id: "clusterOM",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
					else
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Loco,
							  yOffset : y1Loco
							},
							target : {
							  id: "clusterOM",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
				}
				if(locs==clusterom[i].getAttribute('map'))
				{
					var omid = clusterom[i].getAttribute('clusteromid')
					let detailom = clusterom[i].getAttribute('detailed')
					
					if(detailom=="false")
					{
						let circid = document.getElementById('comcircid'+omid);
						circid.setAttribute('style', "fill: #ff7f50")						
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("commid"+omid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					if(detail=="false")
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Loc,
							  yOffset : y1Loc
							},
							target : {
							  id: "clusterOM",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
					else
					{
					ClusterChainTempCollection.push({
							source : {
							  id: "clusterchain",
							  xOffset : x1Loco,
							  yOffset : y1Loc
							},
							target : {
							  id: "clusterOM",
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
				}
			}
			}
			if(document.querySelector('.right .bubblemap-box').style.display == 'block')
			{
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			try{
			let tar = document.querySelector('[map-id="map' + loc + '"]');
			if(tar.getAttribute('clicked')=="false"){				
			tar.setAttribute('style', "fill: #ff7f50")}		
			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;	
			
			if(detail=="false")
			{
			ClusterChainTempCollection.push({
				source : {
					id: "clusterchain",
					xOffset : x1Loc,
					yOffset : y1Loc
					},
					target : {
					id: "bubble-map",
					xOffset : x2Loc,
					 yOffset : y2Loc
					}
					});
				}
			else
			{
			ClusterChainTempCollection.push({
				source : {
				  id: "clusterchain",
				  xOffset : x1Locm,
				  yOffset : y1Locm
					},
				target : {
				  id: "bubble-map",
				  xOffset : x2Loc,
				  yOffset : y2Loc
					}
				  });
			}			
			}catch(error){}}
			}
			if(document.querySelector('.right .organize-data-box').style.display == 'block')
			{			
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
			let bubble = document.querySelector('[barid="' + org + '"]');
			if(bubble.getAttribute('clicked')=="false"){				
			bubble.setAttribute('style', "fill: #ff7f50")}
			document.getElementById('text'+org).setAttribute('fill','red');							
			domRect2 = bubble.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;
			if(detail=="false")
			{
			ClusterChainTempCollection.push({
				source : {
					id: "clusterchain",
					xOffset : x1Loc,
					yOffset : y1Loc
					},
					target : {
					id: "organize",
					xOffset : x2Loc,
					 yOffset : y2Loc
					}
					});
				}
			else
			{
			ClusterChainTempCollection.push({
				source : {
				  id: "clusterchain",
				  xOffset : x1Loco,
				  yOffset : y1Loco
					},
				target : {
				  id: "organize",
				  xOffset : x2Loc,
				  yOffset : y2Loc
					}
				  });
			}
		}}
			if(document.querySelector('.right .all-data-box').style.display == 'block')
			{
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			if(tar.getAttribute('clicked')=="false"){				
			tar.setAttribute('style', "fill: #ff7f50")}
			document.getElementById('pername'+person).setAttribute('fill','red');			
			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;
			
			if(detail=="false")
			{
			ClusterChainTempCollection.push({
				source : {
					id: "clusterchain",
					xOffset : x1Loc,
					yOffset : y1Loc
					},
					target : {
					id: "graph",
					xOffset : x2Loc,
					 yOffset : y2Loc
					}
					});
				}
			else
			{
			ClusterChainTempCollection.push({
				source : {
				  id: "clusterchain",
				  xOffset : x1Locg,
				  yOffset : y1Locg
					},
				target : {
				  id: "graph",
				  xOffset : x2Loc,
				  yOffset : y2Loc
					}
				  });
			}
			}
			}
			if(detail == "false")
			{
			{
			if(clicked == "false"){
			if(d3.select(this).style("fill")=="rgb(161, 201, 251)"){
				d3.select(this).style("fill", "#485D5E");
			}
			}}
			}
			else
			{
				document.getElementById("cchaingid"+nameid).setAttribute("style","fill: #485D5E");
				document.getElementById("cchainmid"+nameid).setAttribute("style","fill: #485D5E");
				document.getElementById("cchainoid"+nameid).setAttribute("style","fill: #485D5E");
			}
			if(selectedesign!="design"){			
			drawPolyLineClusterChain(ClusterChainTempCollection);}
		//}
}
	function ClusterChainout(){												//out event of tricluster chain
		
			
		    let $event = event;
            let ele = $event.target;
			var nameid = ele.getAttribute('clusterchainid');
			var circele = document.getElementById("cchaincircid"+nameid);
			var clicked = circele.getAttribute('clicked');
			var clickhist = circele.getAttribute('clickhist');
			var detail = circele.getAttribute('detailed');
			var locs = circele.getAttribute('map');
			var orgs = circele.getAttribute('organize');
			var persons = circele.getAttribute('person');

			
			let track = ["ClusterChain",nameid,startimechain,new Date(),"hover"];
			tracker.push(track);

			if(clicked != "true")
			{

			if(detail=="false")
			{
				if(d3.select(this).style("fill")=="rgb(72, 93, 94)")
				{
					circele.setAttribute("stroke","#000000");
					d3.select(this).style("fill", "#a1c9fb");					
				}
			}
			else
			{
				if(document.getElementById("cchaingid"+nameid).getAttribute("style") == "fill: #485D5E")
				{
				if(clickhist==0)
				{
				document.getElementById("cchaingid"+nameid).setAttribute("style","fill: #a1c9fb");
				document.getElementById("cchainmid"+nameid).setAttribute("style","fill: #a1c9fb");
				document.getElementById("cchainoid"+nameid).setAttribute("style","fill: #a1c9fb");}
				else
				{
				document.getElementById("cchaingid"+nameid).setAttribute("style","fill: #a1c9fb");
				document.getElementById("cchainmid"+nameid).setAttribute("style","fill: #a1c9fb");
				document.getElementById("cchainoid"+nameid).setAttribute("style","fill: #a1c9fb");
				}}
			}
			}
			
		ClusterChainTempCollection = [];
		if(document.querySelector('.right .bubblemap-box').style.display == 'block')
			{
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
				let found = 0;
					if(GraphToMapCollection.length != 0){
						for(var jk = 0 ;jk<GraphToMapCollection.length;jk++){
						if(loc == GraphToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToMapCollection.length != 0){
						for(var jk = 0 ;jk<OrgToMapCollection.length;jk++){
						if(loc == OrgToMapCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToMap.length != 0){
						for(var jk = 0 ;jk<ClusterChainToMap.length;jk++){
						if(loc == ClusterChainToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterGMToMap.length;jk++){
						if(loc == ClusterGMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToMap.length != 0){
						for(var jk = 0 ;jk<ClusterOMToMap.length;jk++){
						if(loc == ClusterOMToMap[jk].target.ele.id.slice(3)){
							found=1;}}}							
					if(found==0){			
			let tar = document.querySelector('[map-id="map' + loc + '"]');
				if(tar.getAttribute('clicked')=="true"){tar.setAttribute('style', "fill: #006400")}
				else{							
			tar.setAttribute('style', "fill: #6495ed")
			}}}}

		if(document.querySelector('.right .organize-data-box').style.display == 'block')
			{			
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
					let found = 0;
					if(bubbleToOrgCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToOrgCollection.length;jk++){
						if(org == bubbleToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(GraphToOrgCollection.length != 0){
						for(var jk = 0 ;jk<GraphToOrgCollection.length;jk++){
						if(org== GraphToOrgCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterChainToOrg.length;jk++){
						if(org == ClusterChainToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterGOToOrg.length;jk++){
						if(org == ClusterGOToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterOMToOrg.length != 0){
						for(var jk = 0 ;jk<ClusterOMToOrg.length;jk++){
						if(org == ClusterOMToOrg[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(found==0){			
			let bubble = document.querySelector('[barid="' + org + '"]');
				if(bubble.getAttribute('clicked')=="true"){
					bubble.setAttribute('style', "fill: #006400")
					document.getElementById('text'+org).setAttribute('fill','green');}
				else{					
			bubble.setAttribute('style', "fill: #6495ed")
	document.getElementById('text'+org).setAttribute('fill','black');			
			bubble.setAttribute("stroke","#000000");
			bubble.setAttribute("stroke-width","0.3");			
			}}}}
		
		if(document.querySelector('.right .all-data-box').style.display == 'block')
			{
			for(var j = 0; j<persons.split(',').length;j++)
			{
				let person = persons.split(',')[j];		
					let found = 0;
					if(bubbleToGraphCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToGraphCollection.length;jk++){
						if(person == bubbleToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(OrgToGraphCollection.length != 0){
						for(var jk = 0 ;jk<OrgToGraphCollection.length;jk++){
						if(person == OrgToGraphCollection[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterChainToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGraph.length;jk++){
						if(person == ClusterChainToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGMToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGMToGraph.length;jk++){
						if(person == ClusterGMToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(ClusterGOToGraph.length != 0){
						for(var jk = 0 ;jk<ClusterGOToGraph.length;jk++){
						if(person == ClusterGOToGraph[jk].target.ele.id.slice(3)){
							found=1;}}}
					if(found==0){						
			let tar = document.querySelector('[personsid="' + person + '"]')
				if(tar.getAttribute('clicked')=="true"){
				tar.setAttribute('style', "fill: #006400");
				document.getElementById('pername'+person).setAttribute('fill','green');
				}
				else{				
			tar.setAttribute('style', "fill: #6495ed");
				document.getElementById('pername'+person).setAttribute('fill','black');
			
			}}}}
			
			var clustergo = $("[clustergoid]")
			var clustergm = $("[clustergmid]")
			var clusterom = $("[clusteromid]")

			if(document.querySelector('.right .clusterGM-data-box').style.display == 'block')
			{
			for(var i=0;i<clustergm.length;i++)
			{
			if(persons==clustergm[i].getAttribute('person'))
			{
					var gmid = clustergm[i].getAttribute('clustergmid')
					let found = 0;
					if(bubbleToGMCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToGMCollection.length;jk++){
						if(gmid == bubbleToGMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(GraphToGMCollection.length != 0){
						for(var jk = 0 ;jk<GraphToGMCollection.length;jk++){
						if(gmid == GraphToGMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToGM.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGM.length;jk++){
						if(gmid == ClusterChainToGM[jk].target.ele.id.slice(9)){
							found=1;}}}						
					if(found==0){					
					let circele = document.getElementById('cgmcircid'+gmid);
				if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
				else{						
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");
			}}}
			if(locs==clustergm[i].getAttribute('map'))
			{
					var gmid = clustergm[i].getAttribute('clustergmid')		

					let circid = document.getElementById('cgmcircid'+gmid);
					let found = 0;
					if(bubbleToGMCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToGMCollection.length;jk++){
						if(gmid == bubbleToGMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(GraphToGMCollection.length != 0){
						for(var jk = 0 ;jk<GraphToGMCollection.length;jk++){
						if(gmid == GraphToGMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToGM.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGM.length;jk++){
						if(gmid == ClusterChainToGM[jk].target.ele.id.slice(9)){
							found=1;}}}						
					if(found==0){					
					let circele = document.getElementById('cgmcircid'+gmid);
				if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
				else{						
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");
			}}}
			}}	

			if(document.querySelector('.right .clusterGO-data-box').style.display == 'block')
			{
			for(var i=0;i<clustergo.length;i++)
			{
			if(orgs==clustergo[i].getAttribute('org'))
			{
					var goid = clustergo[i].getAttribute('clustergoid')
					let found = 0;
					if(OrgToGOCollection.length != 0){
						for(var jk = 0 ;jk<OrgToGOCollection.length;jk++){
						if(goid == OrgToGOCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(GraphToGOCollection.length != 0){
						for(var jk = 0 ;jk<GraphToGOCollection.length;jk++){
						if(goid == GraphToGOCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToGO.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGO.length;jk++){
						if(goid == ClusterChainToGO[jk].target.ele.id.slice(9)){
							found=1;}}}		
					if(found==0){						
					let circele = document.getElementById('cgocircid'+goid);
				if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
				else{						
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");
			}}}
				if(persons==clustergo[i].getAttribute('person'))
				{
					var goid = clustergo[i].getAttribute('clustergoid');
					let found = 0;
					if(OrgToGOCollection.length != 0){
						for(var jk = 0 ;jk<OrgToGOCollection.length;jk++){
						if(goid == OrgToGOCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(GraphToGOCollection.length != 0){
						for(var jk = 0 ;jk<GraphToGOCollection.length;jk++){
						if(goid == GraphToGOCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToGO.length != 0){
						for(var jk = 0 ;jk<ClusterChainToGO.length;jk++){
						if(goid == ClusterChainToGO[jk].target.ele.id.slice(9)){
							found=1;}}}		
					if(found==0){						
					let circele = document.getElementById('cgocircid'+goid);
				if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
				else{						
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");
			}}}
			
			}}
		
			if(document.querySelector('.right .clusterOM-data-box').style.display == 'block')
			{
			for(var i=0;i<clusterom.length;i++)
			{
			if(orgs==clusterom[i].getAttribute('org'))
			{
					var omid = clusterom[i].getAttribute('clusteromid')
					let found = 0;
					if(bubbleToOMCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToOMCollection.length;jk++){
						if(omid == bubbleToOMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(OrgToOMCollection.length != 0){
						for(var jk = 0 ;jk<OrgToOMCollection.length;jk++){
						if(omid == OrgToOMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToOM.length != 0){
						for(var jk = 0 ;jk<ClusterChainToOM.length;jk++){
						if(omid == ClusterChainToOM[jk].target.ele.id.slice(9)){
							found=1;}}}									
					if(found==0){						
					let circele = document.getElementById('comcircid'+omid);
				if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
				else{						
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");
			}}}
			if(locs==clusterom[i].getAttribute('map'))
			{
					var omid = clusterom[i].getAttribute('clusteromid')
					let found = 0;
					if(bubbleToOMCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToOMCollection.length;jk++){
						if(omid == bubbleToOMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(OrgToOMCollection.length != 0){
						for(var jk = 0 ;jk<OrgToOMCollection.length;jk++){
						if(omid == OrgToOMCollection[jk].target.ele.id.slice(9)){
							found=1;}}}
					if(ClusterChainToOM.length != 0){
						for(var jk = 0 ;jk<ClusterChainToOM.length;jk++){
						if(omid == ClusterChainToOM[jk].target.ele.id.slice(9)){
							found=1;}}}									
					if(found==0){						
					let circele = document.getElementById('comcircid'+omid);
				if(circele.getAttribute('clicked')=="true"){circele.setAttribute('style', "fill: #006400")}
				else{						
					circele.setAttribute('style', "fill: #a1c9fb")
					circele.setAttribute("stroke","#000000");
			}}}			
			
			}}
			
				
		
		document.querySelectorAll('.link-newcbitemp').forEach(ele => {
              ele.remove();
            });
			
			
	}
	
	function ClusterChainclick(){												//click event of tricluster chain
	if(window.getSelection) {
          let selection = window.getSelection();
		    let $event = event;
            let ele = $event.target;
			var nameid = ele.getAttribute('clusterchainid');

			var circele = document.getElementById("cchaincircid"+nameid);
			var clicked = circele.getAttribute('clicked');
			var clickhist = circele.getAttribute('clickhist');
			var detail = circele.getAttribute('detailed');
			var locs = circele.getAttribute('map');
			var orgs = circele.getAttribute('organize');
			var persons = circele.getAttribute('person');
			var cloned = event.target.getAttribute('cloned');			
			let selectedesign = document.getElementById("lineguider").value;

			let track = ['ClusterChain',nameid,1,new Date(),"click"];
			tracker.push(track);

			if(detail=="false")
			{
				let domRect = circele.getBoundingClientRect();
				let radius = parseInt(circele.getAttribute('r'));
				var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
				var y1Loc = domRect.y+parseInt(radius/3);
			}
			else
			{
				let eleme = document.getElementById("cchaingid"+nameid);
				let domRect = eleme.getBoundingClientRect();
				let height = eleme.getAttribute('height');
				let width = eleme.getAttribute('width');
				var x1Locg = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(width/7);
				var y1Locg = domRect.y+parseInt(height/7);
				
				let eleme2 = document.getElementById("cchainmid"+nameid);
				let domRect2 = eleme2.getBoundingClientRect();
				let height2 = eleme2.getAttribute('height');
				let width2 = eleme2.getAttribute('width');
				var x1Locm = domRect2.x-document.getElementById('leftplace').offsetWidth+parseInt(width2/7);
				var y1Locm = domRect2.y+parseInt(height2/7);
				
				let eleme3 = document.getElementById("cchainoid"+nameid);
				let domRect3 = eleme3.getBoundingClientRect();
				let height3 = eleme3.getAttribute('height');
				let width3 = eleme3.getAttribute('width');
				var x1Loco = domRect3.x-document.getElementById('leftplace').offsetWidth+parseInt(width3/7);
				var y1Loco = domRect3.y+parseInt(height3/7);
				
				var x1Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
				var y1Loc = domRect2.y+parseInt(height2/7);
			}
		  
		  
		  if(event.button === 2) {
	if(clicked == "true"){

			const rightCustomMenu = document.querySelector('.svg-custom-menu');

			if(detail=="false" && manualink==false)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">View Summary</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link From This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
            else if(detail != "false" && manualink==true)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">Show Compact View</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link To This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
			else if(detail == "false" && manualink==true)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">View Summary</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link To This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`
			else if(detail != "false" && manualink==false)
			rightCustomMenu.innerHTML = `<li class="svg-menu-item0-${nameid} svg-menu-item">Show Relevant Text</li><li class="svg-menu-item1-${nameid} svg-menu-item">Show Compact View</li><li class="svg-menu-item2-${nameid} svg-menu-item">View Summary for All</li><li class="svg-menu-item3-${nameid} svg-menu-item">Link From This</li><li class="svg-menu-item4-${nameid} svg-menu-item">LineGuider</li><li class="svg-menu-item5-${nameid} svg-menu-item5">Create/Delete Clone V2</li>`

            rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
			
			document.querySelector('.svg-menu-item5').style.display = 'none';

			
			document.querySelector(`.svg-menu-item0-${nameid}`).addEventListener('click', function(e) {
            document.querySelector('.svg-custom-menu').style.display = 'none';
			var docids = [], organ=[], locats=[],perso=[];
			
			for(var i = 0; i<locs.split(',').length;i++)
			{
			loc = locs.split(',')[i]
			let sor = document.querySelector('[map-id="map' + loc + '"]').getAttribute('data-location');
			if(!(locats.includes(sor)))
				{
						locats.push(sor);
				}
				
			for (var val in documentData){
				if(documentData[val].location.includes(sor))
				{
					if(!(docids.includes(documentData[val])))
						docids.push(documentData[val]);
				}}
			}
			
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
			let tar = document.querySelector('[barid="' + org + '"]').getAttribute('orgname');
			if(!(organ.includes(tar)))
				{
						organ.push(tar);
				}
			
			for (var val in documentData){
				if(documentData[val].organization.includes(tar))
				{
					if(!(docids.includes(documentData[val])))
						docids.push(documentData[val]);
				}}			
			}
			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let sor = document.querySelector('[personsid="' + person + '"]').getAttribute('data-name');
			if(!(perso.includes(sor)))
				{
						perso.push(sor);
				}
				
			for (var val in documentData){
				if(documentData[val].name.includes(sor))
				{
					if(!(docids.includes(documentData[val])))
						docids.push(documentData[val]);
				}}			
			}
			
			
			for (var val in docids){
					let content = docids[val].docText;
					let id = docids[val].docId;

					for (var o in organ)
					{
						if(docids[val].organization.includes(organ[o])){
							sor = organ[o];
							content = content.replace(sor, `<span class=highlighted-text>${sor}</span>`);
						}
					}
					for (var l in locats)
					{
						if(docids[val].location.includes(locats[l])){
							tar = locats[l];
							content = content.replace(tar, `<span class=highlighted-text>${tar}</span>`);
						}
						if(tar == "New York City")
						{
							tar = "NYC"
							content = content.replace(tar, `<span class=highlighted-text>${tar}</span>`);
						}
						if(tar == "Virginia")
						{
							tar = "VA"
							content = content.replace(tar, `<span class=highlighted-text>${tar}</span>`);
						}
						if(tar == "St. Mary 's Terrace")
						{
							tar = "St. Mary's Terrace"
							content = content.replace(tar, `<span class=highlighted-text>${tar}</span>`);
						}
					}
					for (var p in perso)
					{
						if(docids[val].name.includes(perso[p])){
							tar2 = perso[p];
							content = content.replace(tar2, `<span class=highlighted-text>${tar2}</span>`);
						}
					}
					
                  var note = `
                  <div class="reldoc note the-node" id='`+ id +`' style="z-index: 999;">
                    <div class='close_note'>X</div>
                    <h3>`+ id +`&nbsp;
					<label class="switch">
					  <input type="checkbox" id="movefixch`+id+`">
					  <span class="slider round"></span>
					</label></h3>
                    <p style="cursor:text;">
                      `+ content +`
                    </p>
                  </div>
                  `;
                  $("#board").append(note);
                  $(".note#" + id).css('z-index',99).draggable({
                    containment: "#board",
                    grid: [5, 5],
                    cancel: "p"
                  });
				 
				 let x2Loc = parseFloat($('#' + id).css('left').split('px')[0]) + $('#' + id).find('.highlighted-text').position().left+5;
                  let y2Loc = parseFloat($('#' + id).css('top').split('px')[0]) + $('#' + id).find('.highlighted-text').position().top + 40;

                  ClusterChainToTextCollection.push({
                    source : {
                      id: "clusterchain",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "highlight-text",
					  ele:id,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });

                  connections7ct.push({ source: circele, sourceid:nameid,target: $('#' + id),targetid:id });
				  $('#'+id).addClass('selectedchain');	
				  
				  $('#' + id).on('drag', function() {
                    ClusterChainToTextCollection = [];
                    connections7ct.forEach(conn => {
                    const ele = conn.source;
					let nameid = ele.getAttribute('clusterchainid')
					let sid = conn.target[0].id;

					var circele = document.getElementById("cchaincircid"+nameid);

					if(detail == "false")
					{
						let domRect = circele.getBoundingClientRect();
						let radius = parseInt(circele.getAttribute('r'));
						var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y1Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme = document.getElementById("cchainmid"+nameid);
						let domRect = eleme.getBoundingClientRect();
						let height = eleme.getAttribute('height');
						var x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth;
						var y1Loc = domRect.y+parseInt(height/6);
					}
					
                      let x2Loc = parseFloat(conn.target.css('left').split('px')[0]) + conn.target.find('.highlighted-text').position().left+5;
                      let y2Loc = parseFloat(conn.target.css('top').split('px')[0]) + conn.target.find('.highlighted-text').position().top + 40;

                      ClusterChainToTextCollection.push({
                        source : {
                          id: "clusterchain",
						  ele:nameid,
                          xOffset : x1Loc,
                          yOffset : y1Loc
                        },
                        target : {
                          id: "highlight-text",
						  ele:sid,
                          xOffset : x2Loc,
                          yOffset : y2Loc
                        }
                      });
                    })
                    drawPolyLineClusterChain(ClusterChainToTextCollection);
                  });
				  drawPolyLineClusterChain(ClusterChainToTextCollection);
				  }
			})
		
			document.querySelector(`.svg-menu-item1-${nameid}`).addEventListener('click', function(e) {
			document.querySelector('.svg-custom-menu').style.display = 'none';

				if(detail=="false")
				{
					document.getElementById("cchaing"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cchaingid"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cchainm"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cchainmid"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cchaino"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cchainoid"+nameid).setAttribute('visibility', "visible");
					if(clicked=="true"){
						document.getElementById("cchaingid"+nameid).setAttribute('style', "fill: #006400");
						document.getElementById("cchainmid"+nameid).setAttribute('style', "fill: #006400");
						document.getElementById("cchainoid"+nameid).setAttribute('style', "fill: #006400");}
					else if (clickhist>0){
						document.getElementById("cchaingid"+nameid).setAttribute('style', "fill: #6495ed");
						document.getElementById("cchainmid"+nameid).setAttribute('style', "fill: #6495ed");
						document.getElementById("cchainoid"+nameid).setAttribute('style', "fill: #6495ed");
					}
					document.getElementById("cchaincircid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cchaincircid"+nameid).setAttribute('detailed', true);					
				}
				else
				{
					document.getElementById("cchaing"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cchaingid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cchainm"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cchainmid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cchaino"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cchainoid"+nameid).setAttribute('visibility', "hidden");
					document.getElementById("cchaincircid"+nameid).setAttribute('visibility', "visible");
					document.getElementById("cchaincircid"+nameid).setAttribute('detailed', false);	
					if(clicked=="true"){
					document.getElementById("cchaincircid"+nameid).setAttribute('style', "fill: #006400");
					document.getElementById("cchaincircid"+nameid).setAttribute('stroke', "#000000");}
					else if (clickhist>0){
						document.getElementById("cchaincircid"+nameid).setAttribute('style', "fill: #6495ed");
						document.getElementById("cchaincircid"+nameid).setAttribute('stroke', "#000000");
					}					
				}
				reDrawLines();
				})
				
			document.querySelector(`.svg-menu-item2-${nameid}`).addEventListener('click', function(e) {
				
				document.querySelector('.svg-custom-menu').style.display = 'none';
				
				if(ClusterChaindetail== false)
				{
					let temp1 = document.getElementsByClassName('rectachain');
					for(var i = 0; i < temp1.length; i++){temp1[i].setAttribute('visibility', "visible");}
					let temp2 = document.getElementsByClassName('rectbchain');
					for(var i = 0; i < temp2.length; i++){temp2[i].setAttribute('visibility', "visible");}
					let temp3 = document.getElementsByClassName('rectcchain');
					for(var i = 0; i < temp3.length; i++){temp3[i].setAttribute('visibility', "visible");}
					let temp4 = document.getElementsByClassName('rectdchain');
					for(var i = 0; i < temp4.length; i++){temp4[i].setAttribute('visibility', "visible");}
					let temp6 = document.getElementsByClassName('rectechain');
					for(var i = 0; i < temp6.length; i++){temp6[i].setAttribute('visibility', "visible");}
					let temp7 = document.getElementsByClassName('rectfchain');
					for(var i = 0; i < temp7.length; i++){temp7[i].setAttribute('visibility', "visible");}
					
					let temp5 = document.getElementsByClassName('dotchain');
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('visibility', "hidden");}
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('detailed', true);}
					ClusterChaindetail=true;
				}
				else
				{
					let temp1 = document.getElementsByClassName('rectachain');
					for(var i = 0; i < temp1.length; i++){temp1[i].setAttribute('visibility', "hidden");}
					let temp2 = document.getElementsByClassName('rectbchain');
					for(var i = 0; i < temp2.length; i++){temp2[i].setAttribute('visibility', "hidden");}
					let temp3 = document.getElementsByClassName('rectcchain');
					for(var i = 0; i < temp3.length; i++){temp3[i].setAttribute('visibility', "hidden");}
					let temp4 = document.getElementsByClassName('rectdchain');
					for(var i = 0; i < temp4.length; i++){temp4[i].setAttribute('visibility', "hidden");}
					let temp6 = document.getElementsByClassName('rectechain');					
					for(var i = 0; i < temp6.length; i++){temp6[i].setAttribute('visibility', "hidden");}
					let temp7 = document.getElementsByClassName('rectfchain');
					for(var i = 0; i < temp7.length; i++){temp7[i].setAttribute('visibility', "hidden");}					
					let temp5 = document.getElementsByClassName('dotchain');
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('visibility', "visible");}
					for(var i = 0; i < temp5.length; i++){temp5[i].setAttribute('detailed', false);}					
					ClusterChaindetail=false;
				}
				reDrawLines();

		  })
			
			document.querySelector(`.svg-menu-item3-${nameid}`).addEventListener('click', function(e) {
              document.querySelector('.svg-custom-menu').style.display = 'none';
			
			if(manualink==false)
			{
				manualinksource.push(circele);
				manualink=true;
			}
			else
			{
				ele2 = manualinksource[0];
				
				if(circele==ele2)
				{
					console.log('Error')
					
				}
				else
				{
				var domRect2 = ele2.getBoundingClientRect();
				let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
				let y2Loc = domRect2.y+5;			
				let sid = ele2.getAttribute('id');
				
				ClusterChainToManCollection.push({
                    source : {
                      id: "clusterchain",
					  ele: ele,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "manual",
					  ele: sid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
				connections7cman.push({source:ele,target:ele2,tarid:sid,boxElement:'clusterchain'});
				drawPolyLineClusterChain(ClusterChainToManCollection);				
				
				manualink=false; manualinksource=[];
				}
			}
			})							

			document.querySelector(`.svg-menu-item4-${nameid}`).addEventListener('click', function(e) {
           
		   document.querySelector('.svg-custom-menu').style.display = 'none';
			
			let boardg = d3.select('#line-canvas');
			let selectedesign = document.getElementById("lineguider").value;

			if (cloned == 'false'){
			let targetCircle = boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "green")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.on("mouseup",cloneclick())								
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));

	
			
			if(selectedesign == "design1"){

			boardg.append("circle")
                                .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'progcloneci'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "green")
                                .style("stroke-width", "1px")
								.attr('trail',false)
								.on("mouseup",cloneclick())								
								.call(d3.drag()
								.on("start",dragstart)
								.on("drag", dragged)
								.on("end", dragended));								

			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextci'+nameid;})
				.style("fill", "black")
				.text('0%');
			}
			else if(selectedesign == "design2"){
			boardg.append("rect")
                                .attr("width", 50)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclonere'+nameid;})
                                .style("fill", "grey")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
			boardg.append("rect")
                                .attr("width", 0)
                                .attr("height", 15)
                                .attr("x", x1Loc-25)
                                .attr("y", y1Loc-45)								
								.attr("id",function(d,i){return 'progclone2'+nameid;})
                                .style("fill", "red")
                                .style("stroke", "black")
                                .style("stroke-width", "1px");
								
			boardg.append("text")
				.attr("x", x1Loc-10)
				.attr("y", y1Loc-38)
				.attr("dy", ".35em")
				.attr("id",function(d,i){return 'progtextre'+nameid;})
				.style("fill", "white")
				.text('0%');
			}

			circele.setAttribute('cloned','true');	
			}
			else
			{
				let el = document.getElementById('clone'+nameid);
				//console.log(el);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

			ele.setAttribute('cloned','false');	
			}
		  
		  var mpid,mgpid,scale=1;

		function dragged(d) {	

			var m = d3.mouse(this)
			//console.log(m);
			var x = document.getElementsByClassName("link-newcbim "+nameid);
			var z = document.getElementsByClassName("link-newccg "+nameid);
			var y = document.getElementsByClassName("link-newcco "+nameid);
			var w = document.getElementsByClassName("link-newccgm "+nameid);				
			var xx = document.getElementsByClassName("link-newccgo "+nameid);					
			var ww = document.getElementsByClassName("link-newccom "+nameid);					


			highlightline(ww);
			highlightline(x);
			highlightline(z);
			highlightline(y);
			highlightline(w);
			highlightline(xx);

			
			try{var clp = closestPoint(x[0],m);	mgpid='m'; mpid=x[0].getAttribute('id').slice(5);}
			catch{var clp = closestPoint(z[0],m);	mgpid='g';mpid=z[0].getAttribute('id').slice(5)}

			for(var i=0;i<ww.length;i++)
			{
			
			let clp2 = closestPoint(ww[i],m);			
			let pid = ww[i].getAttribute('id').slice(5);
			
			
			if(!(document.getElementById("trail"+nameid+'cc'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'cc'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "yellow")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(ww[i].getTotalLength()*scale)
				let chp = ww[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'cc'+pid);
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'cc'
				}
			}
		
	
			for(var i=0;i<x.length;i++)
			{
			let clp2 = closestPoint(x[i],m);			
			let pid = x[i].getAttribute('id').slice(4);		
			
			if(!(document.getElementById("trail"+nameid+'m'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'m'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "purple")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(x[i].getTotalLength()*scale)
				//console.log(dist)
				let chp = x[i].getPointAtLength(dist);
				//console.log(chp);
				let el = document.getElementById('trail'+nameid+'m'+pid);
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid='m'
				}
			}

			for(var i=0;i<z.length;i++)
			{
			let clp2 = closestPoint(z[i],m);			
			let pid = z[i].getAttribute('id').slice(4);
			
			
			
			if(!(document.getElementById("trail"+nameid+'g'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'g'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "#0ca4ff")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(z[i].getTotalLength()*scale)
				let chp = z[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'g'+pid);
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'g'
				}
			}
			
			for(var i=0;i<y.length;i++)
			{
			let clp2 = closestPoint(y[i],m);			
			let pid = y[i].getAttribute('id').slice(4);		
			
			if(!(document.getElementById("trail"+nameid+'n'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'n'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "green")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(y[i].getTotalLength()*scale)
				let chp = y[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'n'+pid);
				
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid='n'
				}
			}

			for(var i=0;i<w.length;i++)
			{
			let clp2 = closestPoint(w[i],m);			
			let pid = w[i].getAttribute('id').slice(5);
			
			
			if(!(document.getElementById("trail"+nameid+'l'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'l'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "black")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(w[i].getTotalLength()*scale)
				let chp = w[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'l'+pid);
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'l'
				}
			}

			for(var i=0;i<xx.length;i++)
			{
			let clp2 = closestPoint(xx[i],m);			
			let pid = xx[i].getAttribute('id').slice(5);
			
			
			if(!(document.getElementById("trail"+nameid+'c'+pid))){

			let trailcirc = boardg.append("circle")
                                .attr("r", 10) 	//get radius from targetCircle and also styles?
                                .attr("cx", clp2[0])
                                .attr("cy", clp2[1])
								.attr("id",function(d,i){return 'trail'+nameid+'c'+pid;})
								.attr("class","trail"+nameid)
                                .style("fill", "yellow")
                                .style("stroke", "black")
                                .style("stroke-width", "2px")
								.style("opacity",0.4)
			}
			else
			{
				let dist = parseInt(xx[i].getTotalLength()*scale)
				let chp = xx[i].getPointAtLength(dist);
				let el = document.getElementById('trail'+nameid+'c'+pid);
				el.setAttribute('cx',chp['x']);
				el.setAttribute('cy',chp['y']);				
				
			}
				if(clp.distance>clp2.distance){
					clp=clp2;
					mpid = pid;
					mgpid= 'c'
				}
			}
					
			
			d3.select("#clone"+nameid).attr("cx", clp[0]).attr("cy",clp[1]);
			try{document.getElementById("trail"+nameid+mgpid+mpid).outerHTML = "";}
			catch(e){console.log('k');}
			
		
			if(selectedesign == "design1"){
			//	document.getElementById('progcloneci'+nameid).addEventListener("mouseup",cloneclick())
			
			document.getElementById('progcloneci'+nameid).setAttribute('cx',clp[0]);
			document.getElementById('progcloneci'+nameid).setAttribute('cy',clp[1]);
			document.getElementById('progtextci'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextci'+nameid).setAttribute('y',clp[1]);				
			document.getElementById('progcloneci'+nameid).setAttribute('r',scale*25);
			document.getElementById('progtextci'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}
			else if(selectedesign == "design2")
			{
			document.getElementById('progclone2'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclone2'+nameid).setAttribute('y',clp[1]-45);				
			document.getElementById('progclonere'+nameid).setAttribute('x',clp[0]-25);
			document.getElementById('progclonere'+nameid).setAttribute('y',clp[1]-45);			
			document.getElementById('progtextre'+nameid).setAttribute('x',clp[0]-10);
			document.getElementById('progtextre'+nameid).setAttribute('y',clp[1]-38);				
			document.getElementById('progclone2'+nameid).setAttribute('width',scale*50);
			document.getElementById('progtextre'+nameid).textContent=parseInt(scale*100+0.5)+'%';
			}

			
			if(mgpid=='m'){
				let path = document.getElementsByClassName("link-newcbim "+nameid+' '+mpid)[0];
				try{let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
				var length = path.getTotalLength();			

			if(selectedesign=="design3"){				
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);

				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] > path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}
			document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';
			}
			catch(e){console.log('');}		
			}
			else{
			if(mgpid=='g'){
				let path = document.getElementsByClassName("link-newccg "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
			var length = path.getTotalLength();			
				
			if(selectedesign=="design3"){
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}			
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';

			}
			else{
			if(mgpid=='n'){
				let path = document.getElementsByClassName("link-newcco "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
				var length = path.getTotalLength();			
				
			if(selectedesign=="design3"){
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] > path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}			
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';				
			}
			else{
			if(mgpid=='l'){
				let path = document.getElementsByClassName("link-newccgm "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
	var length = path.getTotalLength();			
				
			if(selectedesign=="design3"){
			$("[id^='progress"+nameid+"']").remove();
			for(var jk = 0;jk<dist;jk+=10)
			{
				
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}			
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';				
			}
			else{
			if(mgpid=='c'){
				let path = document.getElementsByClassName("link-newccgo "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
			var length = path.getTotalLength();			
				
			if(selectedesign=="design3"){
			$("[id^='progress"+nameid+"']").remove();
			
			for(var jk = 0;jk<dist;jk+=10)
			{
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] < path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}
			
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';			
			}
			else{
			if(mgpid=='cc'){
				let path = document.getElementsByClassName("link-newccom "+nameid+' '+mpid)[0];
				let cpoint = [this.getAttribute('cx'),this.getAttribute('cy')];
				let dist = getDistance(cpoint[0],cpoint[1],path.getPointAtLength(0)['x'],path.getPointAtLength(0)['y']);
				scale = parseFloat(dist/path.getTotalLength());	
			var length = path.getTotalLength();			
				
			if(selectedesign=="design3"){
			$("[id^='progress"+nameid+"']").remove();
			
			for(var jk = 0;jk<dist;jk+=10)
			{
			boardg.append("circle")
                                .attr("r", 4*jk/length) 	
                                .attr("cx", path.getPointAtLength(jk)['x'])
                                .attr("cy", path.getPointAtLength(jk)['y'])
								.attr("id",function(d,i){return 'progress'+nameid;})
                                .style("fill", "green")
								.style("stroke", "black")
                                .style("stroke-width", "2px");
  			}}
			else if(selectedesign=="design4"){
				
				createdup(path);


				for(var ii=0;ii<path.getTotalLength();ii+=2)
				{
					let id = String('dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2));
					if(cpoint[0] >
					path.getPointAtLength(ii).x)

						document.getElementById(id).style.fill="none";
					
					else{
						document.getElementById(id).style.fill="#ADFF2F";
					}
				}
				
			}
			
				document.getElementById(path.getAttribute('id')).style.stroke = '#FFEA00';			
			}
			}
			
		}}}}}
			
		//reDrawLines();	


		var duprecords = [];
		function createdup(path){
			
				if(duprecords.includes(path.getAttribute('id')))
					return;
				
				duprecords.push(path.getAttribute('id'));
				
				for(var ii=0;ii<path.getTotalLength();ii++)
				{
					
				boardg.append("circle")
                              .attr("r", 1) 	//get radius from targetCircle and also styles?
                                .attr("cx", path.getPointAtLength(ii).x)
                                .attr("cy", path.getPointAtLength(ii).y)
								.attr("id",function(d,i){return 'dupcirc'+nameid+path.getAttribute('id')+path.getPointAtLength(ii).x.toFixed(2);})
								.attr("class","dupcirc")
                                .style("fill", "none")
                                .style("stroke", "none")
				
				}
				return 0;
			
		}
	
		function getDistance(x1, y1, x2, y2){
			let y = x2 - x1;
			let x = y2 - y1;
			
			return Math.sqrt(x * x + y * y);
		}
		
		function closestPoint(pathNode, point) {
			  var pathLength = pathNode.getTotalLength(),
				  precision = 8,
				  best,
				  bestLength,
				  bestDistance = Infinity;

			  // linear scan for coarse approximation
			  for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {
				if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {
				  best = scan, bestLength = scanLength, bestDistance = scanDistance;
				}
			  }

			  // binary search for precise estimate
			  precision /= 2;
			  while (precision > 0.5) {
				var before,
					after,
					beforeLength,
					afterLength,
					beforeDistance,
					afterDistance;
				if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {
				  best = before, bestLength = beforeLength, bestDistance = beforeDistance;
				} else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {
				  best = after, bestLength = afterLength, bestDistance = afterDistance;
				} else {
				  precision /= 2;
				}
			  }

			  best = [best.x, best.y];
			  best.distance = Math.sqrt(bestDistance);
			  return best;

			  function distance2(p) {
				var dx = p.x - point[0],
					dy = p.y - point[1];
				return dx * dx + dy * dy;
			  }}
	
		function dragended(d){
				
			var x = document.getElementsByClassName("link-newcbim "+nameid);
			var z = document.getElementsByClassName("link-newccg "+nameid);
			var y = document.getElementsByClassName("link-newcco "+nameid);
			var w = document.getElementsByClassName("link-newccgm "+nameid);
			var xx = document.getElementsByClassName("link-newccgo "+nameid);
			var ww = document.getElementsByClassName("link-newccom "+nameid);
			
			unhighlightline(x);
			unhighlightline(z);
			unhighlightline(y);
			unhighlightline(w);			
			unhighlightline(xx);		
			unhighlightline(ww);		
			
			let trailcirc = document.getElementsByClassName("trail"+nameid)
			for(var j=0;j<trailcirc.length;j++){
				trailcirc[j].style.display='none';
			}
			
		}
	
		function dragstart(d){

			if(document.getElementsByClassName("trail"+nameid))
			{
				let trailcirc = document.getElementsByClassName("trail"+nameid)
				for(var j=0;j<trailcirc.length;j++){
					trailcirc[j].style.display='block';
				}		
			}
		}
	
		function highlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'red';
				
			}			
		}
		
		function unhighlightline(x){
			for(var i=0;i<x.length;i++)
			{
				let xid = String(x[i].getAttribute('id'));
				document.getElementById(xid).style.stroke = 'rgb(149, 199, 244';
				
			}			
		}	
		
		function cloneclick(){
			
			if(event.button==2){
				
				const rightCustomMenu = document.querySelector('.svg-custom-menu');
		
				rightCustomMenu.innerHTML = `<li class="svg-menu-item-${nameid} svg-menu-item">Delete Clone</li>`
			rightCustomMenu.style.display = 'block';
            rightCustomMenu.style.left = event.clientX + 'px';
            rightCustomMenu.style.top = event.clientY + 'px';
		
		document.querySelector(`.svg-menu-item-${nameid}`).addEventListener('click', function(e) {
			
	   document.querySelector('.svg-custom-menu').style.display = 'none';
	
				let el = document.getElementById('clone'+nameid);
			el.remove();
		})
				
			}
			
		}
	
	
	})
		  
			document.querySelector(`.svg-menu-item5-${nameid}`).addEventListener('click', function(e) {
			
			document.querySelector('.svg-custom-menu').style.display = 'none';

			let boardg = d3.select('#line-canvas');

			if (cloned == 'false'){
			let targetCircle = boardg.append("circle")
                                .attr("r", 25) 	//get radius from targetCircle and also styles?
                                .attr("cx", x1Loc)
                                .attr("cy", y1Loc)
								.attr("id",function(d,i){return 'clone'+nameid;})
                                .style("fill", "white")
                                .style("stroke", "blue")
                                .style("stroke-width", "2px")
								.attr('trail',false)
								.call(d3.drag()
								.on("drag", draggedv));
								
			circele.setAttribute('cloned','true');	
			
			 
			let tcirc = document.getElementById('clone'+nameid);
			let x1Loct = parseFloat(tcirc.getAttribute("cx"));
			let y1Loct = parseFloat(tcirc.getAttribute("cy"));
			
			if(document.querySelector('.right .all-data-box').style.display == 'block')												///connect to graph
			{			
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')
			domRect = tar.getBoundingClientRect();
			let x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect.y+5;
			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}


			if(document.querySelector('.right .bubblemap-box').style.display == 'block')											//connect to map
			{			
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			let tar = document.querySelector('[map-id="map' + loc + '"]');

			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;	

			
			ClusterGMCloneToGraph.push({
                    source : {
                      id: "clusterGM",
					  ele:nameid,
                      xOffset : x1Loct,
                      yOffset : y1Loct
                    },
                    target : {
                      id: "graph",
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
		
			connections4cgclone.push({ source: tcirc, target: tar, boxElement: 'all-data-box' });
			}}			

				drawPolyLineClusterGM(ClusterGMCloneToGraph);

			
			function draggedv(d){				
				d3.select(this).attr("cx", d3.event.x).attr("cy", d3.event.y);
				reDrawLines();
			}
				
			}
			else
			{
				let el = document.getElementById('clone'+nameid);
				el.remove(); 
				ClusterGMCloneToGraph=[],connections4cgclone=[]
			document.querySelectorAll('.link-newcgmclone').forEach(ele => {
				  ele.remove();
			  });
			
				circele.setAttribute('cloned','false');	
			}
			
			})

		  }
			}
				
		else
			{
			for (var i = ClusterChainToOrg.length - 1; i >= 0; --i) {
			  if (ClusterChainToOrg[i].source.ele == nameid) {
				ClusterChainToOrg.splice(i, 1); 
			  }}
			  
			for (var i = ClusterChainToMap.length - 1; i >= 0; --i) {
			  if (ClusterChainToMap[i].source.ele == nameid) {
				ClusterChainToMap.splice(i, 1); 
			  }} 
			
			for (var i = ClusterChainToGraph.length - 1; i >= 0; --i) {
			  if (ClusterChainToGraph[i].source.ele == nameid) {
				ClusterChainToGraph.splice(i, 1); 
			  }}   
			
			for (var i = ClusterChainToGM.length - 1; i >= 0; --i) {
			  if (ClusterChainToGM[i].source.ele == nameid) {
				ClusterChainToGM.splice(i, 1); 
			  }}
			  
			for (var i = ClusterChainToGO.length - 1; i >= 0; --i) {
			  if (ClusterChainToGO[i].source.ele == nameid) {
				ClusterChainToGO.splice(i, 1); 
			  }} 
			
			for (var i = ClusterChainToOM.length - 1; i >= 0; --i) {
			  if (ClusterChainToOM[i].source.ele == nameid) {
				ClusterChainToOM.splice(i, 1); 
			  }}   
			  
			for (var i = connections7co.length - 1; i >= 0; --i) {
			  if (connections7co[i].source == circele) {
				connections7co.splice(i, 1); 
			  }}
			  
			for (var i = connections7cm.length - 1; i >= 0; --i) {
			  if (connections7cm[i].source == circele) {
				connections7cm.splice(i, 1); 
			  }}
			for (var i = connections7cg.length - 1; i >= 0; --i) {
			  if (connections7cg[i].source == circele) {
				connections7cg.splice(i, 1); 
			  }}
			 
			 for (var i = connections7cgm.length - 1; i >= 0; --i) {
			  if (connections7cgm[i].source == circele) {
				connections7cgm.splice(i, 1); 
			  }}
			  
			for (var i = connections7cgo.length - 1; i >= 0; --i) {
			  if (connections7cgo[i].source == circele) {
				connections7cgo.splice(i, 1); 
			  }}
			for (var i = connections7com.length - 1; i >= 0; --i) {
			  if (connections7com[i].source == circele) {
				connections7com.splice(i, 1); 
			  }}
			  
			  
			document.querySelectorAll('.link-newcbim').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newcco').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newccg').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			 
			document.querySelectorAll('.link-newccgm').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newccgo').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			document.querySelectorAll('.link-newccom').forEach(ele => {
              if(ele.getAttribute('ele') == nameid){
				  ele.remove();
			  }});
			
			if(circele.getAttribute('clickhist') > 0)
			{
			if(detail=="false")
			{
				  circele.setAttribute("style", "fill: #a1c9fb");
				  circele.setAttribute("stroke","#000000")

			}
			else
			{
				  document.getElementById('cchaingid'+nameid).setAttribute("style","fill: #a1c9fb");
				  document.getElementById('cchainmid'+nameid).setAttribute("style","fill: #a1c9fb");
				  document.getElementById('cchainoid'+nameid).setAttribute("style","fill: #a1c9fb");
			}
			}			
			
			if(clicked=="false"){
				d3.select(this).style("stroke","black");
			
			var clustergo = $("[clustergoid]")
			var clustergm = $("[clustergmid]")
			var clusterom = $("[clusteromid]")
			
			
			if(document.querySelector('.right .clusterGO-data-box').style.display == 'block')
			{
			for(var i=0;i<clustergo.length;i++)
			{
				if(orgs==clustergo[i].getAttribute('org'))
				{
					var goid = clustergo[i].getAttribute('clustergoid')
					let detailgo = clustergo[i].getAttribute('detailed')
					if(detailgo=="false")
					{
						var circid = document.getElementById('cgocircid'+goid);
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgooid"+goid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					if(detail=="false")
					{
					ClusterChainToGO.push({
							source : {
							  id: "clusterchain",
							  ele:nameid,
							  xOffset : x1Loc,
							  yOffset : y1Loc
							},
							target : {
							  id: "clusterGO",
							  ele:circid,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
					else
					{
					ClusterChainToGO.push({
							source : {
							  id: "clusterchain",
							  ele:nameid,							  
							  xOffset : x1Loco,
							  yOffset : y1Loco
							},
							target : {
							  id: "clusterGO",
							  ele:eleme2,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
				  connections7cgo.push({ source: circele, target: circid, boxElement: 'clusterchain' });
				}
				
				if(persons==clustergo[i].getAttribute('person'))
				{
				var goid = clustergo[i].getAttribute('clustergoid')
				let detailgo = clustergo[i].getAttribute('detailed')
					if(detailgo=="false")
					{
						var circid = document.getElementById('cgocircid'+goid);
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgogid"+goid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					
					if(detail=="false")
					{
					ClusterChainToGO.push({
							source : {
							  id: "clusterchain",
							  ele:nameid,
							  xOffset : x1Loc,
							  yOffset : y1Loc
							},
							target : {
							  id: "clusterGO",
							  ele:circid,							  
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
					else
					{
					ClusterChainToGO.push({
							source : {
							  id: "clusterchain",
							ele:nameid,							  
							  xOffset : x1Locg,
							  yOffset : y1Locg
							},
							target : {
							  id: "clusterGO",
							  ele:eleme2,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
					
				  connections7cgo.push({ source: circele, target: circid, boxElement: 'clusterchain' });
				}
			}
			
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
				let radius = parseInt(circele.getAttribute('r'));
				circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")
			}
			else
			{
				document.getElementById("cchaingid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainmid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainoid"+nameid).setAttribute("style","fill: #006400");
			}
			hist = parseInt(circele.getAttribute('clickhist'))+1;
			circele.setAttribute('clickhist', hist);
			circele.setAttribute('clicked', true);
			if(!(document.getElementById("movefixGO").checked))				
				$('.clusterGO-data-box').addClass('selectedchain');		
			if(selectedesign != "design"){
			drawPolyLineClusterChain(ClusterChainToGO);}
			}
			
			if(document.querySelector('.right .clusterGM-data-box').style.display == 'block')
			{
			for(var i=0;i<clustergm.length;i++)
			{
				if(persons==clustergm[i].getAttribute('person'))
				{
					var gmid = clustergm[i].getAttribute('clustergmid');
					let detailgm = clustergm[i].getAttribute('detailed');
					
					if(detailgm=="false")
					{
						var circid = document.getElementById('cgmcircid'+gmid);
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgmgid"+gmid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					
					if(detail=="false")
					{
					ClusterChainToGM.push({
							source : {
							  id: "clusterchain",
							  ele:nameid,
							  xOffset : x1Loc,
							  yOffset : y1Loc
							},
							target : {
							  id: "clusterGM",
							  ele:circid,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
					else
					{
					ClusterChainToGM.push({
							source : {
							  id: "clusterchain",
							ele:nameid,							  
							  xOffset : x1Locg,
							  yOffset : y1Locg
							},
							target : {
							  id: "clusterGM",
							  ele:eleme2,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}

				connections7cgm.push({ source: circele, target: circid, boxElement: 'clusterchain' });
				}
				if(locs==clustergm[i].getAttribute('map'))
				{
					var gmid = clustergm[i].getAttribute('clustergmid')
					let detailgm = clustergm[i].getAttribute('detailed');
					
					if(detailgm=="false")
					{
						var circid = document.getElementById('cgmcircid'+gmid);
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("cgmmid"+gmid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					
					if(detail=="false")
					{
					ClusterChainToGM.push({
							source : {
							  id: "clusterchain",
							  ele:nameid,
							  xOffset : x1Loc,
							  yOffset : y1Loc
							},
							target : {
							  id: "clusterGM",
							  ele:circid,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
					else
					{
					ClusterChainToGM.push({
							source : {
							  id: "clusterchain",
							ele:nameid,							  
							  xOffset : x1Locm,
							  yOffset : y1Locm
							},
							target : {
							  id: "clusterGM",
							  ele:eleme2,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
				connections7cgm.push({ source: circele, target: circid, boxElement: 'clusterchain' });
				}
			}
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
				let radius = parseInt(circele.getAttribute('r'));
				circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")
			}
			else
			{
				document.getElementById("cchaingid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainmid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainoid"+nameid).setAttribute("style","fill: #006400");
			}
			hist = parseInt(circele.getAttribute('clickhist'))+1;
			circele.setAttribute('clickhist', hist);
			circele.setAttribute('clicked', true);
			if(!(document.getElementById("movefixGM").checked))							
				$('.clusterGM-data-box').addClass('selectedchain');		
			if(selectedesign != "design"){			
			drawPolyLineClusterChain(ClusterChainToGM);}
			}
			
			if(document.querySelector('.right .clusterOM-data-box').style.display == 'block')
			{
			for(var i=0;i<clusterom.length;i++)
			{
				if(orgs==clusterom[i].getAttribute('org'))
				{
					var omid = clusterom[i].getAttribute('clusteromid')

					let detailom = clusterom[i].getAttribute('detailed')
					if(detailom=="false")
					{
						var circid = document.getElementById('comcircid'+omid);
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("comoid"+omid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					if(detail=="false")
					{
					ClusterChainToOM.push({
                    source : {
                      id: "clusterchain",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "clusterOM",
					  ele:circid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
					}
					else
					{
					ClusterChainToOM.push({
							source : {
							  id: "clusterchain",
							ele:nameid,							  
							  xOffset : x1Locm,
							  yOffset : y1Loco
							},
							target : {
							  id: "clusterOM",
							  ele:eleme2,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}


				connections7com.push({ source: circele, target: circid, boxElement: 'clusterchain' });

				}
				if(locs==clusterom[i].getAttribute('map'))
				{
					var omid = clusterom[i].getAttribute('clusteromid')
					let detailom = clusterom[i].getAttribute('detailed')
					
					if(detailom=="false")
					{
						var circid = document.getElementById('comcircid'+omid);
						let domRect = circid.getBoundingClientRect();
						let radius = parseInt(circid.getAttribute('r'));
						var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+parseInt(radius/3);
						var y2Loc = domRect.y+parseInt(radius/3);
					}
					else
					{
						let eleme2 = document.getElementById("commid"+omid);
						let domRect2 = eleme2.getBoundingClientRect();
						let height2 = eleme2.getAttribute('height');
						var x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth;
						var y2Loc = domRect2.y+parseInt(height2/7);
					}
					if(detail=="false")
					{
					ClusterChainToOM.push({
                    source : {
                      id: "clusterchain",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "clusterOM",
					  ele:circid,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
					}
					else
					{
					ClusterChainToOM.push({
							source : {
							  id: "clusterchain",
							ele:nameid,							  
							  xOffset : x1Locm,
							  yOffset : y1Locm
							},
							target : {
							  id: "clusterOM",
							  ele:eleme2,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}
				connections7com.push({ source: circele, target: circid, boxElement: 'clusterchain' });
				}
			}
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
				let radius = parseInt(circele.getAttribute('r'));
				circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")
			}
			else
			{
				document.getElementById("cchaingid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainmid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainoid"+nameid).setAttribute("style","fill: #006400");
			}
			hist = parseInt(circele.getAttribute('clickhist'))+1;
			circele.setAttribute('clickhist', hist);
			circele.setAttribute('clicked', true);
			if(!(document.getElementById("movefixOM").checked))				
				$('.clusterOM-data-box').addClass('selectedchain');		
			if(selectedesign != "design"){			
			drawPolyLineClusterChain(ClusterChainToOM);}
			}
			
			if(document.querySelector('.right .bubblemap-box').style.display == 'block')
			{				
			for(var j = 0; j<locs.split(',').length;j++)
			{
			loc = locs.split(',')[j];
			try{
			let tar = document.querySelector('[map-id="map' + loc + '"]');
			tar.setAttribute('style', "fill: #ff7f50")
			domRect2 = tar.getBoundingClientRect();
			let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
			let y2Loc = domRect2.y+5;	
			
			if(detail=="false")
			{
			ClusterChainToMap.push({
                    source : {
                      id: "clusterchain",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "bubble-map",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
			}
			else
			{
				ClusterChainToMap.push({
						source : {
						  id: "clusterchain",
						ele:nameid,							  
						  xOffset : x1Locm,
						  yOffset : y1Locm
						},
						target : {
						  id: "bubble-map",
						  ele:tar,
						  xOffset : x2Loc,
						  yOffset : y2Loc
						}
					  });
			}

			connections7cm.push({ source: circele, target: tar, boxElement: 'bubble-map' });
			}catch(error){}
			}
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
				let radius = parseInt(circele.getAttribute('r'));
				circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")
			}
			else
			{
				document.getElementById("cchaingid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainmid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainoid"+nameid).setAttribute("style","fill: #006400");
			}
			hist = parseInt(circele.getAttribute('clickhist'))+1;
			circele.setAttribute('clickhist', hist);
			circele.setAttribute('clicked', true);
			if(!(document.getElementById("movefixmap").checked))				
				$('.bubblemap-box').addClass('selectedchain');		
			if(selectedesign != "design"){			
			drawPolyLineClusterChain(ClusterChainToMap);}
			}
			
			if(document.querySelector('.right .organize-data-box').style.display == 'block')
			{
			for(var j = 0; j<orgs.split(',').length;j++)
			{
			org = orgs.split(',')[j];
				
			var tar = document.querySelector('[barid="' + org + '"]');

			domRect = tar.getBoundingClientRect();
			var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			var y2Loc = domRect.y+5;
			if(detail=="false")
			{
			ClusterChainToOrg.push({
                    source : {
                      id: "clusterchain",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "organize",
					  ele:tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
					}
					else
					{
					ClusterChainToOrg.push({
							source : {
							  id: "clusterchain",
							ele:nameid,							  
							  xOffset : x1Loco,
							  yOffset : y1Loco
							},
							target : {
							  id: "organize",
							  ele:tar,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}			

			connections7co.push({ source: circele, target: tar, boxElement: 'organize' });
			}
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
				let radius = parseInt(circele.getAttribute('r'));
				circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")
			}
			else
			{
				document.getElementById("cchaingid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainmid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainoid"+nameid).setAttribute("style","fill: #006400");
			}
			hist = parseInt(circele.getAttribute('clickhist'))+1;
			circele.setAttribute('clickhist', hist);
			circele.setAttribute('clicked', true);
			if(!(document.getElementById("movefixorg").checked))							
				$('.organize-data-box').addClass('selectedchain');			
			if(selectedesign != "design"){			
			drawPolyLineClusterChain(ClusterChainToOrg);}
			}
			
			if(document.querySelector('.right .all-data-box').style.display == 'block')
			{
			for(var j = 0; j<persons.split(',').length;j++)
			{
			person = persons.split(',')[j];
			let tar = document.querySelector('[personsid="' + person + '"]')

			domRect = tar.getBoundingClientRect();
			var x2Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
			var y2Loc = domRect.y+5;
			if(ClusterChaindetail==false)
			{
			ClusterChainToGraph.push({
                    source : {
                      id: "clusterchain",
					  ele:nameid,
                      xOffset : x1Loc,
                      yOffset : y1Loc
                    },
                    target : {
                      id: "graph",
					  ele: tar,
                      xOffset : x2Loc,
                      yOffset : y2Loc
                    }
                  });
					}
					else
					{
					ClusterChainToGraph.push({
							source : {
							  id: "clusterchain",
							ele:nameid,							  
							  xOffset : x1Locg,
							  yOffset : y1Locg
							},
							target : {
							  id: "graph",
							  ele: tar,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
					}			
			
			connections7cg.push({ source: circele, target: tar, boxElement: 'all-data-box' });
			}
			if(detail=="false")
			{
				circele.setAttribute("style","fill: #006400");	
				let radius = parseInt(circele.getAttribute('r'));
				circele.setAttribute("r", radius)
				circele.setAttribute("stroke","#000000")
			}
			else
			{
				document.getElementById("cchaingid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainmid"+nameid).setAttribute("style","fill: #006400");
				document.getElementById("cchainoid"+nameid).setAttribute("style","fill: #006400");
			}
			hist = parseInt(circele.getAttribute('clickhist'))+1;
			circele.setAttribute('clickhist', hist);
			circele.setAttribute('clicked', true);
			if(!(document.getElementById("movefixgraph").checked))
				$('.all-data-box').addClass('selectedchain');		
			if(selectedesign != "design"){			
			drawPolyLineClusterChain(ClusterChainToGraph);}
			}
			}
			else{
				d3.select(this).style("stroke","none");
				
				if(ClusterChainToGraph.length==0)
					$('.all-data-box').removeClass('selectedchain')
				if(ClusterChainToOrg.length==0)					
					$('.organize-data-box').removeClass('selectedchain')
				if(ClusterChainToMap.length==0)
					$('.bubblemap-box').removeClass('selectedchain')
				if(ClusterChainToGM.length==0)					
					$('.clusterGM-data-box').removeClass('selectedchain')
				if(ClusterChainToGO.length==0)
					$('.clusterGO-data-box').removeClass('selectedchain')
				if(ClusterChainToOM.length==0)					
					$('.clusterOM-data-box').removeClass('selectedchain')
				if(cloned=="true"){
				
				let el = document.getElementById('clone'+nameid);
				let trailel = document.getElementsByClassName("trail"+nameid);
				el.remove(); 
			let selectedesign = document.getElementById("lineguider").value;
				
				if (selectedesign=='design1'){
					let prtext = document.getElementById('progtextci'+nameid);
					let prcirc = document.getElementById('progcloneci'+nameid);
					prtext.remove();
					prcirc.remove();
				}
				if (selectedesign=='design2'){
					let prtext = document.getElementById('progclonere'+nameid);
					let prcirc = document.getElementById('progclone2'+nameid);
					let prtre = document.getElementById('progtextre'+nameid);
					prtext.remove();
					prcirc.remove();
					prtre.remove();
				}
				if(selectedesign=='design3'){
					$("[id^='progress"+nameid+"']").remove();					
				}
				if(selectedesign=='design4'){
					$("[id^='dupcirc"+nameid+"']").remove();						
				}
			while(trailel[0]) 
				trailel[0].remove();

				ele.setAttribute('cloned','false');}
					let found = 0;
					if(bubbleToChainCollection.length != 0){
						for(var jk = 0 ;jk<bubbleToChainCollection.length;jk++){
						if(nameid == bubbleToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}
					if(GraphToChainCollection.length != 0){
						for(var jk = 0 ;jk<GraphToChainCollection.length;jk++){
						if(nameid == GraphToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}
					if(OrgToChainCollection.length != 0){
						for(var jk = 0 ;jk<OrgToChainCollection.length;jk++){
						if(nameid == OrgToChainCollection[jk].target.ele.id.slice(12)){
							found=1;}}}			
					if(found==1){d3.select(this).style("fill", "#ff7f50");}				
				circele.setAttribute('clicked', false);}
			}
            }
				var abc1 = $('[id^="dupcirc"]');
for(let iii = 0;iii<abc1.length;iii++){
		abc1[iii].parentNode.appendChild(abc1[iii]);
}

		var abc2 = $('[id^="clone"]');
for(let iii = 0;iii<abc2.length;iii++){
		abc2[iii].parentNode.appendChild(abc2[iii]);
}

		var abc4 = $('[id^="progcloneci"]');
for(let iii = 0;iii<abc4.length;iii++){
		abc4[iii].parentNode.appendChild(abc4[iii]);
}		
		var abc3 = $('[id^="progtextci"]');
for(let iii = 0;iii<abc3.length;iii++){
		abc3[iii].parentNode.appendChild(abc3[iii]);
}
		var abc5 = $('[id^="progress"]');
for(let iii = 0;iii<abc5.length;iii++){
		abc5[iii].parentNode.appendChild(abc5[iii]);
}	
			}
	}

	var TextDocToManCollection=[],connections8tman=[];

	function seldoclick()																		//handle click event for dropdown selecting documents menu
	{
	let selection = window.getSelection();
                  if(event.button === 2) {
                    let $event = event;
                    const fE = event.target;
					var id = fE.getAttribute('id');

					const rightCustomMenu = document.querySelector('.custom-menu');
					
					if(manualink==false)
					rightCustomMenu.innerHTML = `<li class="svg-menu-item svg-menu-item">Highlight Text and Link From This</li><li class="svg-menu-item1 svg-menu-item">Unhighlight Text</li>`
					else
					rightCustomMenu.innerHTML = `<li class="svg-menu-item svg-menu-item">Highlight Text and Link To This</li><li class="svg-menu-item1 svg-menu-item">Unhighlight Text</li>`
					
                    document.querySelector('.custom-menu').style.display = 'block';
                    document.querySelector('.custom-menu').style.left = event.clientX + 'px';
                    document.querySelector('.custom-menu').style.top = event.clientY + 'px';

                    var range = selection.getRangeAt(0);
					
					seltext = window.getSelection().toString();
					
					document.querySelector(`.svg-menu-item`).addEventListener('click', function(e) {
                    document.querySelector('.custom-menu').style.display = 'none';	    
	                
					if (range) {
                        selection.removeAllRanges();
                        selection.addRange(range);
                      }
					  
					span = document.createElement('span');					
					span.className = 'highlight';
					span.id = id;
					span.setAttribute('seltext', seltext);
					span.appendChild(range.extractContents());
					range.insertNode(span);		
					
					
					var ele = document.querySelector('[seltext="'+seltext+'"]');
					var domRect = ele.getBoundingClientRect();
					let x1Loc = domRect.x-document.getElementById('leftplace').offsetWidth+5;
					let y1Loc = domRect.y+5;
			
					if(manualink==false)
					{
						manualinksource.push(ele);
						manualink=true;
					}
					else
					{
						ele2 = manualinksource[0];
						
						if(ele==ele2)
						{
							console.log('Error')
							
						}
						else
						{
						var domRect2 = ele2.getBoundingClientRect();
						let x2Loc = domRect2.x-document.getElementById('leftplace').offsetWidth+5;
						let y2Loc = domRect2.y+5;			
						let sid = ele2.getAttribute('id');				
						
						TextDocToManCollection.push({
							source : {
							  id: "manual",
							  ele: id,
							  xOffset : x1Loc,
							  yOffset : y1Loc
							},
							target : {
							  id: "manual",
							  ele: sid,
							  xOffset : x2Loc,
							  yOffset : y2Loc
							}
						  });
						  
						connections8tman.push({source:ele,sorid:id,target:ele2,tarid:sid,boxElement:'highlight-text'});
						drawPolyLineTextDoc(TextDocToManCollection);				
						
						manualink=false; manualinksource=[];
						}
					}

					});
			
			document.querySelector(`.svg-menu-item1`).addEventListener('click', function(e) {
            document.querySelector('.custom-menu').style.display = 'none';
			    if (range) {
                        selection.removeAllRanges();
                        selection.addRange(range);
                      }				
					var spans = document.getElementsByClassName("highlight");
					var res = seltext.split(" ");

					for(i=0;i<spans.length;i++)
					{
					  if(res.some(substring=>spans[i].textContent.includes(substring))){
						var texts = spans[i].textContent;
						var node = document.createTextNode(texts);
						spans[i].parentNode.replaceChild(node, spans[i]);
					}}
                    });	
                  }
                }

      const API_URL = 'http://localhost:3000/';
      $(document).ready(function() {
		  
		var filesn = [];
		
        checkForBubbleData();
		
        getDocumentData();

		document.getElementById('Aswitchbut').style.visibility = 'hidden';
		document.getElementById('Bswitchbut').style.visibility = 'hidden';
		document.getElementById('Cswitchbut').style.visibility = 'hidden';
		document.getElementById('Zswitchbut').style.visibility = 'hidden';

		document.getElementById('userbut').style.visibility = 'hidden';

	//console.log(document.getElementById("lineguider").value);
		


$("#lineguider").change(function() {
  localStorage.setItem('selectedesign', $(this).val());
  location.reload();
});

$("#dataselect").change(function() {
  localStorage.setItem('selectedat', $(this).val());
  location.reload();
});

$("#nodata").change(function() {
  localStorage.setItem('selectednodata', $(this).val());
  location.reload();
});

var selectedesign = localStorage.getItem('selectedesign')|| '';
if (selectedesign) {
  $("#lineguider").val(selectedesign);
}
	
var selectedat = localStorage.getItem('selectedat')|| '';
if (selectedat) {
  $("#dataselect").val(selectedat);
}

var selectednodata = localStorage.getItem('selectednodata')|| '';
if (selectednodata) {
  $("#nodata").val(selectednodata);
}



       // $('#fileSelect').select2();
		$('#orgdrop').select2();
		$('#persondrop').select2();
		
        $('#fileSelect').on('change',function(){
          var file = $(this).val();

          var fileNameShort = file.split(".").slice(0, -1).join(".");
		  var seldoc=[];																			//selecting from the dropdown to select documents

		for (var val in documentData){
			if(documentData[val].docId==fileNameShort)
				seldoc = documentData[val];
			}
			data = seldoc.docText;
			
//		  console.log(file +''+fileNameShort);

              var note = `
              <div class="seldoc`+fileNameShort+` note the-node" id='`+fileNameShort+`' style="z-index: 999;">
                <div class='close_note'>X</div>
                <h3>`+fileNameShort+`</h3>
                <p style="cursor:text;" id='`+fileNameShort+`'>
                  `+data+`
                </p>
              </div>
              `;
              $("#board").append(note);
              $(".note").css('z-index',99).draggable({
                containment: "#board",
                grid: [5, 5],
                cancel: "p, .matrix-data"
              });
        document.querySelector('#' + fileNameShort).addEventListener('mouseup', seldoclick);
		$('#' + fileNameShort).on('drag',reDrawLines);
		});      


	//drag function for dialog box  
        $(document).on('drag', '.note', function(){
          $(this).click();
        })
        $(document).on('click', '.note', function(){
          $('.note').css('z-index', 9);
          $(this).css('z-index', 99);
        });

        $(document).on('click','.note .close_note',function(event){												//closing the view
		
          let sid = $(this).parent()[0].id;
//		  console.log($(this).parent())

		  for (var i = TextDocToManCollection.length - 1; i >= 0; --i) {
			  if (TextDocToManCollection[i].source.ele ==sid) {
				TextDocToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections8tman.length - 1; i >= 0; --i) {
			  if (connections8tman[i].tarid == sid) {
				connections8tman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newtdman').forEach(ele => {
              if(ele.getAttribute('ele') == sid){
				  ele.remove();
		  }})		  
		  
		  for (var i = bubbleToTextCollection.length - 1; i >= 0; --i) {
			  if (bubbleToTextCollection[i].target.ele ==sid) {
			  $('#' + sid).removeClass('selectedmap');			  				  
				bubbleToTextCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections1bt.length - 1; i >= 0; --i) {
			  if (connections1bt[i].targetid == sid) {
				connections1bt.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newbt').forEach(ele => {
              if(ele.getAttribute('tar') == sid){
				  ele.remove();
		  }})
		  
          if($(this).parent().hasClass('bubblemap-box') ){
            bubbleToTextCollection = [], bubbleToGraphCollection = [],bubbleToOrgCollection=[],GraphToMapCollection=[],OrgToMapCollection=[];
            connections1bg = [], connections1bo= [],connections1bt=[],connections2gm=[],connections3om=[],connections4cm=[],ClusterGMToMap=[],
			ClusterOMToMap=[],connections6cm=[],connections7cm=[],ClusterChainToMap=[],bubbleToManCollection=[],connections1bman=[],
			bubbleToGMCollection=[],bubbleToOMCollection=[],bubbleToChainCollection=[],connections1bchain=[],connections1bgm=[],connections1bom=[];
            document.querySelectorAll('.link-newbg').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newbo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newbt').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newgm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newom').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcgmm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcomm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcbim').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newbman').forEach(ele => {
              ele.remove();
            });
			
			document.querySelectorAll('.link-newbgm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newbom').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newbmog').forEach(ele => {
              ele.remove();
            });
			
			let elems = document.querySelectorAll(".selectedmap");
			[].forEach.call(elems, function(el) {
				el.classList.remove("selectedmap");
			});
			$('.bubblemap-box').removeClass('selectedgraph')
			$('.bubblemap-box').removeClass('selectedorg')
			$('.bubblemap-box').removeClass('selectedGM')
			$('.bubblemap-box').removeClass('selectedOM')
			$('.bubblemap-box').removeClass('selectedchain')
			
			document.getElementById('togglee').style.visibility = 'hidden';
          
		  for (var i = GraphToManCollection.length - 1; i >= 0; --i) {
			  e = GraphToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="map") {
				GraphToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections2gman.length - 1; i >= 0; --i) {
			  e = connections2gman[i].tarid;
			  if (e.slice(0, 3)=="map") {
				connections2gman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newgman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="map") {
				  ele.remove();
		  }})
		  
		  for (var i = OrgToManCollection.length - 1; i >= 0; --i) {
			  e = OrgToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="map") {
				OrgToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections3oman.length - 1; i >= 0; --i) {
			  e = connections3oman[i].tarid;
			  if (e.slice(0, 3)=="map") {
				connections3oman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="map") {
				  ele.remove();
		  }})

		  for (var i = ClusterGMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="map") {
				ClusterGMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections4cman.length - 1; i >= 0; --i) {
			  e = connections4cman[i].tarid;
			  if (e.slice(0, 3)=="map") {
				connections4cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgmman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="map") {
				  ele.remove();
		  }})

		  for (var i = ClusterGOToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGOToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="map") {
				ClusterGOToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections5cman.length - 1; i >= 0; --i) {
			  e = connections5cman[i].tarid;
			  if (e.slice(0, 3)=="map") {
				connections5cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="map") {
				  ele.remove();
		  }})

		  for (var i = ClusterOMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterOMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="map") {
				ClusterOMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections6cman.length - 1; i >= 0; --i) {
			  e = connections6cman[i].tarid;
			  if (e.slice(0, 3)=="map") {
				connections6cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcomman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="map") {
				  ele.remove();
		  }})

		  for (var i = ClusterChainToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterChainToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="map") {
				ClusterChainToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections7cman.length - 1; i >= 0; --i) {
			  e = connections7cman[i].tarid;
			  if (e.slice(0, 3)=="map") {
				connections7cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcbiman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="map") {
				  ele.remove();
		  }})
		  
		  for (var i = TextDocToManCollection.length - 1; i >= 0; --i) {
			  e = TextDocToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="map") {
				TextDocToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections8tman.length - 1; i >= 0; --i) {
			  e = connections8tman[i].tarid;
			  if (e.slice(0, 3)=="map") {
				connections8tman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newtdman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="map") {
				  ele.remove();
		  }})
		  
		  } 
		  
		  for (var i = GraphToTextCollection.length - 1; i >= 0; --i) {
			  if (GraphToTextCollection[i].target.ele ==sid) {
				$('#' + sid).removeClass('selectedgraph');			  				  
				GraphToTextCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections2gt.length - 1; i >= 0; --i) {
			  if (connections2gt[i].targetid == sid) {
				connections2gt.splice(i, 1); 
			  }}
		  document.querySelectorAll('.link-newgt').forEach(ele => {
              if(ele.getAttribute('tar') == sid){
				  ele.remove();
		  }})
		 

		if($(this).parent().hasClass('all-data-box')){
            GraphToMapCollection = [], GraphToOrgCollection = [],GraphToTextCollection=[],bubbleToGraphCollection=[],OrgToGraphCollection=[];
            connections2gt = [], connections2go= [],connections2gm=[],connections1bg=[],connections3og=[],connections4cg=[],
			ClusterGMToGraph=[],ClusterGOToGraph=[],connections5cg=[],connections7cg=[],ClusterChainToGraph=[],GraphToManCollection=[],
			connections2gman=[],GraphToGMCollection=[],GraphToGOCollection=[],GraphToChainCollection=[],connections2gchain=[],connections2ggm=[],connections2ggo=[];
            document.querySelectorAll('.link-newgm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newgo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newgt').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newbg').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newog').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcgmg').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcgog').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newccg').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newgman').forEach(ele => {
              ele.remove();
            });		
			document.querySelectorAll('.link-newggm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newggo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newggom').forEach(ele => {
              ele.remove();
            });			
			
			let elems = document.querySelectorAll(".selectedgraph");
			[].forEach.call(elems, function(el) {
				el.classList.remove("selectedgraph");
			});

			$('.all-data-box').removeClass('selectedmap')
			$('.all-data-box').removeClass('selectedorg')
			$('.all-data-box').removeClass('selectedGM')
			$('.all-data-box').removeClass('selectedGO')
			$('.all-data-box').removeClass('selectedchain')			
						
			document.getElementById('togglee').style.visibility = 'hidden';

		  for (var i = bubbleToManCollection.length - 1; i >= 0; --i) {
			  e = bubbleToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="per") {
				bubbleToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections1bman.length - 1; i >= 0; --i) {
			  e = connections1bman[i].tarid;
			  if (e.slice(0, 3)=="per") {
				connections1bman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newbman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="per") {
				  ele.remove();
		  }})
		  
		  for (var i = OrgToManCollection.length - 1; i >= 0; --i) {
			  e = OrgToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="per") {
				OrgToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections3oman.length - 1; i >= 0; --i) {
			  e = connections3oman[i].tarid;
			  if (e.slice(0, 3)=="per") {
				connections3oman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="per") {
				  ele.remove();
		  }})

		  for (var i = ClusterGMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="per") {
				ClusterGMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections4cman.length - 1; i >= 0; --i) {
			  e = connections4cman[i].tarid;
			  if (e.slice(0, 3)=="per") {
				connections4cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgmman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="per") {
				  ele.remove();
		  }})

		  for (var i = ClusterGOToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGOToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="per") {
				ClusterGOToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections5cman.length - 1; i >= 0; --i) {
			  e = connections5cman[i].tarid;
			  if (e.slice(0, 3)=="per") {
				connections5cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="per") {
				  ele.remove();
		  }})

		  for (var i = ClusterOMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterOMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="per") {
				ClusterOMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections6cman.length - 1; i >= 0; --i) {
			  e = connections6cman[i].tarid;
			  if (e.slice(0, 3)=="per") {
				connections6cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcomman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="per") {
				  ele.remove();
		  }})

		  for (var i = ClusterChainToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterChainToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="per") {
				ClusterChainToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections7cman.length - 1; i >= 0; --i) {
			  e = connections7cman[i].tarid;
			  if (e.slice(0, 3)=="per") {
				connections7cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcbiman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="per") {
				  ele.remove();
		  }})			
		  for (var i = TextDocToManCollection.length - 1; i >= 0; --i) {
			  e = TextDocToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="per") {
				TextDocToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections8tman.length - 1; i >= 0; --i) {
			  e = connections8tman[i].tarid;
			  if (e.slice(0, 3)=="per") {
				connections8tman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newtdman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="per") {
				  ele.remove();
		  }})			
          }

		for (var i = OrgToTextCollection.length - 1; i >= 0; --i) {
			  if (OrgToTextCollection[i].target.ele ==sid) {
			  $('#' + sid).removeClass('selectedorg');							  
				OrgToTextCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections3ot.length - 1; i >= 0; --i) {
			  if (connections3ot[i].targetid == sid) {
				connections3ot.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newot').forEach(ele => {
              if(ele.getAttribute('tar') == sid){
				  ele.remove();
		  }})

		if($(this).parent().hasClass('organize-data-box')){
            OrgToMapCollection = [], OrgToGraphCollection = [],OrgToTextCollection=[],bubbleToOrgCollection=[],GraphToOrgCollection=[];
            connections3og = [], connections3om= [],connections3ot=[],connections1bo=[],connections2go=[],connections3oman=[],
			ClusterGOToOrg=[],connections5co=[],ClusterOMToOrg=[],connections6co=[],connections7co=[],ClusterChainToOrg=[],OrgToManCollection=[],
			OrgToGOCollection=[],OrgToOMCollection=[],OrgToChainCollection=[],connections3ochain=[],connections3ogo=[],connections3oom=[];
            document.querySelectorAll('.link-newog').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newom').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newot').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newbo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newgo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcomo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcgoo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcco').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newoman').forEach(ele => {
              ele.remove();
            });		
            document.querySelectorAll('.link-newoom').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newoog').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newoogm').forEach(ele => {
              ele.remove();
            });			
			
			let elems = document.querySelectorAll(".selectedorg");
			[].forEach.call(elems, function(el) {
				el.classList.remove("selectedorg");
			});

			$('.organize-data-box').removeClass('selectedmap')
			$('.organize-data-box').removeClass('selectedgraph')
			$('.organize-data-box').removeClass('selectedOM')
			$('.organize-data-box').removeClass('selectedGO')
			$('.organize-data-box').removeClass('selectedchain')			
						
			document.getElementById('togglee').style.visibility = 'hidden';

		  for (var i = bubbleToManCollection.length - 1; i >= 0; --i) {
			  e = bubbleToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="bar") {
				bubbleToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections1bman.length - 1; i >= 0; --i) {
			  e = connections1bman[i].tarid;
			  if (e.slice(0, 3)=="bar") {
				connections1bman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newbman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="bar") {
				  ele.remove();
		  }})
		  
		  for (var i = GraphToManCollection.length - 1; i >= 0; --i) {
			  e = GraphToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="bar") {
				GraphToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections2gman.length - 1; i >= 0; --i) {
			  e = connections2gman[i].tarid;
			  if (e.slice(0, 3)=="bar") {
				connections2gman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newgman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="bar") {
				  ele.remove();
		  }})

		  for (var i = ClusterGMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="bar") {
				ClusterGMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections4cman.length - 1; i >= 0; --i) {
			  e = connections4cman[i].tarid;
			  if (e.slice(0, 3)=="bar") {
				connections4cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgmman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="bar") {
				  ele.remove();
		  }})

		  for (var i = ClusterGOToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGOToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="bar") {
				ClusterGOToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections5cman.length - 1; i >= 0; --i) {
			  e = connections5cman[i].tarid;
			  if (e.slice(0, 3)=="bar") {
				connections5cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="bar") {
				  ele.remove();
		  }})

		  for (var i = ClusterOMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterOMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="bar") {
				ClusterOMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections6cman.length - 1; i >= 0; --i) {
			  e = connections6cman[i].tarid;
			  if (e.slice(0, 3)=="bar") {
				connections6cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcomman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="bar") {
				  ele.remove();
		  }})

		  for (var i = ClusterChainToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterChainToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="bar") {
				ClusterChainToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections7cman.length - 1; i >= 0; --i) {
			  e = connections7cman[i].tarid;
			  if (e.slice(0, 3)=="bar") {
				connections7cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcbiman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="bar") {
				  ele.remove();
		  }})			
		  for (var i = TextDocToManCollection.length - 1; i >= 0; --i) {
			  e = TextDocToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="bar") {
				TextDocToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections8tman.length - 1; i >= 0; --i) {
			  e = connections8tman[i].tarid;
			  if (e.slice(0, 3)=="bar") {
				connections8tman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newtdman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="bar") {
				  ele.remove();
		  }})						
          }
			
		if($(this).parent().hasClass('clusterGM-data-box')){
            ClusterGMToGraph = [], ClusterGMToMap = [],ClusterGMToTextCollection=[],ClusterChainToGM=[],bubbleToGMCollection=[],GraphToGMCollection=[]
			connections4cg=[],connections4cm=[],connections4ct=[],connections7cgm=[],ClusterGMToManCollection=[],connections4cman=[],connections1bgm=[],connections2ggm=[];
            document.querySelectorAll('.link-newcgmg').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcgmm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcgmt').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newccgm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcgmman').forEach(ele => {
              ele.remove();
            });	
			document.querySelectorAll('.link-newbgm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newggm').forEach(ele => {
              ele.remove();
            });				
			let elems = document.querySelectorAll(".selectedGM");
			[].forEach.call(elems, function(el) {
				el.classList.remove("selectedGM");
			});

			$('.clusterGM-data-box').removeClass('selectedmap')
			$('.clusterGM-data-box').removeClass('selectedgraph')
			$('.clusterGM-data-box').removeClass('selectedchain')			
		

		  for (var i = bubbleToManCollection.length - 1; i >= 0; --i) {
			  e = bubbleToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgm") {
				bubbleToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections1bman.length - 1; i >= 0; --i) {
			  e = connections1bman[i].tarid;
			  if (e.slice(0, 3)=="cgm") {
				connections1bman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newbman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgm") {
				  ele.remove();
		  }})
		  
		  for (var i = GraphToManCollection.length - 1; i >= 0; --i) {
			  e = GraphToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgm") {
				GraphToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections2gman.length - 1; i >= 0; --i) {
			  e = connections2gman[i].tarid;
			  if (e.slice(0, 3)=="cgm") {
				connections2gman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newgman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgm") {
				  ele.remove();
		  }})

		  for (var i = OrgToManCollection.length - 1; i >= 0; --i) {
			  e = OrgToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgm") {
				OrgToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections3oman.length - 1; i >= 0; --i) {
			  e = connections3oman[i].tarid;
			  if (e.slice(0, 3)=="cgm") {
				connections3oman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgm") {
				  ele.remove();
		  }})

		  for (var i = ClusterGOToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGOToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgm") {
				ClusterGOToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections5cman.length - 1; i >= 0; --i) {
			  e = connections5cman[i].tarid;
			  if (e.slice(0, 3)=="cgm") {
				connections5cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgm") {
				  ele.remove();
		  }})

		  for (var i = ClusterOMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterOMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgm") {
				ClusterOMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections6cman.length - 1; i >= 0; --i) {
			  e = connections6cman[i].tarid;
			  if (e.slice(0, 3)=="cgm") {
				connections6cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcomman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgm") {
				  ele.remove();
		  }})

		  for (var i = ClusterChainToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterChainToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgm") {
				ClusterChainToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections7cman.length - 1; i >= 0; --i) {
			  e = connections7cman[i].tarid;
			  if (e.slice(0, 3)=="cgm") {
				connections7cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcbiman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgm") {
				  ele.remove();
		  }})			
		  for (var i = TextDocToManCollection.length - 1; i >= 0; --i) {
			  e = TextDocToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgm") {
				TextDocToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections8tman.length - 1; i >= 0; --i) {
			  e = connections8tman[i].tarid;
			  if (e.slice(0, 3)=="cgm") {
				connections8tman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newtdman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgm") {
				  ele.remove();
		  }})			
          }

		for (var i = ClusterGMToTextCollection.length - 1; i >= 0; --i) {
			  if (ClusterGMToTextCollection[i].target.ele ==sid) {
			  $('#' + sid).removeClass('selectedGM');										  
				ClusterGMToTextCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections4ct.length - 1; i >= 0; --i) {
			  if (connections4ct[i].targetid == sid) {
				connections4ct.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgmt').forEach(ele => {
              if(ele.getAttribute('tar') == sid){
				  ele.remove();
		  }})
		
		
		if($(this).parent().hasClass('clusterGO-data-box')){
            ClusterGOToGraph = [], ClusterGOToOrg = [],ClusterGOToTextCollection=[],ClusterChainToGO=[],connections5cman=[],GraphToGOCollection=[],OrgToGOCollection=[],
			connections5cg=[],connections5co=[],connections5ct=[],connections7cgo=[],ClusterGOToManCollection=[],connections2ggo=[],connections3ogo=[];
            document.querySelectorAll('.link-newcgog').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcgoo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcgot').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newccgo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcgoman').forEach(ele => {
              ele.remove();
            });	
			document.querySelectorAll('.link-newggo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newoog').forEach(ele => {
              ele.remove();
            });				
			let elems = document.querySelectorAll(".selectedGO");
			[].forEach.call(elems, function(el) {
				el.classList.remove("selectedGO");
			});
						
			$('.clusterGO-data-box').removeClass('selectedorg')
			$('.clusterGO-data-box').removeClass('selectedgraph')
			$('.clusterGO-data-box').removeClass('selectedchain')		

		  for (var i = bubbleToManCollection.length - 1; i >= 0; --i) {
			  e = bubbleToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgo") {
				bubbleToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections1bman.length - 1; i >= 0; --i) {
			  e = connections1bman[i].tarid;
			  if (e.slice(0, 3)=="cgo") {
				connections1bman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newbman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgo") {
				  ele.remove();
		  }})
		  
		  for (var i = GraphToManCollection.length - 1; i >= 0; --i) {
			  e = GraphToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgo") {
				GraphToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections2gman.length - 1; i >= 0; --i) {
			  e = connections2gman[i].tarid;
			  if (e.slice(0, 3)=="cgo") {
				connections2gman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newgman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgo") {
				  ele.remove();
		  }})

		  for (var i = OrgToManCollection.length - 1; i >= 0; --i) {
			  e = OrgToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgo") {
				OrgToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections3oman.length - 1; i >= 0; --i) {
			  e = connections3oman[i].tarid;
			  if (e.slice(0, 3)=="cgo") {
				connections3oman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgo") {
				  ele.remove();
		  }})

		  for (var i = ClusterGMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgo") {
				ClusterGMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections4cman.length - 1; i >= 0; --i) {
			  e = connections4cman[i].tarid;
			  if (e.slice(0, 3)=="cgo") {
				connections4cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgmman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgo") {
				  ele.remove();
		  }})

		  for (var i = ClusterOMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterOMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgo") {
				ClusterOMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections6cman.length - 1; i >= 0; --i) {
			  e = connections6cman[i].tarid;
			  if (e.slice(0, 3)=="cgo") {
				connections6cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcomman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgo") {
				  ele.remove();
		  }})

		  for (var i = ClusterChainToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterChainToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgo") {
				ClusterChainToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections7cman.length - 1; i >= 0; --i) {
			  e = connections7cman[i].tarid;
			  if (e.slice(0, 3)=="cgo") {
				connections7cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcbiman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgo") {
				  ele.remove();
		  }})			
		  
		  for (var i = TextDocToManCollection.length - 1; i >= 0; --i) {
			  e = TextDocToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cgo") {
				TextDocToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections8tman.length - 1; i >= 0; --i) {
			  e = connections8tman[i].tarid;
			  if (e.slice(0, 3)=="cgo") {
				connections8tman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newtdman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cgo") {
				  ele.remove();
		  }})
          }

		for (var i = ClusterGOToTextCollection.length - 1; i >= 0; --i) {
			  if (ClusterGOToTextCollection[i].target.ele ==sid) {
			  $('#' + sid).removeClass('selectedGO');										  
				ClusterGOToTextCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections5ct.length - 1; i >= 0; --i) {
			  if (connections5ct[i].targetid == sid) {
				connections5ct.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgot').forEach(ele => {
              if(ele.getAttribute('tar') == sid){
				  ele.remove();
		  }})
		  
		  
		  if($(this).parent().hasClass('clusterOM-data-box')){
            ClusterOMToMap = [], ClusterOMToOrg = [],ClusterOMToTextCollection=[],ClusterChainToOM=[],connections6cman=[],OrgToOMCollection=[],bubbleToOMCollection=[],
			connections6cm=[],connections6co=[],connections6ct=[],connections7com=[],ClusterOMToManCollection=[],connections1bom=[],connections3oom=[];
            document.querySelectorAll('.link-newcomm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcomo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcomt').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newccom').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcomman').forEach(ele => {
              ele.remove();
            });		
			document.querySelectorAll('.link-newoom').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newbom').forEach(ele => {
              ele.remove();
            });		
			let elems = document.querySelectorAll(".selectedOM");
			[].forEach.call(elems, function(el) {
				el.classList.remove("selectedOM");
			});
			
			$('.clusterOM-data-box').removeClass('selectedorg')
			$('.clusterOM-data-box').removeClass('selectedmap')
			$('.clusterOM-data-box').removeClass('selectedchain')	
			
			
		  for (var i = bubbleToManCollection.length - 1; i >= 0; --i) {
			  e = bubbleToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="com") {
				bubbleToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections1bman.length - 1; i >= 0; --i) {
			  e = connections1bman[i].tarid;
			  if (e.slice(0, 3)=="com") {
				connections1bman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newbman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="com") {
				  ele.remove();
		  }})
		  
		  for (var i = GraphToManCollection.length - 1; i >= 0; --i) {
			  e = GraphToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="com") {
				GraphToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections2gman.length - 1; i >= 0; --i) {
			  e = connections2gman[i].tarid;
			  if (e.slice(0, 3)=="com") {
				connections2gman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newgman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="com") {
				  ele.remove();
		  }})

		  for (var i = OrgToManCollection.length - 1; i >= 0; --i) {
			  e = OrgToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="com") {
				OrgToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections3oman.length - 1; i >= 0; --i) {
			  e = connections3oman[i].tarid;
			  if (e.slice(0, 3)=="com") {
				connections3oman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="com") {
				  ele.remove();
		  }})

		  for (var i = ClusterGMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="com") {
				ClusterGMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections4cman.length - 1; i >= 0; --i) {
			  e = connections4cman[i].tarid;
			  if (e.slice(0, 3)=="com") {
				connections4cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgmman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="com") {
				  ele.remove();
		  }})

		  for (var i = ClusterGOToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGOToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="com") {
				ClusterGOToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections5cman.length - 1; i >= 0; --i) {
			  e = connections5cman[i].tarid;
			  if (e.slice(0, 3)=="com") {
				connections5cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="com") {
				  ele.remove();
		  }})

		  for (var i = ClusterChainToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterChainToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="com") {
				ClusterChainToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections7cman.length - 1; i >= 0; --i) {
			  e = connections7cman[i].tarid;
			  if (e.slice(0, 3)=="com") {
				connections7cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcbiman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="com") {
				  ele.remove();
		  }})		
		  
		  for (var i = TextDocToManCollection.length - 1; i >= 0; --i) {
			  e = TextDocToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="com") {
				TextDocToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections8tman.length - 1; i >= 0; --i) {
			  e = connections8tman[i].tarid;
			  if (e.slice(0, 3)=="com") {
				connections8tman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newtdman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="com") {
				  ele.remove();
		  }})		  
          }

		for (var i = ClusterOMToTextCollection.length - 1; i >= 0; --i) {
			  if (ClusterOMToTextCollection[i].target.ele ==sid) {
			  $('#' + sid).removeClass('selectedOM');										  
				ClusterOMToTextCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections6ct.length - 1; i >= 0; --i) {
			  if (connections6ct[i].targetid == sid) {
				connections6ct.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcomt').forEach(ele => {
              if(ele.getAttribute('tar') == sid){
				  ele.remove();
		  }})
		  
		  
		  if($(this).parent().hasClass('clusterchain-data-box')){
            ClusterChainToMap = [], ClusterChainToOrg = [],ClusterChainToMap=[],ClusterChainToGM=[],ClusterChainToGO=[],ClusterChainToOM=[],connections7ct=[],connections7cman=[]
			connections7cm=[],connections7co=[],connections7cg=[],connections7cgm=[],connections7cgo=[],connections7com=[];ClusterChainToTextCollection=[],ClusterChainToManCollection=[],
			GraphToChainCollection=[],bubbleToChainCollection=[],OrgToChainCollection=[],connections1bchain=[],connections2gchain=[],connections3ochain=[];
			
			document.querySelectorAll('.link-newccg').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcbim').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcco').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newccgm').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newccgo').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newccom').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcbit').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newcbiman').forEach(ele => {
              ele.remove();
            });	
			document.querySelectorAll('.link-newggom').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newbmog').forEach(ele => {
              ele.remove();
            });
			document.querySelectorAll('.link-newoogm').forEach(ele => {
              ele.remove();
            });				
			let elems = document.querySelectorAll(".selectedchain");
			[].forEach.call(elems, function(el) {
				el.classList.remove("selectedchain");
			});
			
			$('.clusterchain-data-box').removeClass('selectedorg')
			$('.clusterchain-data-box').removeClass('selectedmap')
			$('.clusterchain-data-box').removeClass('selectedgraph')					

		  for (var i = bubbleToManCollection.length - 1; i >= 0; --i) {
			  e = bubbleToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cch") {
				bubbleToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections1bman.length - 1; i >= 0; --i) {
			  e = connections1bman[i].tarid;
			  if (e.slice(0, 3)=="cch") {
				connections1bman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newbman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cch") {
				  ele.remove();
		  }})
		  
		  for (var i = GraphToManCollection.length - 1; i >= 0; --i) {
			  e = GraphToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cch") {
				GraphToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections2gman.length - 1; i >= 0; --i) {
			  e = connections2gman[i].tarid;
			  if (e.slice(0, 3)=="cch") {
				connections2gman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newgman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cch") {
				  ele.remove();
		  }})

		  for (var i = OrgToManCollection.length - 1; i >= 0; --i) {
			  e = OrgToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cch") {
				OrgToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections3oman.length - 1; i >= 0; --i) {
			  e = connections3oman[i].tarid;
			  if (e.slice(0, 3)=="cch") {
				connections3oman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cch") {
				  ele.remove();
		  }})

		  for (var i = ClusterGMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cch") {
				ClusterGMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections4cman.length - 1; i >= 0; --i) {
			  e = connections4cman[i].tarid;
			  if (e.slice(0, 3)=="cch") {
				connections4cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgmman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cch") {
				  ele.remove();
		  }})

		  for (var i = ClusterGOToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGOToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cch") {
				ClusterGOToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections5cman.length - 1; i >= 0; --i) {
			  e = connections5cman[i].tarid;
			  if (e.slice(0, 3)=="cch") {
				connections5cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cch") {
				  ele.remove();
		  }})

		  for (var i = ClusterOMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterOMToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cch") {
				ClusterOMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections6cman.length - 1; i >= 0; --i) {
			  e = connections6cman[i].tarid;
			  if (e.slice(0, 3)=="cch") {
				connections6cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcomman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cch") {
				  ele.remove();
		  }})	
		  
		  for (var i = TextDocToManCollection.length - 1; i >= 0; --i) {
			  e = TextDocToManCollection[i].target.ele;
			  if (e.slice(0, 3)=="cch") {
				TextDocToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections8tman.length - 1; i >= 0; --i) {
			  e = connections8tman[i].tarid;
			  if (e.slice(0, 3)=="cch") {
				connections8tman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newtdman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e.slice(0, 3)=="cch") {
				  ele.remove();
		  }})
          }
		  
			for (var i = ClusterChainToTextCollection.length - 1; i >= 0; --i) {
			  if (ClusterChainToTextCollection[i].target.ele ==sid) {
				$('#' + sid).removeClass('selectedchain');							  
				ClusterChainToTextCollection.splice(i, 1); 
			  }}
		  
			for (var i = connections7ct.length - 1; i >= 0; --i) {
			  if (connections7ct[i].targetid == sid) {
				connections7ct.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcbit').forEach(ele => {
              if(ele.getAttribute('tar') == sid){
				  ele.remove();
				  
		  }})
		  
		  if($(this).parent().hasClass('seldoc'+sid)){
		  
		  document.querySelectorAll('.link-newtdman').forEach(ele => {
              if(ele.getAttribute('ele') == sid){
				  ele.remove();
		  }})
				  
		  for (var i = bubbleToManCollection.length - 1; i >= 0; --i) {
			  e = bubbleToManCollection[i].target.ele;
			  if (e == sid) {
				bubbleToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections1bman.length - 1; i >= 0; --i) {
			  e = connections1bman[i].tarid;
			  if (e == sid) {
				connections1bman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newbman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e == sid) {
				  ele.remove();
		  }})
		  
		  for (var i = GraphToManCollection.length - 1; i >= 0; --i) {
			  e = GraphToManCollection[i].target.ele;
			  if (e == sid) {
				GraphToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections2gman.length - 1; i >= 0; --i) {
			  e = connections2gman[i].tarid;
			  if (e == sid) {
				connections2gman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newgman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e == sid) {
				  ele.remove();
		  }})

		  for (var i = OrgToManCollection.length - 1; i >= 0; --i) {
			  e = OrgToManCollection[i].target.ele;
			  if (e == sid) {
				OrgToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections3oman.length - 1; i >= 0; --i) {
			  e = connections3oman[i].tarid;
			  if (e == sid) {
				connections3oman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e == sid) {
				  ele.remove();
		  }})

		  for (var i = ClusterGMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGMToManCollection[i].target.ele;
			  if (e == sid) {
				ClusterGMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections4cman.length - 1; i >= 0; --i) {
			  e = connections4cman[i].tarid;
			  if (e == sid) {
				connections4cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgmman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e == sid) {
				  ele.remove();
		  }})

		  for (var i = ClusterGOToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterGOToManCollection[i].target.ele;
			  if (e == sid) {
				ClusterGOToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections5cman.length - 1; i >= 0; --i) {
			  e = connections5cman[i].tarid;
			  if (e == sid) {
				connections5cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcgoman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e == sid) {
				  ele.remove();
		  }})

		  for (var i = ClusterOMToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterOMToManCollection[i].target.ele;
			  if (e == sid) {
				ClusterOMToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections6cman.length - 1; i >= 0; --i) {
			  e = connections6cman[i].tarid;
			  if (e == sid) {
				connections6cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcomman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e == sid) {
				  ele.remove();
		  }})	

		  for (var i = ClusterChainToManCollection.length - 1; i >= 0; --i) {
			  e = ClusterChainToManCollection[i].target.ele;
			  if (e == sid) {
				ClusterChainToManCollection.splice(i, 1); 
			  }}
		
		  for (var i = connections7cman.length - 1; i >= 0; --i) {
			  e = connections7cman[i].tarid;
			  if (e == sid) {
				connections7cman.splice(i, 1); 
			  }}
			  
		  document.querySelectorAll('.link-newcbiman').forEach(ele => {
			   e = ele.getAttribute('tar');
			  if (e == sid) {
				  ele.remove();
		  }})		

		  }
		  
          if($(this).parent().hasClass('custom-data')) {
            $(this).parent().hide();
          } else {
            $(this).parent().detach();
          }
        });
      
        document.querySelector('.matrix-button').addEventListener('click', function() {							//matrix view button
          document.querySelector('.right .matrix-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .matrix-data-box').style.zIndex = 99;
        });

        document.querySelector('.graph-button').addEventListener('click', function() {							//graph view button
          document.querySelector('.right .all-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .all-data-box').style.zIndex = 99;

//		var nopoints = document.getElementById('nodata').value;			

		  
			var element = document.querySelector('.all-data');
			var instance2 = panzoom(element);
			if(nopoints=="50"){
			instance2.zoomAbs(
				100, // initial x position
				230, // initial y position
				2 // initial zoom 
			  );	
			  instance2.pause();
			  
			}
				if(nopoints=="100"){
			instance2.zoomAbs(
				10, // initial x position
				200, // initial y position
				1.5 // initial zoom 
			  );
				instance2.pause();
			}	
			if(nopoints=="150"){
			instance2.zoomAbs(
				-200, // initial x position
				150, // initial y position
				1.1 // initial zoom 
			  );
				instance2.pause();
			}			

		$('#checkgraph').change(function(){	
		if (document.getElementById('checkgraph').checked)
		{
			instance2.pause();    //  Pauses event handling
		}			
		else
		{
			instance2.resume();
		}});		
		
		instance2.on('pan', function(e) {
			reDrawLines();
		});
		
		instance2.on('zoom', function(e) {
			reDrawLines();
		});
		  
        });

        document.querySelector('.bubble-map-button').addEventListener('click', function() {						//map view button
          document.querySelector('.right .bubblemap-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .bubblemap-box').style.zIndex = 99;
          drawBubbleMap();
		
		var element = document.querySelector('.bubblemap')
		var instance = panzoom(element)
			instance.zoomAbs(
				10, // initial x position
				10, // initial y position
				1.6 // initial zoom 
			  );
		instance.pause();
		$('#checkmap').change(function(){	
		if (document.getElementById('checkmap').checked)
		{
			instance.pause();    //  Pauses event handling
		}			
		else
		{
			instance.resume();
		}});
		
		instance.on('pan', function(e) {
			reDrawLines();
		});
		
		instance.on('zoom', function(e) {
			//console.log(instance.getTransform().scale);
			
			d3.selectAll('.circle1')
			.attr('r', function() {
				return 7 * (1/instance.getTransform().scale);
			});
			
			reDrawLines();
		});
        });
			
		document.querySelector('.organize-button').addEventListener('click', function() {						//organize view button
          document.querySelector('.right .organize-data-box').style.display = 'block';								//adding button click event for left side of software
          $('.note').css('z-index', 9);
          document.querySelector('.right .organize-data-box').style.zIndex = 99;
		  
//		  var element = document.querySelector('#organizesvg')
 
			// And pass it to panzoom
//			var instance = panzoom(element)
		  
        });
		
		document.querySelector('.cluster-button').addEventListener('click', function() {						//cluster view button
          if(document.querySelector('.right .all-data-box').style.display == 'block' && document.querySelector('.right .bubblemap-box').style.display == 'block')
		  {
		  document.querySelector('.right .clusterGM-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .clusterGM-data-box').style.zIndex = 99;
		document.getElementById("clusterGM").style.left = (parseInt($('#bubblemapbox').position().left+$('#graphboxout').position().left)+580)/2+"px";
		  
		  }
		  
		if(document.querySelector('.right .all-data-box').style.display == 'block' && document.querySelector('.right .organize-data-box').style.display == 'block')
		{
			document.querySelector('.right .clusterGO-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
		document.getElementById("clusterGO").style.left = (parseInt($('#orgbox').position().left+$('#graphboxout').position().left)+900)/2+"px";		
		document.getElementById("clusterGO").style.top = (parseInt($('#orgbox').position().top+$('#graphboxout').position().top)+950)/2+"px";		  
		
          document.querySelector('.right .clusterGO-data-box').style.zIndex = 99;
			
		}
		
		if(document.querySelector('.right .bubblemap-box').style.display == 'block' && document.querySelector('.right .organize-data-box').style.display == 'block')
		{
			document.querySelector('.right .clusterOM-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
		document.getElementById("clusterOM").style.left = (parseInt($('#bubblemapbox').position().left+$('#orgbox').position().left-300))/2+"px";		
		document.getElementById("clusterOM").style.top = (parseInt($('#bubblemapbox').position().top+$('#orgbox').position().top)+950)/2+"px";			  
          document.querySelector('.right .clusterOM-data-box').style.zIndex = 99;
			
		}
		
		if(document.querySelector('.right .bubblemap-box').style.display == 'block' && document.querySelector('.right .organize-data-box').style.display == 'block' && document.querySelector('.right .all-data-box').style.display == 'block')
		{
			document.getElementById('togglee').style.visibility = 'visible';
			//document.querySelector('.right .clusterchain-data-box').style.display = 'block';
		}	
        });
			
		document.querySelector('.dates-button').addEventListener('click', function() {							//dates view button
        document.querySelector('.right .dates-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .dates-data-box').style.zIndex = 99;
        });

		document.querySelector('.triclusterbut').addEventListener('click', function() {							//tri cluster view button
			document.querySelector('.right .clusterOM-data-box').style.display = 'none';
			document.querySelector('.right .clusterGO-data-box').style.display = 'none';
		  document.querySelector('.right .clusterGM-data-box').style.display = 'none';

        document.querySelector('.right .clusterchain-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .clusterchain-data-box').style.zIndex = 99;
        });

		document.querySelector('.biclusterbut').addEventListener('click', function() {							//bicluster view button
		document.querySelector('.right .clusterchain-data-box').style.display = 'none';
		document.querySelector('.right .clusterOM-data-box').style.display = 'block';
			document.querySelector('.right .clusterGO-data-box').style.display = 'block';
		  document.querySelector('.right .clusterGM-data-box').style.display = 'block';
		  });
		
		document.querySelector('.allclusterbut').addEventListener('click', function() {							//allcluster view button
		document.querySelector('.right .clusterchain-data-box').style.display = 'block';
		document.querySelector('.right .clusterOM-data-box').style.display = 'block';
		document.querySelector('.right .clusterGO-data-box').style.display = 'block';
		document.querySelector('.right .clusterGM-data-box').style.display = 'block';
		  });

		document.querySelector('.Aswitch').addEventListener('click', function() {								//A test view button
		
		if(document.querySelector('.right .bubblemap-box').style.display != 'block')
		{
			document.querySelector('.right .bubblemap-box').style.display = 'block';
		
          $('.note').css('z-index', 9);
          document.querySelector('.right .bubblemap-box').style.zIndex = 99;
          drawBubbleMap();
		  var element = document.querySelector('.bubblemap')
			//panzoom(element)
		}
		
		if(document.querySelector('.right .all-data-box').style.display != 'block')
		{
		  document.querySelector('.right .all-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .all-data-box').style.zIndex = 99;
			var element = document.querySelector('.all-data')
 
			// And pass it to panzoom
			panzoom(element)
			.zoomAbs(
            100, // initial x position
            230, // initial y position
            2 // initial zoom 
          );		
		}
		if(document.querySelector('.right .organize-data-box').style.display != 'block'){
			document.querySelector('.right .organize-data-box').style.display = 'block';
		}

		document.querySelector('.right .matrix-data-box').style.display = 'none';
		document.querySelector('.right .dates-data-box').style.display = 'none';		
		document.querySelector('.right .clusterchain-data-box').style.display = 'none';
		document.querySelector('.right .clusterOM-data-box').style.display = 'none';
		document.querySelector('.right .clusterGO-data-box').style.display = 'none';
		document.querySelector('.right .clusterGM-data-box').style.display = 'none';
		
		document.getElementById("graphbut").disabled = false;
		document.getElementById("mapbut").disabled = false;
		document.getElementById("listbut").disabled = false;
		document.getElementById("relationbut").disabled = true;
		document.getElementById("timebut").disabled = true;
		document.getElementById("matrixbut").disabled = true;
		document.getElementById('togglee').style.visibility = 'hidden';
		document.getElementById('Biclusters').style.visibility = 'hidden';
		document.getElementById('tricluster').style.visibility = 'hidden';		

		  });
		
		document.querySelector('.Bswitch').addEventListener('click', function() {								//B test view button
		
		document.querySelector('.right .clusterGM-data-box').style.display = 'block';
        $('.note').css('z-index', 9);
        document.querySelector('.right .clusterGM-data-box').style.zIndex = 99;
		
		let d = document.getElementById('clusterGM');
		d.style.position = "absolute";
		d.style.left = '700px';
		d.style.top = '10px';			
	
		document.querySelector('.right .clusterGO-data-box').style.display = 'block';
        $('.note').css('z-index', 9);
        document.querySelector('.right .clusterGO-data-box').style.zIndex = 99;
		
		let d2 = document.getElementById('clusterGO');
		d2.style.position = "absolute";
		d2.style.left = '10px';
		d2.style.top = '10px';			
		
		document.querySelector('.right .clusterOM-data-box').style.display = 'block';
        $('.note').css('z-index', 9);
        document.querySelector('.right .clusterOM-data-box').style.zIndex = 99;

		let d3 = document.getElementById('clusterOM');
		d3.style.position = "absolute";
		d3.style.left = '300px';
		d3.style.top = '600px';			
		
		if(document.querySelector('.right .bubblemap-box').style.display != 'block')
		{
			document.querySelector('.right .bubblemap-box').style.display = 'block';
		
          $('.note').css('z-index', 9);
          document.querySelector('.right .bubblemap-box').style.zIndex = 99;
          drawBubbleMap();
		 var element = document.querySelector('.bubblemap')
 			panzoom(element)          
		}
		
		if(document.querySelector('.right .all-data-box').style.display != 'block')
		{
		  document.querySelector('.right .all-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .all-data-box').style.zIndex = 99;
			var element = document.querySelector('.all-data')
 
			// And pass it to panzoom
			panzoom(element)
			.zoomAbs(
            100, // initial x position
            230, // initial y position
            2 // initial zoom 
          );		
		}
		if(document.querySelector('.right .organize-data-box').style.display != 'block'){
			document.querySelector('.right .organize-data-box').style.display = 'block';
		}
		
		document.querySelector('.right .matrix-data-box').style.display = 'none';
		document.querySelector('.right .dates-data-box').style.display = 'none';		
		document.querySelector('.right .clusterchain-data-box').style.display = 'none';
		
		document.getElementById("graphbut").disabled = false;
		document.getElementById("mapbut").disabled = false;
		document.getElementById("listbut").disabled = false;
		document.getElementById("matrixbut").disabled = true;
		document.getElementById("timebut").disabled = true;
		document.getElementById("relationbut").disabled = false;
		document.getElementById('togglee').style.visibility = 'hidden';
		document.getElementById('Biclusters').style.visibility = 'visible';
		document.getElementById('tricluster').style.visibility = 'hidden';
		
	})
		  
		document.querySelector('.Cswitch').addEventListener('click', function() {								//C tesrt view button
		
		document.querySelector('.right .clusterchain-data-box').style.display = 'block';
		
		if(document.querySelector('.right .bubblemap-box').style.display != 'block')
		{
			document.querySelector('.right .bubblemap-box').style.display = 'block';
		
          $('.note').css('z-index', 9);
          document.querySelector('.right .bubblemap-box').style.zIndex = 99;
          drawBubbleMap();
		 var element = document.querySelector('.bubblemap')
 			panzoom(element)         
		}
		
		if(document.querySelector('.right .all-data-box').style.display != 'block')
		{
		  document.querySelector('.right .all-data-box').style.display = 'block';
          $('.note').css('z-index', 9);
          document.querySelector('.right .all-data-box').style.zIndex = 99;
			var element = document.querySelector('.all-data')
 
			// And pass it to panzoom
			panzoom(element)
			.zoomAbs(
            100, // initial x position
            230, // initial y position
            2 // initial zoom 
          );		
		}
	
		if(document.querySelector('.right .organize-data-box').style.display != 'block'){
			document.querySelector('.right .organize-data-box').style.display = 'block';
		}
		
		document.querySelector('.right .clusterOM-data-box').style.display = 'none';
		document.querySelector('.right .clusterGO-data-box').style.display = 'none';
		document.querySelector('.right .clusterGM-data-box').style.display = 'none';		
		document.querySelector('.right .matrix-data-box').style.display = 'none';
		document.querySelector('.right .dates-data-box').style.display = 'none';				
		
		document.getElementById("graphbut").disabled = false;
		document.getElementById("mapbut").disabled = false;
		document.getElementById("listbut").disabled = false;
		document.getElementById("matrixbut").disabled = true;
		document.getElementById("timebut").disabled = true;
		document.getElementById("relationbut").disabled = false;
		document.getElementById('togglee').style.visibility = 'hidden';
		document.getElementById('Biclusters').style.visibility = 'hidden';
		document.getElementById('tricluster').style.visibility = 'visible';
	})		  
		
		document.querySelector('.mgclusterbut').addEventListener('click', function() {							//map graph cluster button
			document.querySelector('.right .clusterOM-data-box').style.display = 'none';
			document.querySelector('.right .clusterGO-data-box').style.display = 'none';
		  document.querySelector('.right .clusterGM-data-box').style.display = 'block';
		});

		document.querySelector('.mlclusterbut').addEventListener('click', function() {							//map location cluster button
			document.querySelector('.right .clusterOM-data-box').style.display = 'block';
			document.querySelector('.right .clusterGO-data-box').style.display = 'none';
		  document.querySelector('.right .clusterGM-data-box').style.display = 'none';
		});

		document.querySelector('.glclusterbut').addEventListener('click', function() {							//graphlocation cluster button
			document.querySelector('.right .clusterOM-data-box').style.display = 'none';
			document.querySelector('.right .clusterGO-data-box').style.display = 'block';
		  document.querySelector('.right .clusterGM-data-box').style.display = 'none';
		});		
		
		document.querySelector('.triclusterbut').addEventListener('click', function() {
			document.querySelector('.right .clusterchain-data-box').style.display = 'block';
		});	

		document.querySelector('.Zswitch').addEventListener('click', function() {
			
		document.querySelector('.right .matrix-data-box').style.display = 'none';
		document.querySelector('.right .dates-data-box').style.display = 'none';		
		document.querySelector('.right .all-data-box').style.display = 'none';
		document.querySelector('.right .organize-data-box').style.display = 'none';
		document.querySelector('.right .clusterchain-data-box').style.display = 'none';
		document.querySelector('.right .bubblemap-box').style.display = 'none';
		document.querySelector('.right .clusterOM-data-box').style.display = 'none';
		document.querySelector('.right .clusterGO-data-box').style.display = 'none';
		document.querySelector('.right .clusterGM-data-box').style.display = 'none';
		
		document.getElementById("relationbut").disabled = false;
		document.getElementById("timebut").disabled = false;
		document.getElementById("matrixbut").disabled = false;
		document.getElementById("graphbut").disabled = false;
		document.getElementById("mapbut").disabled = false;
		document.getElementById("listbut").disabled = false;
		document.getElementById('togglee').style.visibility = 'hidden';
		document.getElementById('Biclusters').style.visibility = 'hidden';
		document.getElementById('tricluster').style.visibility = 'hidden';
			
		})

		document.querySelector('.dev-button').addEventListener('click', function() {							//developer button
		document.getElementById('Aswitchbut').style.visibility = 'visible';
		document.getElementById('Bswitchbut').style.visibility = 'visible';
		document.getElementById('Cswitchbut').style.visibility = 'visible';
		document.getElementById('Zswitchbut').style.visibility = 'visible';
		document.getElementById('devbut').style.visibility = 'hidden';
		document.getElementById('userbut').style.visibility = 'visible';
		});
		
		document.querySelector('.user-button').addEventListener('click', function() {					//user button
		document.getElementById('Aswitchbut').style.visibility = 'hidden';
		document.getElementById('Bswitchbut').style.visibility = 'hidden';
		document.getElementById('Cswitchbut').style.visibility = 'hidden';
		document.getElementById('Zswitchbut').style.visibility = 'hidden';
		document.getElementById('devbut').style.visibility = 'visible';
		document.getElementById('userbut').style.visibility = 'hidden';
		});
		
	//	document.querySelector('.line-button').addEventListener('click', function() {	
	//						connectlines();
	//	});						

		document.querySelector('.submit-button').addEventListener('click', function() {	
							console.log(tracker);
							let csvContent = "data:text/csv;charset=utf-8," 
							+ tracker.map(e => e.join(",")).join("\n");
				var encodedUri = encodeURI(csvContent);
				var link = document.createElement("a");
				link.setAttribute("href", encodedUri);
				link.setAttribute("download", "my_data.csv");
				document.body.appendChild(link); // Required for FF

				link.click(); // 							
		});		
		
		if(document.querySelector('.right .bubblemap-box').style.display == 'none' || document.querySelector('.right .organize-data-box').style.display == 'none' && document.querySelector('.right .all-data-box').style.display == 'none')
		{
			document.getElementById('togglee').style.visibility = 'hidden';

		}

        function getAllData() {//get data of documents
          var xhttp = new XMLHttpRequest();
          xhttp.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 200) {
              let txt = this.responseText;
              
              document.querySelector('.all-data').innerHTML = this.responseText;
              const matrixElement = document.createElement('div');
              matrixElement.innerHTML = document.querySelectorAll('.all-data .container')[0].outerHTML + document.querySelectorAll('.all-data .container')[1].outerHTML;
              matrixElement.classList.add('matrix-element');
              document.body.appendChild(matrixElement);

              processMatrix();

              domtoimage.toSvg(matrixElement).then(function(svgUrl) {
                document.querySelector('.right .matrix-data').innerHTML = `${svgUrl.split('data:image/svg+xml;charset=utf-8,')[1]}`;
              });

              const containers = document.querySelectorAll('.all-data .container');
              containers[0].remove();
              containers[1].remove();

              document.querySelector('.all-data').childNodes[0].remove();

              matrixElement.style.display = 'none';
            }
          };
          xhttp.open("GET", "http://localhost:3000/getAllData", true);
          xhttp.send();
        }
      
        getAllData();
		
		ClusterGMdata();
		organizedata();
		ClusterGOdata();
		ClusterOMdata();
        ClusterChain();
		$(".note").css('z-index',99).draggable({
          containment: "#board",
          grid: [5, 5],
          cancel: "p"
        });

        $( ".note.matrix-data-box" ).resizable();
		$( ".note.clusterGM-data-box" ).resizable();
		$( ".note.clusterGO-data-box" ).resizable();
		$( ".note.clusterOM-data-box" ).resizable();
		$( ".note.clusters-data-box" ).resizable();
		$( ".note.organize-data-box" ).resizable();
        $( ".note.all-data-box" ).resizable();
        $( ".note.bubblemap-box" ).resizable();
		$( ".note.dates-data-box" ).resizable();
		
		

		
		
      });

    </script>
  </body>
</html>
